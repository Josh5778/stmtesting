/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "cJSON.hpp"
#include <cstdlib>
#include <cstdio>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//uart state statemachine
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define RING_BUFFER_SIZE 1024


/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
static uint8_t ring_buffer[RING_BUFFER_SIZE];
static volatile uint16_t head = 0;
static volatile uint16_t tail = 0;
static volatile bool dma_tx_active = false;
static uint8_t temp_tx_buffer[RING_BUFFER_SIZE];  // Temporary buffer for DMA
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

// Critical section macros
#define ENTER_CRITICAL() uint32_t primask = __get_PRIMASK(); __disable_irq()
#define EXIT_CRITICAL() __set_PRIMASK(primask)


// Get number of bytes available for writing
static uint16_t ring_buffer_free_space(void) {
    uint16_t h = head;
    uint16_t t = tail;

    if (h >= t) {
        return RING_BUFFER_SIZE - 1 - (h - t);
    } else {
        return t - h - 1;
    }
}

// Get number of bytes available for reading
static uint16_t ring_buffer_data_available(void) {
    uint16_t h = head;
    uint16_t t = tail;

    if (h >= t) {
        return h - t;
    } else {
        return RING_BUFFER_SIZE - t + h;
    }
}

bool ring_buffer_enqueue(const uint8_t *data, uint16_t len) {
    if (len == 0 || data == NULL) return false;

    ENTER_CRITICAL();

    // Check if we have enough space
    if (len > ring_buffer_free_space()) {
        EXIT_CRITICAL();
        return false;
    }

    // Copy data byte by byte
    for (uint16_t i = 0; i < len; i++) {
        ring_buffer[head] = data[i];
        head = (head + 1) % RING_BUFFER_SIZE;
    }

    EXIT_CRITICAL();
    return true;
}

// Copy data from ring buffer to linear buffer for DMA
static uint16_t ring_buffer_copy_for_tx(uint8_t *dest, uint16_t max_len) {
    ENTER_CRITICAL();

    uint16_t available = ring_buffer_data_available();
    if (available == 0) {
        EXIT_CRITICAL();
        return 0;
    }

    uint16_t to_copy = (available > max_len) ? max_len : available;
    uint16_t t = tail;

    // Copy data to temporary buffer
    for (uint16_t i = 0; i < to_copy; i++) {
        dest[i] = ring_buffer[t];
        t = (t + 1) % RING_BUFFER_SIZE;
    }

    EXIT_CRITICAL();
    return to_copy;
}

void ring_buffer_start_tx(void) {
    if (dma_tx_active) return;

    // Copy data to temporary buffer
    uint16_t len = ring_buffer_copy_for_tx(temp_tx_buffer, RING_BUFFER_SIZE);

    if (len == 0) return;

    dma_tx_active = true;

    // Start DMA transmission with copied data
    HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart2, temp_tx_buffer, len);

    if (status != HAL_OK) {
        dma_tx_active = false;
        // Handle error - could retry or log
    }
}

void send_json3(cJSON *json) {
    if (json == NULL) return;

    char *json_str = cJSON_PrintUnformatted(json);
    if (json_str == NULL) {
        cJSON_Delete(json);
        return;
    }

    // Calculate total length needed
    size_t json_len = strlen(json_str);
    size_t total_len = json_len + 1; // +1 for newline

    // Check if message is too large
    if (total_len >= RING_BUFFER_SIZE / 2) {
        free(json_str);
        cJSON_Delete(json);
        return;
    }

    // Create message with newline
    char *message = malloc(total_len + 1);
    if (message == NULL) {
        free(json_str);
        cJSON_Delete(json);
        return;
    }

    snprintf(message, total_len + 1, "%s\n", json_str);

    // Try to enqueue with retry logic
    int retry_count = 0;
    while (retry_count < 10) {
        if (ring_buffer_enqueue((uint8_t*)message, total_len)) {
            break;
        }
        retry_count++;
        HAL_Delay(1); // Small delay before retry
    }

    // Start transmission
    ring_buffer_start_tx();

    free(message);
    free(json_str);
    cJSON_Delete(json);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART2) {
        ENTER_CRITICAL();

        // Calculate how much data was actually sent
        uint16_t sent_length = ring_buffer_data_available();
        if (sent_length > RING_BUFFER_SIZE) sent_length = RING_BUFFER_SIZE;

        // Update tail pointer
        tail = (tail + sent_length) % RING_BUFFER_SIZE;
        dma_tx_active = false;

        EXIT_CRITICAL();

        // Try to send more data if available
        ring_buffer_start_tx();
    }
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART2) {
        ENTER_CRITICAL();
        dma_tx_active = false;
        EXIT_CRITICAL();

        // Reset UART if needed
        // HAL_UART_DeInit(&huart2);
        // HAL_UART_Init(&huart2);
    }
}

// Debug function to check buffer health
void debug_buffer_status(void) {
    ENTER_CRITICAL();
    uint16_t free_space = ring_buffer_free_space();
    uint16_t data_available = ring_buffer_data_available();
    uint16_t h = head;
    uint16_t t = tail;
    bool dma_active = dma_tx_active;
    EXIT_CRITICAL();

    cJSON *debug = cJSON_CreateObject();
    cJSON_AddNumberToObject(debug, "head", h);
    cJSON_AddNumberToObject(debug, "tail", t);
    cJSON_AddNumberToObject(debug, "free", free_space);
    cJSON_AddNumberToObject(debug, "data", data_available);
    cJSON_AddBoolToObject(debug, "dma_active", dma_active);

    // Don't use send_json3 to avoid recursion
    char *debug_str = cJSON_PrintUnformatted(debug);
    if (debug_str) {
        // Direct UART transmission for debug
        HAL_UART_Transmit(&huart2, (uint8_t*)debug_str, strlen(debug_str), 1000);
        HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, 1000);
        free(debug_str);
    }
    cJSON_Delete(debug);
}




/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 *
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cJSON *json = cJSON_CreateObject();
	  cJSON_AddNumberToObject(json, "cells", 120);
	  cJSON_AddNumberToObject(json, "segments", 6);
	  send_json3(json);
	  HAL_Delay(10);  // Throttle
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
