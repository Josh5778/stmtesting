
dma_transmission_drafting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007840  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c10  08007c10  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c18  08007c18  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c18  08007c18  00008c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c1c  08007c1c  00008c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007c20  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a4  2000006c  08007c8c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  08007c8c  00009210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d7b  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d1  00000000  00000000  0001fe17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  000231e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f17  00000000  00000000  00024530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002573e  00000000  00000000  00025447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c37  00000000  00000000  0004ab85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d128a  00000000  00000000  000607bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a4c  00000000  00000000  00131a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001374d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079b8 	.word	0x080079b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080079b8 	.word	0x080079b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b988 	b.w	8000ea4 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4688      	mov	r8, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d962      	bls.n	8000c88 <__udivmoddi4+0xdc>
 8000bc2:	fab2 f682 	clz	r6, r2
 8000bc6:	b14e      	cbz	r6, 8000bdc <__udivmoddi4+0x30>
 8000bc8:	f1c6 0320 	rsb	r3, r6, #32
 8000bcc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd4:	40b7      	lsls	r7, r6
 8000bd6:	ea43 0808 	orr.w	r8, r3, r8
 8000bda:	40b4      	lsls	r4, r6
 8000bdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be0:	fa1f fc87 	uxth.w	ip, r7
 8000be4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000be8:	0c23      	lsrs	r3, r4, #16
 8000bea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c00:	f080 80ea 	bcs.w	8000dd8 <__udivmoddi4+0x22c>
 8000c04:	429a      	cmp	r2, r3
 8000c06:	f240 80e7 	bls.w	8000dd8 <__udivmoddi4+0x22c>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	443b      	add	r3, r7
 8000c0e:	1a9a      	subs	r2, r3, r2
 8000c10:	b2a3      	uxth	r3, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c22:	459c      	cmp	ip, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x8e>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 80d6 	bcs.w	8000ddc <__udivmoddi4+0x230>
 8000c30:	459c      	cmp	ip, r3
 8000c32:	f240 80d3 	bls.w	8000ddc <__udivmoddi4+0x230>
 8000c36:	443b      	add	r3, r7
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3e:	eba3 030c 	sub.w	r3, r3, ip
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11d      	cbz	r5, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40f3      	lsrs	r3, r6
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d905      	bls.n	8000c62 <__udivmoddi4+0xb6>
 8000c56:	b10d      	cbz	r5, 8000c5c <__udivmoddi4+0xb0>
 8000c58:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e7f5      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d146      	bne.n	8000cf8 <__udivmoddi4+0x14c>
 8000c6a:	4573      	cmp	r3, lr
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xc8>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 8105 	bhi.w	8000e7e <__udivmoddi4+0x2d2>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4690      	mov	r8, r2
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0e5      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c82:	e9c5 4800 	strd	r4, r8, [r5]
 8000c86:	e7e2      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f000 8090 	beq.w	8000dae <__udivmoddi4+0x202>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f040 80a4 	bne.w	8000de0 <__udivmoddi4+0x234>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	0c03      	lsrs	r3, r0, #16
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	b280      	uxth	r0, r0
 8000ca2:	b2bc      	uxth	r4, r7
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000caa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x11e>
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x11c>
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	f200 80e0 	bhi.w	8000e88 <__udivmoddi4+0x2dc>
 8000cc8:	46c4      	mov	ip, r8
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cd8:	fb02 f404 	mul.w	r4, r2, r4
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x144>
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x142>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f200 80ca 	bhi.w	8000e82 <__udivmoddi4+0x2d6>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0x98>
 8000cf8:	f1c1 0620 	rsb	r6, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000d02:	431f      	orrs	r7, r3
 8000d04:	fa0e f401 	lsl.w	r4, lr, r1
 8000d08:	fa20 f306 	lsr.w	r3, r0, r6
 8000d0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d14:	4323      	orrs	r3, r4
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	fa1f fc87 	uxth.w	ip, r7
 8000d1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d22:	0c1c      	lsrs	r4, r3, #16
 8000d24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x1a0>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d3e:	f080 809c 	bcs.w	8000e7a <__udivmoddi4+0x2ce>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	f240 8099 	bls.w	8000e7a <__udivmoddi4+0x2ce>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	eba4 040e 	sub.w	r4, r4, lr
 8000d50:	fa1f fe83 	uxth.w	lr, r3
 8000d54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d58:	fb09 4413 	mls	r4, r9, r3, r4
 8000d5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x1ce>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d6e:	f080 8082 	bcs.w	8000e76 <__udivmoddi4+0x2ca>
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d97f      	bls.n	8000e76 <__udivmoddi4+0x2ca>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d7e:	eba4 040c 	sub.w	r4, r4, ip
 8000d82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d86:	4564      	cmp	r4, ip
 8000d88:	4673      	mov	r3, lr
 8000d8a:	46e1      	mov	r9, ip
 8000d8c:	d362      	bcc.n	8000e54 <__udivmoddi4+0x2a8>
 8000d8e:	d05f      	beq.n	8000e50 <__udivmoddi4+0x2a4>
 8000d90:	b15d      	cbz	r5, 8000daa <__udivmoddi4+0x1fe>
 8000d92:	ebb8 0203 	subs.w	r2, r8, r3
 8000d96:	eb64 0409 	sbc.w	r4, r4, r9
 8000d9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000da2:	431e      	orrs	r6, r3
 8000da4:	40cc      	lsrs	r4, r1
 8000da6:	e9c5 6400 	strd	r6, r4, [r5]
 8000daa:	2100      	movs	r1, #0
 8000dac:	e74f      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000dae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000db2:	0c01      	lsrs	r1, r0, #16
 8000db4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000db8:	b280      	uxth	r0, r0
 8000dba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	463c      	mov	r4, r7
 8000dc4:	46b8      	mov	r8, r7
 8000dc6:	46be      	mov	lr, r7
 8000dc8:	2620      	movs	r6, #32
 8000dca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dce:	eba2 0208 	sub.w	r2, r2, r8
 8000dd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dd6:	e766      	b.n	8000ca6 <__udivmoddi4+0xfa>
 8000dd8:	4601      	mov	r1, r0
 8000dda:	e718      	b.n	8000c0e <__udivmoddi4+0x62>
 8000ddc:	4610      	mov	r0, r2
 8000dde:	e72c      	b.n	8000c3a <__udivmoddi4+0x8e>
 8000de0:	f1c6 0220 	rsb	r2, r6, #32
 8000de4:	fa2e f302 	lsr.w	r3, lr, r2
 8000de8:	40b7      	lsls	r7, r6
 8000dea:	40b1      	lsls	r1, r6
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df4:	430a      	orrs	r2, r1
 8000df6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dfa:	b2bc      	uxth	r4, r7
 8000dfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e00:	0c11      	lsrs	r1, r2, #16
 8000e02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e06:	fb08 f904 	mul.w	r9, r8, r4
 8000e0a:	40b0      	lsls	r0, r6
 8000e0c:	4589      	cmp	r9, r1
 8000e0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e12:	b280      	uxth	r0, r0
 8000e14:	d93e      	bls.n	8000e94 <__udivmoddi4+0x2e8>
 8000e16:	1879      	adds	r1, r7, r1
 8000e18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e1c:	d201      	bcs.n	8000e22 <__udivmoddi4+0x276>
 8000e1e:	4589      	cmp	r9, r1
 8000e20:	d81f      	bhi.n	8000e62 <__udivmoddi4+0x2b6>
 8000e22:	eba1 0109 	sub.w	r1, r1, r9
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fb09 f804 	mul.w	r8, r9, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	b292      	uxth	r2, r2
 8000e34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e38:	4542      	cmp	r2, r8
 8000e3a:	d229      	bcs.n	8000e90 <__udivmoddi4+0x2e4>
 8000e3c:	18ba      	adds	r2, r7, r2
 8000e3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e42:	d2c4      	bcs.n	8000dce <__udivmoddi4+0x222>
 8000e44:	4542      	cmp	r2, r8
 8000e46:	d2c2      	bcs.n	8000dce <__udivmoddi4+0x222>
 8000e48:	f1a9 0102 	sub.w	r1, r9, #2
 8000e4c:	443a      	add	r2, r7
 8000e4e:	e7be      	b.n	8000dce <__udivmoddi4+0x222>
 8000e50:	45f0      	cmp	r8, lr
 8000e52:	d29d      	bcs.n	8000d90 <__udivmoddi4+0x1e4>
 8000e54:	ebbe 0302 	subs.w	r3, lr, r2
 8000e58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	46e1      	mov	r9, ip
 8000e60:	e796      	b.n	8000d90 <__udivmoddi4+0x1e4>
 8000e62:	eba7 0909 	sub.w	r9, r7, r9
 8000e66:	4449      	add	r1, r9
 8000e68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e70:	fb09 f804 	mul.w	r8, r9, r4
 8000e74:	e7db      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e76:	4673      	mov	r3, lr
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1ce>
 8000e7a:	4650      	mov	r0, sl
 8000e7c:	e766      	b.n	8000d4c <__udivmoddi4+0x1a0>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e6fd      	b.n	8000c7e <__udivmoddi4+0xd2>
 8000e82:	443b      	add	r3, r7
 8000e84:	3a02      	subs	r2, #2
 8000e86:	e733      	b.n	8000cf0 <__udivmoddi4+0x144>
 8000e88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e8c:	443b      	add	r3, r7
 8000e8e:	e71c      	b.n	8000cca <__udivmoddi4+0x11e>
 8000e90:	4649      	mov	r1, r9
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x222>
 8000e94:	eba1 0109 	sub.w	r1, r1, r9
 8000e98:	46c4      	mov	ip, r8
 8000e9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9e:	fb09 f804 	mul.w	r8, r9, r4
 8000ea2:	e7c4      	b.n	8000e2e <__udivmoddi4+0x282>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZL12cJSON_strdupPKhPK14internal_hooks>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <_ZL12cJSON_strdupPKhPK14internal_hooks+0x1c>
    {
        return NULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e015      	b.n	8000ef0 <_ZL12cJSON_strdupPKhPK14internal_hooks+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff f983 	bl	80001d0 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	3301      	adds	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	4798      	blx	r3
 8000ed8:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <_ZL12cJSON_strdupPKhPK14internal_hooks+0x3c>
    {
        return NULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e005      	b.n	8000ef0 <_ZL12cJSON_strdupPKhPK14internal_hooks+0x48>
    }
    memcpy(copy, string, length);
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	68b8      	ldr	r0, [r7, #8]
 8000eea:	f005 fd89 	bl	8006a00 <memcpy>

    return copy;
 8000eee:	68bb      	ldr	r3, [r7, #8]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_ZL14cJSON_New_ItemPK14internal_hooks>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	4798      	blx	r3
 8000f08:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <_ZL14cJSON_New_ItemPK14internal_hooks+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f10:	2228      	movs	r2, #40	@ 0x28
 8000f12:	2100      	movs	r1, #0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f005 fd2f 	bl	8006978 <memset>
    }

    return node;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f30:	e03d      	b.n	8000fae <cJSON_Delete+0x8a>
    {
        next = item->next;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d108      	bne.n	8000f56 <cJSON_Delete+0x32>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffe7 	bl	8000f24 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <cJSON_Delete+0x58>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d008      	beq.n	8000f7c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <cJSON_Delete+0x9c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6912      	ldr	r2, [r2, #16]
 8000f72:	4610      	mov	r0, r2
 8000f74:	4798      	blx	r3
            item->valuestring = NULL;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10c      	bne.n	8000fa2 <cJSON_Delete+0x7e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <cJSON_Delete+0x9c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6a12      	ldr	r2, [r2, #32]
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4798      	blx	r3
            item->string = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <cJSON_Delete+0x9c>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	4798      	blx	r3
        item = next;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1be      	bne.n	8000f32 <cJSON_Delete+0xe>
    }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <_ZL17get_decimal_pointv>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000fc8:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZL6ensureP11printbufferj>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <_ZL6ensureP11printbufferj+0x20>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <_ZL6ensureP11printbufferj+0x24>
    {
        return NULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e083      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d007      	beq.n	8001010 <_ZL6ensureP11printbufferj+0x3c>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	d301      	bcc.n	8001010 <_ZL6ensureP11printbufferj+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800100c:	2300      	movs	r3, #0
 800100e:	e077      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
    }

    if (needed > INT_MAX)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	da01      	bge.n	800101a <_ZL6ensureP11printbufferj+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001016:	2300      	movs	r3, #0
 8001018:	e072      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
    }

    needed += p->offset + 1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	4413      	add	r3, r2
 8001022:	3301      	adds	r3, #1
 8001024:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d805      	bhi.n	800103c <_ZL6ensureP11printbufferj+0x68>
    {
        return p->buffer + p->offset;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	4413      	add	r3, r2
 800103a:	e061      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
    }

    if (p->noalloc) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_ZL6ensureP11printbufferj+0x74>
        return NULL;
 8001044:	2300      	movs	r3, #0
 8001046:	e05b      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800104e:	d308      	bcc.n	8001062 <_ZL6ensureP11printbufferj+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db03      	blt.n	800105e <_ZL6ensureP11printbufferj+0x8a>
        {
            newsize = INT_MAX;
 8001056:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	e004      	b.n	8001068 <_ZL6ensureP11printbufferj+0x94>
        }
        else
        {
            return NULL;
 800105e:	2300      	movs	r3, #0
 8001060:	e04e      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d018      	beq.n	80010a2 <_ZL6ensureP11printbufferj+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	4610      	mov	r0, r2
 800107c:	4798      	blx	r3
 800107e:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d132      	bne.n	80010ec <_ZL6ensureP11printbufferj+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	4610      	mov	r0, r2
 8001090:	4798      	blx	r3
            p->length = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]

            return NULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	e02e      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	4798      	blx	r3
 80010aa:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <_ZL6ensureP11printbufferj+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	4610      	mov	r0, r2
 80010bc:	4798      	blx	r3
            p->length = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

            return NULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e018      	b.n	8001100 <_ZL6ensureP11printbufferj+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	461a      	mov	r2, r3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f005 fc90 	bl	8006a00 <memcpy>
        p->hooks.deallocate(p->buffer);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	4610      	mov	r0, r2
 80010ea:	4798      	blx	r3
    }
    p->length = newsize;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZL13update_offsetP11printbuffer>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d013      	beq.n	8001142 <_ZL13update_offsetP11printbuffer+0x3a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00f      	beq.n	8001142 <_ZL13update_offsetP11printbuffer+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689c      	ldr	r4, [r3, #8]
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff f84c 	bl	80001d0 <strlen>
 8001138:	4603      	mov	r3, r0
 800113a:	18e2      	adds	r2, r4, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e000      	b.n	8001144 <_ZL13update_offsetP11printbuffer+0x3c>
        return;
 8001142:	bf00      	nop
}
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
	...

0800114c <_ZL14compare_doubledd>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	b087      	sub	sp, #28
 8001152:	af00      	add	r7, sp, #0
 8001154:	ed87 0b02 	vstr	d0, [r7, #8]
 8001158:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	68fe      	ldr	r6, [r7, #12]
 8001160:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	687e      	ldr	r6, [r7, #4]
 8001168:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800116c:	f7ff fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <_ZL14compare_doubledd+0x34>
 8001176:	68bc      	ldr	r4, [r7, #8]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800117e:	e003      	b.n	8001188 <_ZL14compare_doubledd+0x3c>
 8001180:	683c      	ldr	r4, [r7, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001188:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800118c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4690      	mov	r8, r2
 800119e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <_ZL14compare_doubledd+0x8c>)
 80011a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ac:	f7ff fa24 	bl	80005f8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	2101      	movs	r1, #1
 80011b6:	460c      	mov	r4, r1
 80011b8:	4640      	mov	r0, r8
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff fc98 	bl	8000af0 <__aeabi_dcmple>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <_ZL14compare_doubledd+0x7e>
 80011c6:	2300      	movs	r3, #0
 80011c8:	461c      	mov	r4, r3
 80011ca:	b2e3      	uxtb	r3, r4
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011d6:	bf00      	nop
 80011d8:	3cb00000 	.word	0x3cb00000

080011dc <_ZL12print_numberPK5cJSONP11printbuffer>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b092      	sub	sp, #72	@ 0x48
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 8001210:	f7ff fed8 	bl	8000fc4 <_ZL17get_decimal_pointv>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <_ZL12print_numberPK5cJSONP11printbuffer+0x54>
    {
        return false;
 800122c:	2300      	movs	r3, #0
 800122e:	e0b9      	b.n	80013a4 <_ZL12print_numberPK5cJSONP11printbuffer+0x1c8>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001230:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001234:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001238:	f7ff fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d021      	beq.n	8001286 <_ZL12print_numberPK5cJSONP11printbuffer+0xaa>
 8001242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001246:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800124a:	f7ff f81d 	bl	8000288 <__aeabi_dsub>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800125a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800125e:	f7ff f813 	bl	8000288 <__aeabi_dsub>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4620      	mov	r0, r4
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d110      	bne.n	8001296 <_ZL12print_numberPK5cJSONP11printbuffer+0xba>
 8001274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001278:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800127c:	f7ff fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <_ZL12print_numberPK5cJSONP11printbuffer+0xba>
    {
        length = sprintf((char*)number_buffer, "null");
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4948      	ldr	r1, [pc, #288]	@ (80013ac <_ZL12print_numberPK5cJSONP11printbuffer+0x1d0>)
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fb23 	bl	80068d8 <siprintf>
 8001292:	6478      	str	r0, [r7, #68]	@ 0x44
 8001294:	e044      	b.n	8001320 <_ZL12print_numberPK5cJSONP11printbuffer+0x144>
    }
    else if(d == (double)item->valueint)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f942 	bl	8000524 <__aeabi_i2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012a8:	f7ff fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <_ZL12print_numberPK5cJSONP11printbuffer+0xea>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	493d      	ldr	r1, [pc, #244]	@ (80013b0 <_ZL12print_numberPK5cJSONP11printbuffer+0x1d4>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 fb0b 	bl	80068d8 <siprintf>
 80012c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80012c4:	e02c      	b.n	8001320 <_ZL12print_numberPK5cJSONP11printbuffer+0x144>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80012c6:	f107 0014 	add.w	r0, r7, #20
 80012ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012ce:	4939      	ldr	r1, [pc, #228]	@ (80013b4 <_ZL12print_numberPK5cJSONP11printbuffer+0x1d8>)
 80012d0:	f005 fb02 	bl	80068d8 <siprintf>
 80012d4:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4936      	ldr	r1, [pc, #216]	@ (80013b8 <_ZL12print_numberPK5cJSONP11printbuffer+0x1dc>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 fb1b 	bl	800691c <siscanf>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10c      	bne.n	8001306 <_ZL12print_numberPK5cJSONP11printbuffer+0x12a>
 80012ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80012f0:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80012f4:	eeb0 0a47 	vmov.f32	s0, s14
 80012f8:	eef0 0a67 	vmov.f32	s1, s15
 80012fc:	f7ff ff26 	bl	800114c <_ZL14compare_doubledd>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <_ZL12print_numberPK5cJSONP11printbuffer+0x12e>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <_ZL12print_numberPK5cJSONP11printbuffer+0x130>
 800130a:	2300      	movs	r3, #0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <_ZL12print_numberPK5cJSONP11printbuffer+0x144>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001310:	f107 0014 	add.w	r0, r7, #20
 8001314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001318:	4928      	ldr	r1, [pc, #160]	@ (80013bc <_ZL12print_numberPK5cJSONP11printbuffer+0x1e0>)
 800131a:	f005 fadd 	bl	80068d8 <siprintf>
 800131e:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001322:	2b00      	cmp	r3, #0
 8001324:	db02      	blt.n	800132c <_ZL12print_numberPK5cJSONP11printbuffer+0x150>
 8001326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001328:	2b19      	cmp	r3, #25
 800132a:	dd01      	ble.n	8001330 <_ZL12print_numberPK5cJSONP11printbuffer+0x154>
    {
        return false;
 800132c:	2300      	movs	r3, #0
 800132e:	e039      	b.n	80013a4 <_ZL12print_numberPK5cJSONP11printbuffer+0x1c8>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001332:	3301      	adds	r3, #1
 8001334:	4619      	mov	r1, r3
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f7ff fe4c 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 800133c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800133e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <_ZL12print_numberPK5cJSONP11printbuffer+0x16c>
    {
        return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e02d      	b.n	80013a4 <_ZL12print_numberPK5cJSONP11printbuffer+0x1c8>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001348:	2300      	movs	r3, #0
 800134a:	643b      	str	r3, [r7, #64]	@ 0x40
 800134c:	e01a      	b.n	8001384 <_ZL12print_numberPK5cJSONP11printbuffer+0x1a8>
    {
        if (number_buffer[i] == decimal_point)
 800134e:	f107 0214 	add.w	r2, r7, #20
 8001352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800135c:	429a      	cmp	r2, r3
 800135e:	d105      	bne.n	800136c <_ZL12print_numberPK5cJSONP11printbuffer+0x190>
        {
            output_pointer[i] = '.';
 8001360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001364:	4413      	add	r3, r2
 8001366:	222e      	movs	r2, #46	@ 0x2e
 8001368:	701a      	strb	r2, [r3, #0]
            continue;
 800136a:	e008      	b.n	800137e <_ZL12print_numberPK5cJSONP11printbuffer+0x1a2>
        }

        output_pointer[i] = number_buffer[i];
 800136c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800136e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001370:	4413      	add	r3, r2
 8001372:	f107 0114 	add.w	r1, r7, #20
 8001376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001378:	440a      	add	r2, r1
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800137e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001380:	3301      	adds	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
 8001384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e0      	bcc.n	800134e <_ZL12print_numberPK5cJSONP11printbuffer+0x172>
    }
    output_pointer[i] = '\0';
 800138c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800138e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001390:	4413      	add	r3, r2
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139c:	441a      	add	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	609a      	str	r2, [r3, #8]

    return true;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3748      	adds	r7, #72	@ 0x48
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bdb0      	pop	{r4, r5, r7, pc}
 80013ac:	080079dc 	.word	0x080079dc
 80013b0:	080079e4 	.word	0x080079e4
 80013b4:	080079e8 	.word	0x080079e8
 80013b8:	080079f0 	.word	0x080079f0
 80013bc:	080079f4 	.word	0x080079f4

080013c0 <_ZL16print_string_ptrPKhP11printbuffer>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <_ZL16print_string_ptrPKhP11printbuffer+0x28>
    {
        return false;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e110      	b.n	800160a <_ZL16print_string_ptrPKhP11printbuffer+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d111      	bne.n	8001412 <_ZL16print_string_ptrPKhP11printbuffer+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80013ee:	2103      	movs	r1, #3
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f7ff fdef 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 80013f6:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <_ZL16print_string_ptrPKhP11printbuffer+0x42>
        {
            return false;
 80013fe:	2300      	movs	r3, #0
 8001400:	e103      	b.n	800160a <_ZL16print_string_ptrPKhP11printbuffer+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4a83      	ldr	r2, [pc, #524]	@ (8001614 <_ZL16print_string_ptrPKhP11printbuffer+0x254>)
 8001406:	8811      	ldrh	r1, [r2, #0]
 8001408:	7892      	ldrb	r2, [r2, #2]
 800140a:	8019      	strh	r1, [r3, #0]
 800140c:	709a      	strb	r2, [r3, #2]

        return true;
 800140e:	2301      	movs	r3, #1
 8001410:	e0fb      	b.n	800160a <_ZL16print_string_ptrPKhP11printbuffer+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e024      	b.n	8001462 <_ZL16print_string_ptrPKhP11printbuffer+0xa2>
    {
        switch (*input_pointer)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b22      	cmp	r3, #34	@ 0x22
 800141e:	dc0f      	bgt.n	8001440 <_ZL16print_string_ptrPKhP11printbuffer+0x80>
 8001420:	2b08      	cmp	r3, #8
 8001422:	db13      	blt.n	800144c <_ZL16print_string_ptrPKhP11printbuffer+0x8c>
 8001424:	3b08      	subs	r3, #8
 8001426:	4a7c      	ldr	r2, [pc, #496]	@ (8001618 <_ZL16print_string_ptrPKhP11printbuffer+0x258>)
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <_ZL16print_string_ptrPKhP11printbuffer+0x84>
 800143e:	e005      	b.n	800144c <_ZL16print_string_ptrPKhP11printbuffer+0x8c>
 8001440:	2b5c      	cmp	r3, #92	@ 0x5c
 8001442:	d103      	bne.n	800144c <_ZL16print_string_ptrPKhP11printbuffer+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
                break;
 800144a:	e007      	b.n	800145c <_ZL16print_string_ptrPKhP11printbuffer+0x9c>
            default:
                if (*input_pointer < 32)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b1f      	cmp	r3, #31
 8001452:	d802      	bhi.n	800145a <_ZL16print_string_ptrPKhP11printbuffer+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3305      	adds	r3, #5
 8001458:	617b      	str	r3, [r7, #20]
                }
                break;
 800145a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	3301      	adds	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1d6      	bne.n	8001418 <_ZL16print_string_ptrPKhP11printbuffer+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	461a      	mov	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3303      	adds	r3, #3
 800147c:	4619      	mov	r1, r3
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7ff fda8 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001484:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <_ZL16print_string_ptrPKhP11printbuffer+0xd0>
    {
        return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e0bc      	b.n	800160a <_ZL16print_string_ptrPKhP11printbuffer+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d117      	bne.n	80014c6 <_ZL16print_string_ptrPKhP11printbuffer+0x106>
    {
        output[0] = '\"';
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	2222      	movs	r2, #34	@ 0x22
 800149a:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3301      	adds	r3, #1
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 faab 	bl	8006a00 <memcpy>
        output[output_length + 1] = '\"';
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	2222      	movs	r2, #34	@ 0x22
 80014b4:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3302      	adds	r3, #2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]

        return true;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0a1      	b.n	800160a <_ZL16print_string_ptrPKhP11printbuffer+0x24a>
    }

    output[0] = '\"';
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	2222      	movs	r2, #34	@ 0x22
 80014ca:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e086      	b.n	80015e6 <_ZL16print_string_ptrPKhP11printbuffer+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b1f      	cmp	r3, #31
 80014de:	d90c      	bls.n	80014fa <_ZL16print_string_ptrPKhP11printbuffer+0x13a>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b22      	cmp	r3, #34	@ 0x22
 80014e6:	d008      	beq.n	80014fa <_ZL16print_string_ptrPKhP11printbuffer+0x13a>
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80014ee:	d004      	beq.n	80014fa <_ZL16print_string_ptrPKhP11printbuffer+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e06f      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	61ba      	str	r2, [r7, #24]
 8001500:	225c      	movs	r2, #92	@ 0x5c
 8001502:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b22      	cmp	r3, #34	@ 0x22
 800150a:	dc3d      	bgt.n	8001588 <_ZL16print_string_ptrPKhP11printbuffer+0x1c8>
 800150c:	2b08      	cmp	r3, #8
 800150e:	db59      	blt.n	80015c4 <_ZL16print_string_ptrPKhP11printbuffer+0x204>
 8001510:	3b08      	subs	r3, #8
 8001512:	2b1a      	cmp	r3, #26
 8001514:	d856      	bhi.n	80015c4 <_ZL16print_string_ptrPKhP11printbuffer+0x204>
 8001516:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <_ZL16print_string_ptrPKhP11printbuffer+0x15c>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	0800159d 	.word	0x0800159d
 8001520:	080015bd 	.word	0x080015bd
 8001524:	080015ad 	.word	0x080015ad
 8001528:	080015c5 	.word	0x080015c5
 800152c:	080015a5 	.word	0x080015a5
 8001530:	080015b5 	.word	0x080015b5
 8001534:	080015c5 	.word	0x080015c5
 8001538:	080015c5 	.word	0x080015c5
 800153c:	080015c5 	.word	0x080015c5
 8001540:	080015c5 	.word	0x080015c5
 8001544:	080015c5 	.word	0x080015c5
 8001548:	080015c5 	.word	0x080015c5
 800154c:	080015c5 	.word	0x080015c5
 8001550:	080015c5 	.word	0x080015c5
 8001554:	080015c5 	.word	0x080015c5
 8001558:	080015c5 	.word	0x080015c5
 800155c:	080015c5 	.word	0x080015c5
 8001560:	080015c5 	.word	0x080015c5
 8001564:	080015c5 	.word	0x080015c5
 8001568:	080015c5 	.word	0x080015c5
 800156c:	080015c5 	.word	0x080015c5
 8001570:	080015c5 	.word	0x080015c5
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015c5 	.word	0x080015c5
 800157c:	080015c5 	.word	0x080015c5
 8001580:	080015c5 	.word	0x080015c5
 8001584:	08001595 	.word	0x08001595
 8001588:	2b5c      	cmp	r3, #92	@ 0x5c
 800158a:	d11b      	bne.n	80015c4 <_ZL16print_string_ptrPKhP11printbuffer+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	225c      	movs	r2, #92	@ 0x5c
 8001590:	701a      	strb	r2, [r3, #0]
                    break;
 8001592:	e022      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2222      	movs	r2, #34	@ 0x22
 8001598:	701a      	strb	r2, [r3, #0]
                    break;
 800159a:	e01e      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2262      	movs	r2, #98	@ 0x62
 80015a0:	701a      	strb	r2, [r3, #0]
                    break;
 80015a2:	e01a      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\f':
                    *output_pointer = 'f';
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2266      	movs	r2, #102	@ 0x66
 80015a8:	701a      	strb	r2, [r3, #0]
                    break;
 80015aa:	e016      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\n':
                    *output_pointer = 'n';
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	226e      	movs	r2, #110	@ 0x6e
 80015b0:	701a      	strb	r2, [r3, #0]
                    break;
 80015b2:	e012      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2272      	movs	r2, #114	@ 0x72
 80015b8:	701a      	strb	r2, [r3, #0]
                    break;
 80015ba:	e00e      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                case '\t':
                    *output_pointer = 't';
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2274      	movs	r2, #116	@ 0x74
 80015c0:	701a      	strb	r2, [r3, #0]
                    break;
 80015c2:	e00a      	b.n	80015da <_ZL16print_string_ptrPKhP11printbuffer+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4914      	ldr	r1, [pc, #80]	@ (800161c <_ZL16print_string_ptrPKhP11printbuffer+0x25c>)
 80015cc:	69b8      	ldr	r0, [r7, #24]
 80015ce:	f005 f983 	bl	80068d8 <siprintf>
                    output_pointer += 4;
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	3304      	adds	r3, #4
 80015d6:	61bb      	str	r3, [r7, #24]
                    break;
 80015d8:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3301      	adds	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f47f af74 	bne.w	80014d8 <_ZL16print_string_ptrPKhP11printbuffer+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3301      	adds	r3, #1
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	2222      	movs	r2, #34	@ 0x22
 80015fa:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3302      	adds	r3, #2
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4413      	add	r3, r2
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]

    return true;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	080079fc 	.word	0x080079fc
 8001618:	04000037 	.word	0x04000037
 800161c:	08007a00 	.word	0x08007a00

08001620 <_ZL12print_stringPK5cJSONP11printbuffer>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	6839      	ldr	r1, [r7, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fec5 	bl	80013c0 <_ZL16print_string_ptrPKhP11printbuffer>
 8001636:	4603      	mov	r3, r0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZL5printPK5cJSONiPK14internal_hooks>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	@ 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800164c:	2300      	movs	r3, #0
 800164e:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	2224      	movs	r2, #36	@ 0x24
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f005 f98d 	bl	8006978 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001666:	4798      	blx	r3
 8001668:	4603      	mov	r3, r0
 800166a:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800166c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001670:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167c:	ca07      	ldmia	r2, {r0, r1, r2}
 800167e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d047      	beq.n	8001718 <_ZL5printPK5cJSONiPK14internal_hooks+0xd8>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f872 	bl	8001778 <_ZL11print_valuePK5cJSONP11printbuffer>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d13b      	bne.n	800171c <_ZL5printPK5cJSONiPK14internal_hooks+0xdc>
    {
        goto fail;
    }
    update_offset(buffer);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd2d 	bl	8001108 <_ZL13update_offsetP11printbuffer>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00d      	beq.n	80016d2 <_ZL5printPK5cJSONiPK14internal_hooks+0x92>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	6938      	ldr	r0, [r7, #16]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	3201      	adds	r2, #1
 80016c0:	4611      	mov	r1, r2
 80016c2:	4798      	blx	r3
 80016c4:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 80016c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d029      	beq.n	8001720 <_ZL5printPK5cJSONiPK14internal_hooks+0xe0>
            goto fail;
        }
        buffer->buffer = NULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	e020      	b.n	8001714 <_ZL5printPK5cJSONiPK14internal_hooks+0xd4>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	3201      	adds	r2, #1
 80016da:	4610      	mov	r0, r2
 80016dc:	4798      	blx	r3
 80016de:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 80016e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01e      	beq.n	8001724 <_ZL5printPK5cJSONiPK14internal_hooks+0xe4>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80016e6:	6939      	ldr	r1, [r7, #16]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	bf28      	it	cs
 80016f2:	4613      	movcs	r3, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80016f8:	f005 f982 	bl	8006a00 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001700:	4413      	add	r3, r2
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4610      	mov	r0, r2
 800170e:	4798      	blx	r3
        buffer->buffer = NULL;
 8001710:	2300      	movs	r3, #0
 8001712:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8001714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001716:	e01a      	b.n	800174e <_ZL5printPK5cJSONiPK14internal_hooks+0x10e>
        goto fail;
 8001718:	bf00      	nop
 800171a:	e004      	b.n	8001726 <_ZL5printPK5cJSONiPK14internal_hooks+0xe6>
        goto fail;
 800171c:	bf00      	nop
 800171e:	e002      	b.n	8001726 <_ZL5printPK5cJSONiPK14internal_hooks+0xe6>
            goto fail;
 8001720:	bf00      	nop
 8001722:	e000      	b.n	8001726 <_ZL5printPK5cJSONiPK14internal_hooks+0xe6>
            goto fail;
 8001724:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <_ZL5printPK5cJSONiPK14internal_hooks+0xfa>
    {
        hooks->deallocate(buffer->buffer);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4610      	mov	r0, r2
 8001734:	4798      	blx	r3
        buffer->buffer = NULL;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800173a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <_ZL5printPK5cJSONiPK14internal_hooks+0x10c>
    {
        hooks->deallocate(printed);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001746:	4798      	blx	r3
        printed = NULL;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3738      	adds	r7, #56	@ 0x38
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8001760:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <cJSON_PrintUnformatted+0x1c>)
 8001762:	2100      	movs	r1, #0
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff6b 	bl	8001640 <_ZL5printPK5cJSONiPK14internal_hooks>
 800176a:	4603      	mov	r3, r0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000000 	.word	0x20000000

08001778 <_ZL11print_valuePK5cJSONP11printbuffer>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <_ZL11print_valuePK5cJSONP11printbuffer+0x1a>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <_ZL11print_valuePK5cJSONP11printbuffer+0x1e>
    {
        return false;
 8001792:	2300      	movs	r3, #0
 8001794:	e0c9      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b80      	cmp	r3, #128	@ 0x80
 800179e:	f000 808e 	beq.w	80018be <_ZL11print_valuePK5cJSONP11printbuffer+0x146>
 80017a2:	2b80      	cmp	r3, #128	@ 0x80
 80017a4:	f300 80c0 	bgt.w	8001928 <_ZL11print_valuePK5cJSONP11printbuffer+0x1b0>
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	dc49      	bgt.n	8001840 <_ZL11print_valuePK5cJSONP11printbuffer+0xc8>
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f340 80bb 	ble.w	8001928 <_ZL11print_valuePK5cJSONP11printbuffer+0x1b0>
 80017b2:	3b01      	subs	r3, #1
 80017b4:	2b1f      	cmp	r3, #31
 80017b6:	f200 80b7 	bhi.w	8001928 <_ZL11print_valuePK5cJSONP11printbuffer+0x1b0>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <_ZL11print_valuePK5cJSONP11printbuffer+0x48>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800186b 	.word	0x0800186b
 80017c4:	0800188f 	.word	0x0800188f
 80017c8:	08001929 	.word	0x08001929
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001929 	.word	0x08001929
 80017d4:	08001929 	.word	0x08001929
 80017d8:	08001929 	.word	0x08001929
 80017dc:	080018b3 	.word	0x080018b3
 80017e0:	08001929 	.word	0x08001929
 80017e4:	08001929 	.word	0x08001929
 80017e8:	08001929 	.word	0x08001929
 80017ec:	08001929 	.word	0x08001929
 80017f0:	08001929 	.word	0x08001929
 80017f4:	08001929 	.word	0x08001929
 80017f8:	08001929 	.word	0x08001929
 80017fc:	08001905 	.word	0x08001905
 8001800:	08001929 	.word	0x08001929
 8001804:	08001929 	.word	0x08001929
 8001808:	08001929 	.word	0x08001929
 800180c:	08001929 	.word	0x08001929
 8001810:	08001929 	.word	0x08001929
 8001814:	08001929 	.word	0x08001929
 8001818:	08001929 	.word	0x08001929
 800181c:	08001929 	.word	0x08001929
 8001820:	08001929 	.word	0x08001929
 8001824:	08001929 	.word	0x08001929
 8001828:	08001929 	.word	0x08001929
 800182c:	08001929 	.word	0x08001929
 8001830:	08001929 	.word	0x08001929
 8001834:	08001929 	.word	0x08001929
 8001838:	08001929 	.word	0x08001929
 800183c:	08001911 	.word	0x08001911
 8001840:	2b40      	cmp	r3, #64	@ 0x40
 8001842:	d06b      	beq.n	800191c <_ZL11print_valuePK5cJSONP11printbuffer+0x1a4>
 8001844:	e070      	b.n	8001928 <_ZL11print_valuePK5cJSONP11printbuffer+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001846:	2105      	movs	r1, #5
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f7ff fbc3 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 800184e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <_ZL11print_valuePK5cJSONP11printbuffer+0xe2>
            {
                return false;
 8001856:	2300      	movs	r3, #0
 8001858:	e067      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
            }
            strcpy((char*)output, "null");
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a35      	ldr	r2, [pc, #212]	@ (8001934 <_ZL11print_valuePK5cJSONP11printbuffer+0x1bc>)
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	6018      	str	r0, [r3, #0]
 8001862:	7912      	ldrb	r2, [r2, #4]
 8001864:	711a      	strb	r2, [r3, #4]
            return true;
 8001866:	2301      	movs	r3, #1
 8001868:	e05f      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800186a:	2106      	movs	r1, #6
 800186c:	6838      	ldr	r0, [r7, #0]
 800186e:	f7ff fbb1 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001872:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <_ZL11print_valuePK5cJSONP11printbuffer+0x106>
            {
                return false;
 800187a:	2300      	movs	r3, #0
 800187c:	e055      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
            }
            strcpy((char*)output, "false");
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4a2d      	ldr	r2, [pc, #180]	@ (8001938 <_ZL11print_valuePK5cJSONP11printbuffer+0x1c0>)
 8001882:	6810      	ldr	r0, [r2, #0]
 8001884:	6018      	str	r0, [r3, #0]
 8001886:	8892      	ldrh	r2, [r2, #4]
 8001888:	809a      	strh	r2, [r3, #4]
            return true;
 800188a:	2301      	movs	r3, #1
 800188c:	e04d      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800188e:	2105      	movs	r1, #5
 8001890:	6838      	ldr	r0, [r7, #0]
 8001892:	f7ff fb9f 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001896:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <_ZL11print_valuePK5cJSONP11printbuffer+0x12a>
            {
                return false;
 800189e:	2300      	movs	r3, #0
 80018a0:	e043      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
            }
            strcpy((char*)output, "true");
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a25      	ldr	r2, [pc, #148]	@ (800193c <_ZL11print_valuePK5cJSONP11printbuffer+0x1c4>)
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	7912      	ldrb	r2, [r2, #4]
 80018ac:	711a      	strb	r2, [r3, #4]
            return true;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e03b      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 80018b2:	6839      	ldr	r1, [r7, #0]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fc91 	bl	80011dc <_ZL12print_numberPK5cJSONP11printbuffer>
 80018ba:	4603      	mov	r3, r0
 80018bc:	e035      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <_ZL11print_valuePK5cJSONP11printbuffer+0x156>
            {
                return false;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e02d      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc7c 	bl	80001d0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	3301      	adds	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7ff fb77 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 80018e6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <_ZL11print_valuePK5cJSONP11printbuffer+0x17a>
            {
                return false;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e01b      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4619      	mov	r1, r3
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f005 f880 	bl	8006a00 <memcpy>
            return true;
 8001900:	2301      	movs	r3, #1
 8001902:	e012      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe8a 	bl	8001620 <_ZL12print_stringPK5cJSONP11printbuffer>
 800190c:	4603      	mov	r3, r0
 800190e:	e00c      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001910:	6839      	ldr	r1, [r7, #0]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f814 	bl	8001940 <_ZL11print_arrayPK5cJSONP11printbuffer>
 8001918:	4603      	mov	r3, r0
 800191a:	e006      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f899 	bl	8001a56 <_ZL12print_objectPK5cJSONP11printbuffer>
 8001924:	4603      	mov	r3, r0
 8001926:	e000      	b.n	800192a <_ZL11print_valuePK5cJSONP11printbuffer+0x1b2>

        default:
            return false;
 8001928:	2300      	movs	r3, #0
    }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	080079dc 	.word	0x080079dc
 8001938:	08007a0c 	.word	0x08007a0c
 800193c:	08007a14 	.word	0x08007a14

08001940 <_ZL11print_arrayPK5cJSONP11printbuffer>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <_ZL11print_arrayPK5cJSONP11printbuffer+0x22>
    {
        return false;
 800195e:	2300      	movs	r3, #0
 8001960:	e075      	b.n	8001a4e <_ZL11print_arrayPK5cJSONP11printbuffer+0x10e>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8001962:	2101      	movs	r1, #1
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f7ff fb35 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 800196a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <_ZL11print_arrayPK5cJSONP11printbuffer+0x36>
    {
        return false;
 8001972:	2300      	movs	r3, #0
 8001974:	e06b      	b.n	8001a4e <_ZL11print_arrayPK5cJSONP11printbuffer+0x10e>
    }

    *output_pointer = '[';
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	225b      	movs	r2, #91	@ 0x5b
 800197a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8001990:	e042      	b.n	8001a18 <_ZL11print_arrayPK5cJSONP11printbuffer+0xd8>
    {
        if (!print_value(current_element, output_buffer))
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	6938      	ldr	r0, [r7, #16]
 8001996:	f7ff feef 	bl	8001778 <_ZL11print_valuePK5cJSONP11printbuffer>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_ZL11print_arrayPK5cJSONP11printbuffer+0x6e>
        {
            return false;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e04f      	b.n	8001a4e <_ZL11print_arrayPK5cJSONP11printbuffer+0x10e>
        }
        update_offset(output_buffer);
 80019ae:	6838      	ldr	r0, [r7, #0]
 80019b0:	f7ff fbaa 	bl	8001108 <_ZL13update_offsetP11printbuffer>
        if (current_element->next)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02a      	beq.n	8001a12 <_ZL11print_arrayPK5cJSONP11printbuffer+0xd2>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <_ZL11print_arrayPK5cJSONP11printbuffer+0x88>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e000      	b.n	80019ca <_ZL11print_arrayPK5cJSONP11printbuffer+0x8a>
 80019c8:	2301      	movs	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4619      	mov	r1, r3
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f7ff fafe 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 80019d8:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <_ZL11print_arrayPK5cJSONP11printbuffer+0xa4>
            {
                return false;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e034      	b.n	8001a4e <_ZL11print_arrayPK5cJSONP11printbuffer+0x10e>
            }
            *output_pointer++ = ',';
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	617a      	str	r2, [r7, #20]
 80019ea:	222c      	movs	r2, #44	@ 0x2c
 80019ec:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <_ZL11print_arrayPK5cJSONP11printbuffer+0xc0>
            {
                *output_pointer++ = ' ';
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	617a      	str	r2, [r7, #20]
 80019fc:	2220      	movs	r2, #32
 80019fe:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1b9      	bne.n	8001992 <_ZL11print_arrayPK5cJSONP11printbuffer+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001a1e:	2102      	movs	r1, #2
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7ff fad7 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001a26:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <_ZL11print_arrayPK5cJSONP11printbuffer+0xf2>
    {
        return false;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e00d      	b.n	8001a4e <_ZL11print_arrayPK5cJSONP11printbuffer+0x10e>
    }
    *output_pointer++ = ']';
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	617a      	str	r2, [r7, #20]
 8001a38:	225d      	movs	r2, #93	@ 0x5d
 8001a3a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	60da      	str	r2, [r3, #12]

    return true;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZL12print_objectPK5cJSONP11printbuffer>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b088      	sub	sp, #32
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <_ZL12print_objectPK5cJSONP11printbuffer+0x22>
    {
        return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e112      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL12print_objectPK5cJSONP11printbuffer+0x2e>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e000      	b.n	8001a86 <_ZL12print_objectPK5cJSONP11printbuffer+0x30>
 8001a84:	2301      	movs	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f7ff faa0 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001a94:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <_ZL12print_objectPK5cJSONP11printbuffer+0x4a>
    {
        return false;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e0fe      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
    }

    *output_pointer++ = '{';
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	61fa      	str	r2, [r7, #28]
 8001aa6:	227b      	movs	r2, #123	@ 0x7b
 8001aa8:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <_ZL12print_objectPK5cJSONP11printbuffer+0x70>
    {
        *output_pointer++ = '\n';
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	61fa      	str	r2, [r7, #28]
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	441a      	add	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	609a      	str	r2, [r3, #8]

    while (current_item)
 8001ad2:	e0aa      	b.n	8001c2a <_ZL12print_objectPK5cJSONP11printbuffer+0x1d4>
    {
        if (output_buffer->format)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d022      	beq.n	8001b22 <_ZL12print_objectPK5cJSONP11printbuffer+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	f7ff fa76 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001ae8:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <_ZL12print_objectPK5cJSONP11printbuffer+0x9e>
            {
                return false;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e0d4      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e007      	b.n	8001b0a <_ZL12print_objectPK5cJSONP11printbuffer+0xb4>
            {
                *output_pointer++ = '\t';
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	61fa      	str	r2, [r7, #28]
 8001b00:	2209      	movs	r2, #9
 8001b02:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3f2      	bcc.n	8001afa <_ZL12print_objectPK5cJSONP11printbuffer+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fc49 	bl	80013c0 <_ZL16print_string_ptrPKhP11printbuffer>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <_ZL12print_objectPK5cJSONP11printbuffer+0xec>
        {
            return false;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e0ad      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
        }
        update_offset(output_buffer);
 8001b42:	6838      	ldr	r0, [r7, #0]
 8001b44:	f7ff fae0 	bl	8001108 <_ZL13update_offsetP11printbuffer>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZL12print_objectPK5cJSONP11printbuffer+0xfe>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e000      	b.n	8001b56 <_ZL12print_objectPK5cJSONP11printbuffer+0x100>
 8001b54:	2301      	movs	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f7ff fa3a 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001b60:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <_ZL12print_objectPK5cJSONP11printbuffer+0x116>
        {
            return false;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e098      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
        }
        *output_pointer++ = ':';
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	61fa      	str	r2, [r7, #28]
 8001b72:	223a      	movs	r2, #58	@ 0x3a
 8001b74:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <_ZL12print_objectPK5cJSONP11printbuffer+0x132>
        {
            *output_pointer++ = '\t';
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	61fa      	str	r2, [r7, #28]
 8001b84:	2209      	movs	r2, #9
 8001b86:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	441a      	add	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001b94:	6839      	ldr	r1, [r7, #0]
 8001b96:	69b8      	ldr	r0, [r7, #24]
 8001b98:	f7ff fdee 	bl	8001778 <_ZL11print_valuePK5cJSONP11printbuffer>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_ZL12print_objectPK5cJSONP11printbuffer+0x15a>
        {
            return false;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e076      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
        }
        update_offset(output_buffer);
 8001bb0:	6838      	ldr	r0, [r7, #0]
 8001bb2:	f7ff faa9 	bl	8001108 <_ZL13update_offsetP11printbuffer>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <_ZL12print_objectPK5cJSONP11printbuffer+0x16c>
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	e000      	b.n	8001bc4 <_ZL12print_objectPK5cJSONP11printbuffer+0x16e>
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <_ZL12print_objectPK5cJSONP11printbuffer+0x17a>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <_ZL12print_objectPK5cJSONP11printbuffer+0x17c>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f7ff f9f9 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001be2:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <_ZL12print_objectPK5cJSONP11printbuffer+0x198>
        {
            return false;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e057      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
        }
        if (current_item->next)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <_ZL12print_objectPK5cJSONP11printbuffer+0x1aa>
        {
            *output_pointer++ = ',';
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	222c      	movs	r2, #44	@ 0x2c
 8001bfe:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <_ZL12print_objectPK5cJSONP11printbuffer+0x1bc>
        {
            *output_pointer++ = '\n';
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	220a      	movs	r2, #10
 8001c10:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	441a      	add	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f47f af51 	bne.w	8001ad4 <_ZL12print_objectPK5cJSONP11printbuffer+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <_ZL12print_objectPK5cJSONP11printbuffer+0x1ec>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	e000      	b.n	8001c44 <_ZL12print_objectPK5cJSONP11printbuffer+0x1ee>
 8001c42:	2302      	movs	r3, #2
 8001c44:	4619      	mov	r1, r3
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f7ff f9c4 	bl	8000fd4 <_ZL6ensureP11printbufferj>
 8001c4c:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <_ZL12print_objectPK5cJSONP11printbuffer+0x202>
    {
        return false;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e022      	b.n	8001c9e <_ZL12print_objectPK5cJSONP11printbuffer+0x248>
    }
    if (output_buffer->format)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <_ZL12print_objectPK5cJSONP11printbuffer+0x22c>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e007      	b.n	8001c76 <_ZL12print_objectPK5cJSONP11printbuffer+0x220>
        {
            *output_pointer++ = '\t';
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	2209      	movs	r2, #9
 8001c6e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	3301      	adds	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3f1      	bcc.n	8001c66 <_ZL12print_objectPK5cJSONP11printbuffer+0x210>
        }
    }
    *output_pointer++ = '}';
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	61fa      	str	r2, [r7, #28]
 8001c88:	227d      	movs	r2, #125	@ 0x7d
 8001c8a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	60da      	str	r2, [r3, #12]

    return true;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3720      	adds	r7, #32
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_ZL13suffix_objectP5cJSONS0_>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	605a      	str	r2, [r3, #4]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZL17add_item_to_arrayP5cJSONS0_>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <_ZL17add_item_to_arrayP5cJSONS0_+0x22>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <_ZL17add_item_to_arrayP5cJSONS0_+0x22>
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d101      	bne.n	8001cee <_ZL17add_item_to_arrayP5cJSONS0_+0x26>
    {
        return false;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e01e      	b.n	8001d2c <_ZL17add_item_to_arrayP5cJSONS0_+0x64>
    }

    child = array->child;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <_ZL17add_item_to_arrayP5cJSONS0_+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e00d      	b.n	8001d2a <_ZL17add_item_to_arrayP5cJSONS0_+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <_ZL17add_item_to_arrayP5cJSONS0_+0x62>
        {
            suffix_object(child->prev, item);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ffc2 	bl	8001ca6 <_ZL13suffix_objectP5cJSONS0_>
            array->child->prev = item;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZL15cast_away_constPKv>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x30>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x30>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x30>
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d101      	bne.n	8001d7e <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x34>
    {
        return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e037      	b.n	8001dee <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0xa4>
    }

    if (constant_key)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff ffd5 	bl	8001d34 <_ZL15cast_away_constPKv>
 8001d8a:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e00e      	b.n	8001db6 <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f7ff f884 	bl	8000ea8 <_ZL12cJSON_strdupPKhPK14internal_hooks>
 8001da0:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x62>
        {
            return false;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e020      	b.n	8001dee <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0xa4>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001db4:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x8c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi+0x8c>
    {
        hooks->deallocate(item->string);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6a12      	ldr	r2, [r2, #32]
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4798      	blx	r3
    }

    item->string = new_key;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff ff6f 	bl	8001cc8 <_ZL17add_item_to_arrayP5cJSONS0_>
 8001dea:	4603      	mov	r3, r0
 8001dec:	bf00      	nop
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001e06:	ed97 0b00 	vldr	d0, [r7]
 8001e0a:	f000 f81d 	bl	8001e48 <cJSON_CreateNumber>
 8001e0e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001e10:	2300      	movs	r3, #0
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <cJSON_AddNumberToObject+0x4c>)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff ff95 	bl	8001d4a <_ZL18add_item_to_objectP5cJSONPKcS0_PK14internal_hooksi>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <cJSON_AddNumberToObject+0x3c>
    {
        return number_item;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	e003      	b.n	8001e3c <cJSON_AddNumberToObject+0x44>
    }

    cJSON_Delete(number_item);
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff f875 	bl	8000f24 <cJSON_Delete>
    return NULL;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000000 	.word	0x20000000

08001e48 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e52:	481f      	ldr	r0, [pc, #124]	@ (8001ed0 <cJSON_CreateNumber+0x88>)
 8001e54:	f7ff f850 	bl	8000ef8 <_ZL14cJSON_New_ItemPK14internal_hooks>
 8001e58:	60f8      	str	r0, [r7, #12]
    if(item)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d02c      	beq.n	8001eba <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2208      	movs	r2, #8
 8001e64:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e6c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001e70:	a315      	add	r3, pc, #84	@ (adr r3, 8001ec8 <cJSON_CreateNumber+0x80>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e7a:	f7fe fe43 	bl	8000b04 <__aeabi_dcmpge>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	e015      	b.n	8001eba <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <cJSON_CreateNumber+0x8c>)
 8001e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e98:	f7fe fe2a 	bl	8000af0 <__aeabi_dcmple>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	e006      	b.n	8001eba <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8001eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eb0:	f7fe fe3c 	bl	8000b2c <__aeabi_d2iz>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	ffc00000 	.word	0xffc00000
 8001ecc:	41dfffff 	.word	0x41dfffff
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	c1e00000 	.word	0xc1e00000

08001ed8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001ede:	4807      	ldr	r0, [pc, #28]	@ (8001efc <cJSON_CreateObject+0x24>)
 8001ee0:	f7ff f80a 	bl	8000ef8 <_ZL14cJSON_New_ItemPK14internal_hooks>
 8001ee4:	6078      	str	r0, [r7, #4]
    if (item)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	@ 0x40
 8001ef0:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000000 	.word	0x20000000

08001f00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <vApplicationGetIdleTaskMemory+0x30>)
 8001f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000088 	.word	0x20000088
 8001f30:	200000dc 	.word	0x200000dc

08001f34 <_Z16send_json_queuedP5cJSON>:
    // Create transmission task
    xTaskCreate(uart_transmission_task, "UART_TX", 256, NULL, 2, &uart_task_handle);
}

/* Send JSON via queue */
void send_json_queued(cJSON *json) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0c4      	sub	sp, #272	@ 0x110
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f42:	6018      	str	r0, [r3, #0]
    char *json_str = cJSON_PrintUnformatted(json);
 8001f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f48:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	f7ff fc03 	bl	8001758 <cJSON_PrintUnformatted>
 8001f52:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    if (json_str == NULL) {
 8001f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d107      	bne.n	8001f6e <_Z16send_json_queuedP5cJSON+0x3a>
        cJSON_Delete(json);
 8001f5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f7fe ffdc 	bl	8000f24 <cJSON_Delete>
 8001f6c:	e028      	b.n	8001fc0 <_Z16send_json_queuedP5cJSON+0x8c>
        return;
    }

    uart_message_t message;
    snprintf(message.data, sizeof(message.data), "%s\n", json_str);
 8001f6e:	f107 0008 	add.w	r0, r7, #8
 8001f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f76:	4a14      	ldr	r2, [pc, #80]	@ (8001fc8 <_Z16send_json_queuedP5cJSON+0x94>)
 8001f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7c:	f004 fc76 	bl	800686c <sniprintf>
    message.length = strlen(message.data);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f923 	bl	80001d0 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f96:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

    // Send to queue (non-blocking)
    xQueueSend(uart_queue, &message, 0);
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <_Z16send_json_queuedP5cJSON+0x98>)
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	f107 0108 	add.w	r1, r7, #8
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f002 feb5 	bl	8004d14 <xQueueGenericSend>

    free(json_str);
 8001faa:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001fae:	f004 fb71 	bl	8006694 <free>
    cJSON_Delete(json);
 8001fb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f7fe ffb2 	bl	8000f24 <cJSON_Delete>
}
 8001fc0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	08007a24 	.word	0x08007a24
 8001fcc:	200003b0 	.word	0x200003b0

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd6:	f000 fac0 	bl	800255a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fda:	f000 f841 	bl	8002060 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fde:	f000 f903 	bl	80021e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001fe2:	f000 f8e3 	bl	80021ac <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001fe6:	f000 f8ad 	bl	8002144 <_ZL19MX_USART2_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <main+0x80>)
 8001fec:	463c      	mov	r4, r7
 8001fee:	461d      	mov	r5, r3
 8001ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fd73 	bl	8004aec <osThreadCreate>
 8002006:	4603      	mov	r3, r0
 8002008:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <main+0x84>)
 800200a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800200c:	f002 fd67 	bl	8004ade <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cJSON *json = cJSON_CreateObject();
 8002010:	f7ff ff62 	bl	8001ed8 <cJSON_CreateObject>
 8002014:	61f8      	str	r0, [r7, #28]
	  cJSON_AddNumberToObject(json, "cells", 120);
 8002016:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8002040 <main+0x70>
 800201a:	490f      	ldr	r1, [pc, #60]	@ (8002058 <main+0x88>)
 800201c:	69f8      	ldr	r0, [r7, #28]
 800201e:	f7ff feeb 	bl	8001df8 <cJSON_AddNumberToObject>
	  cJSON_AddNumberToObject(json, "segments", 6);
 8002022:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8002048 <main+0x78>
 8002026:	490d      	ldr	r1, [pc, #52]	@ (800205c <main+0x8c>)
 8002028:	69f8      	ldr	r0, [r7, #28]
 800202a:	f7ff fee5 	bl	8001df8 <cJSON_AddNumberToObject>
	  send_json_queued(json);
 800202e:	69f8      	ldr	r0, [r7, #28]
 8002030:	f7ff ff80 	bl	8001f34 <_Z16send_json_queuedP5cJSON>

	  vTaskDelay(pdMS_TO_TICKS(100));
 8002034:	2064      	movs	r0, #100	@ 0x64
 8002036:	f003 f9db 	bl	80053f0 <vTaskDelay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800203a:	bf00      	nop
 800203c:	e7e8      	b.n	8002010 <main+0x40>
 800203e:	bf00      	nop
 8002040:	00000000 	.word	0x00000000
 8002044:	405e0000 	.word	0x405e0000
 8002048:	00000000 	.word	0x00000000
 800204c:	40180000 	.word	0x40180000
 8002050:	08007a48 	.word	0x08007a48
 8002054:	200003ac 	.word	0x200003ac
 8002058:	08007a28 	.word	0x08007a28
 800205c:	08007a30 	.word	0x08007a30

08002060 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b096      	sub	sp, #88	@ 0x58
 8002064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	2244      	movs	r2, #68	@ 0x44
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f004 fc82 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	463b      	mov	r3, r7
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002082:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002086:	f000 fef7 	bl	8002e78 <HAL_PWREx_ControlVoltageScaling>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800209a:	f000 f8f7 	bl	800228c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800209e:	f000 fecd 	bl	8002e3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020a2:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <_Z18SystemClock_Configv+0xe0>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <_Z18SystemClock_Configv+0xe0>)
 80020aa:	f023 0318 	bic.w	r3, r3, #24
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020b2:	2314      	movs	r3, #20
 80020b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020c2:	2360      	movs	r3, #96	@ 0x60
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c6:	2302      	movs	r3, #2
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80020ca:	2301      	movs	r3, #1
 80020cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80020d2:	2310      	movs	r3, #16
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020d6:	2307      	movs	r3, #7
 80020d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020da:	2302      	movs	r3, #2
 80020dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020de:	2302      	movs	r3, #2
 80020e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 ff1c 	bl	8002f24 <HAL_RCC_OscConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80020fc:	f000 f8c6 	bl	800228c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002100:	230f      	movs	r3, #15
 8002102:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002104:	2303      	movs	r3, #3
 8002106:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fb17 	bl	800374c <HAL_RCC_ClockConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800212e:	f000 f8ad 	bl	800228c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002132:	f001 ff25 	bl	8003f80 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002136:	bf00      	nop
 8002138:	3758      	adds	r7, #88	@ 0x58
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800214a:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800214c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800217c:	2200      	movs	r2, #0
 800217e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002186:	4807      	ldr	r0, [pc, #28]	@ (80021a4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002188:	f001 fffc 	bl	8004184 <HAL_UART_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 800219c:	f000 f876 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002dc 	.word	0x200002dc
 80021a8:	40004400 	.word	0x40004400

080021ac <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <_ZL11MX_DMA_Initv+0x38>)
 80021b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b6:	4a0b      	ldr	r2, [pc, #44]	@ (80021e4 <_ZL11MX_DMA_Initv+0x38>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <_ZL11MX_DMA_Initv+0x38>)
 80021c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	2011      	movs	r0, #17
 80021d0:	f000 fb13 	bl	80027fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80021d4:	2011      	movs	r0, #17
 80021d6:	f000 fb2c 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <_ZL12MX_GPIO_Initv+0x8c>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2108      	movs	r1, #8
 800224a:	480b      	ldr	r0, [pc, #44]	@ (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 800224c:	f000 fdde 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002250:	2308      	movs	r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	4804      	ldr	r0, [pc, #16]	@ (8002278 <_ZL12MX_GPIO_Initv+0x90>)
 8002268:	f000 fc66 	bl	8002b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002284:	2001      	movs	r0, #1
 8002286:	f002 fc7d 	bl	8004b84 <osDelay>
 800228a:	e7fb      	b.n	8002284 <_Z16StartDefaultTaskPKv+0x8>

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <Error_Handler+0x8>

08002298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_MspInit+0x4c>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	210f      	movs	r1, #15
 80022d2:	f06f 0001 	mvn.w	r0, #1
 80022d6:	f000 fa90 	bl	80027fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b09e      	sub	sp, #120	@ 0x78
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	2254      	movs	r2, #84	@ 0x54
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f004 fb35 	bl	8006978 <memset>
  if(huart->Instance==USART2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a3c      	ldr	r2, [pc, #240]	@ (8002404 <HAL_UART_MspInit+0x11c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d171      	bne.n	80023fc <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800231c:	2300      	movs	r3, #0
 800231e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fc35 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002330:	f7ff ffac 	bl	800228c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002334:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <HAL_UART_MspInit+0x120>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	4a33      	ldr	r2, [pc, #204]	@ (8002408 <HAL_UART_MspInit+0x120>)
 800233a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800233e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002340:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <HAL_UART_MspInit+0x120>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <HAL_UART_MspInit+0x120>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_UART_MspInit+0x120>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_UART_MspInit+0x120>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002364:	2304      	movs	r3, #4
 8002366:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002374:	2307      	movs	r3, #7
 8002376:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002382:	f000 fbd9 	bl	8002b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800238a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002398:	2303      	movs	r3, #3
 800239a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023a0:	4619      	mov	r1, r3
 80023a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a6:	f000 fbc7 	bl	8002b38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023aa:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023ac:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_UART_MspInit+0x128>)
 80023ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80023b0:	4b16      	ldr	r3, [pc, #88]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023b2:	2202      	movs	r2, #2
 80023b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023b8:	2210      	movs	r2, #16
 80023ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ce:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023da:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023e0:	480a      	ldr	r0, [pc, #40]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023e2:	f000 fa41 	bl	8002868 <HAL_DMA_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80023ec:	f7ff ff4e 	bl	800228c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a06      	ldr	r2, [pc, #24]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023f4:	671a      	str	r2, [r3, #112]	@ 0x70
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <HAL_UART_MspInit+0x124>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80023fc:	bf00      	nop
 80023fe:	3778      	adds	r7, #120	@ 0x78
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40004400 	.word	0x40004400
 8002408:	40021000 	.word	0x40021000
 800240c:	20000364 	.word	0x20000364
 8002410:	40020080 	.word	0x40020080

08002414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <NMI_Handler+0x4>

0800241c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <UsageFault_Handler+0x4>

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244e:	f000 f8d9 	bl	8002604 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002452:	f003 fc0d 	bl	8005c70 <xTaskGetSchedulerState>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d001      	beq.n	8002460 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800245c:	f003 fed4 	bl	8006208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <DMA1_Channel7_IRQHandler+0x10>)
 800246a:	f000 fab5 	bl	80029d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000364 	.word	0x20000364

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f004 fa7e 	bl	80069a8 <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000c000 	.word	0x2000c000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	200003b4 	.word	0x200003b4
 80024e0:	20001210 	.word	0x20001210

080024e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopForever+0x6>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopForever+0xe>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopForever+0x16>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 fa3d 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800253a:	f7ff fd49 	bl	8001fd0 <main>

0800253e <LoopForever>:

LoopForever:
    b LoopForever
 800253e:	e7fe      	b.n	800253e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002540:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800254c:	08007c20 	.word	0x08007c20
  ldr r2, =_sbss
 8002550:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002554:	20001210 	.word	0x20001210

08002558 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC1_IRQHandler>

0800255a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002564:	2003      	movs	r0, #3
 8002566:	f000 f93d 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800256a:	200f      	movs	r0, #15
 800256c:	f000 f80e 	bl	800258c <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	e001      	b.n	8002580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800257c:	f7ff fe8c 	bl	8002298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002580:	79fb      	ldrb	r3, [r7, #7]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002598:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_InitTick+0x6c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_InitTick+0x70>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_InitTick+0x6c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f949 	bl	800284e <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d809      	bhi.n	80025dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 f913 	bl	80027fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002600 <HAL_InitTick+0x74>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e007      	b.n	80025ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	e004      	b.n	80025ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e001      	b.n	80025ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000014 	.word	0x20000014
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	20000010 	.word	0x20000010

08002604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x20>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_IncTick+0x24>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4413      	add	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_IncTick+0x24>)
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000014 	.word	0x20000014
 8002628:	200003b8 	.word	0x200003b8

0800262c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTick;
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_GetTick+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	200003b8 	.word	0x200003b8

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	@ (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	@ (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e098      	b.n	80029ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b4d      	ldr	r3, [pc, #308]	@ (80029b8 <HAL_DMA_Init+0x150>)
 8002882:	429a      	cmp	r2, r3
 8002884:	d80f      	bhi.n	80028a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	4b4b      	ldr	r3, [pc, #300]	@ (80029bc <HAL_DMA_Init+0x154>)
 800288e:	4413      	add	r3, r2
 8002890:	4a4b      	ldr	r2, [pc, #300]	@ (80029c0 <HAL_DMA_Init+0x158>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	009a      	lsls	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <HAL_DMA_Init+0x15c>)
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a4:	e00e      	b.n	80028c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b46      	ldr	r3, [pc, #280]	@ (80029c8 <HAL_DMA_Init+0x160>)
 80028ae:	4413      	add	r3, r2
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_DMA_Init+0x158>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a42      	ldr	r2, [pc, #264]	@ (80029cc <HAL_DMA_Init+0x164>)
 80028c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80028da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291e:	d039      	beq.n	8002994 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_DMA_Init+0x15c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d11a      	bne.n	8002960 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <HAL_DMA_Init+0x168>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f003 031c 	and.w	r3, r3, #28
 8002936:	210f      	movs	r1, #15
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4924      	ldr	r1, [pc, #144]	@ (80029d0 <HAL_DMA_Init+0x168>)
 8002940:	4013      	ands	r3, r2
 8002942:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_DMA_Init+0x168>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f003 031c 	and.w	r3, r3, #28
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	491d      	ldr	r1, [pc, #116]	@ (80029d0 <HAL_DMA_Init+0x168>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
 800295e:	e019      	b.n	8002994 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002960:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <HAL_DMA_Init+0x16c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	f003 031c 	and.w	r3, r3, #28
 800296c:	210f      	movs	r1, #15
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	4917      	ldr	r1, [pc, #92]	@ (80029d4 <HAL_DMA_Init+0x16c>)
 8002976:	4013      	ands	r3, r2
 8002978:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_DMA_Init+0x16c>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f003 031c 	and.w	r3, r3, #28
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	4911      	ldr	r1, [pc, #68]	@ (80029d4 <HAL_DMA_Init+0x16c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40020407 	.word	0x40020407
 80029bc:	bffdfff8 	.word	0xbffdfff8
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40020000 	.word	0x40020000
 80029c8:	bffdfbf8 	.word	0xbffdfbf8
 80029cc:	40020400 	.word	0x40020400
 80029d0:	400200a8 	.word	0x400200a8
 80029d4:	400204a8 	.word	0x400204a8

080029d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f4:	f003 031c 	and.w	r3, r3, #28
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d026      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x7a>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d021      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0204 	bic.w	r2, r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	f003 021c 	and.w	r2, r3, #28
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	2104      	movs	r1, #4
 8002a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d071      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a50:	e06c      	b.n	8002b2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f003 031c 	and.w	r3, r3, #28
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02e      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xec>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d029      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10b      	bne.n	8002a96 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020a 	bic.w	r2, r2, #10
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f003 021c 	and.w	r2, r3, #28
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d038      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ac2:	e033      	b.n	8002b2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f003 031c 	and.w	r3, r3, #28
 8002acc:	2208      	movs	r2, #8
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02a      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x156>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d025      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 020e 	bic.w	r2, r2, #14
 8002af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f003 021c 	and.w	r2, r3, #28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
}
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	e148      	b.n	8002dda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 813a 	beq.w	8002dd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d005      	beq.n	8002b78 <HAL_GPIO_Init+0x40>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d130      	bne.n	8002bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bae:	2201      	movs	r2, #1
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 0201 	and.w	r2, r3, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d017      	beq.n	8002c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d123      	bne.n	8002c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	08da      	lsrs	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8094 	beq.w	8002dd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cac:	4b52      	ldr	r3, [pc, #328]	@ (8002df8 <HAL_GPIO_Init+0x2c0>)
 8002cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb0:	4a51      	ldr	r2, [pc, #324]	@ (8002df8 <HAL_GPIO_Init+0x2c0>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	@ (8002df8 <HAL_GPIO_Init+0x2c0>)
 8002cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002dfc <HAL_GPIO_Init+0x2c4>)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	3302      	adds	r3, #2
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cee:	d00d      	beq.n	8002d0c <HAL_GPIO_Init+0x1d4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a43      	ldr	r2, [pc, #268]	@ (8002e00 <HAL_GPIO_Init+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0x1d0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a42      	ldr	r2, [pc, #264]	@ (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_GPIO_Init+0x1cc>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e004      	b.n	8002d0e <HAL_GPIO_Init+0x1d6>
 8002d04:	2307      	movs	r3, #7
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x1d6>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_GPIO_Init+0x1d6>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	f002 0203 	and.w	r2, r2, #3
 8002d14:	0092      	lsls	r2, r2, #2
 8002d16:	4093      	lsls	r3, r2
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d1e:	4937      	ldr	r1, [pc, #220]	@ (8002dfc <HAL_GPIO_Init+0x2c4>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d50:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d56:	4b2c      	ldr	r3, [pc, #176]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da4:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002daa:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dce:	4a0e      	ldr	r2, [pc, #56]	@ (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f aeaf 	bne.w	8002b48 <HAL_GPIO_Init+0x10>
  }
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40007000 	.word	0x40007000

08002e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e86:	d130      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e94:	d038      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2232      	movs	r2, #50	@ 0x32
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebc:	e002      	b.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f2      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee4:	d110      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d007      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	431bde83 	.word	0x431bde83

08002f24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f000 bc02 	b.w	800373c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f38:	4b96      	ldr	r3, [pc, #600]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f42:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80e4 	beq.w	8003122 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4c>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	f040 808b 	bne.w	800307e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	f040 8087 	bne.w	800307e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f70:	4b88      	ldr	r3, [pc, #544]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x64>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e3d9      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	4b81      	ldr	r3, [pc, #516]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x7e>
 8002f98:	4b7e      	ldr	r3, [pc, #504]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa0:	e005      	b.n	8002fae <HAL_RCC_OscConfig+0x8a>
 8002fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d223      	bcs.n	8002ffa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 fd8c 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e3ba      	b.n	800373c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc6:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a72      	ldr	r2, [pc, #456]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b70      	ldr	r3, [pc, #448]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	496d      	ldr	r1, [pc, #436]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4968      	ldr	r1, [pc, #416]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	e025      	b.n	8003046 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ffa:	4b66      	ldr	r3, [pc, #408]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b63      	ldr	r3, [pc, #396]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4960      	ldr	r1, [pc, #384]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003018:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	495b      	ldr	r1, [pc, #364]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fd4c 	bl	8003ad4 <RCC_SetFlashLatencyFromMSIRange>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e37a      	b.n	800373c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003046:	f000 fc81 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b51      	ldr	r3, [pc, #324]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	4950      	ldr	r1, [pc, #320]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	4a4e      	ldr	r2, [pc, #312]	@ (800319c <HAL_RCC_OscConfig+0x278>)
 8003064:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003066:	4b4e      	ldr	r3, [pc, #312]	@ (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fa8e 	bl	800258c <HAL_InitTick>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d052      	beq.n	8003120 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	e35e      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d032      	beq.n	80030ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003086:	4b43      	ldr	r3, [pc, #268]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a42      	ldr	r2, [pc, #264]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003092:	f7ff facb 	bl	800262c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800309a:	f7ff fac7 	bl	800262c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e347      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ac:	4b39      	ldr	r3, [pc, #228]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b8:	4b36      	ldr	r3, [pc, #216]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a35      	ldr	r2, [pc, #212]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b33      	ldr	r3, [pc, #204]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4930      	ldr	r1, [pc, #192]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	492b      	ldr	r1, [pc, #172]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e01a      	b.n	8003122 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ec:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a28      	ldr	r2, [pc, #160]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f8:	f7ff fa98 	bl	800262c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003100:	f7ff fa94 	bl	800262c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e314      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003112:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1dc>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d073      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x21c>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d10e      	bne.n	8003158 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d10b      	bne.n	8003158 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d063      	beq.n	8003214 <HAL_RCC_OscConfig+0x2f0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15f      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2f1      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003160:	d106      	bne.n	8003170 <HAL_RCC_OscConfig+0x24c>
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e025      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003178:	d114      	bne.n	80031a4 <HAL_RCC_OscConfig+0x280>
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a02      	ldr	r2, [pc, #8]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e013      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 8003194:	40021000 	.word	0x40021000
 8003198:	08007a78 	.word	0x08007a78
 800319c:	2000000c 	.word	0x2000000c
 80031a0:	20000010 	.word	0x20000010
 80031a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7ff fa32 	bl	800262c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7ff fa2e 	bl	800262c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	@ 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e2ae      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2a8>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7ff fa1e 	bl	800262c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7ff fa1a 	bl	800262c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e29a      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003206:	4b88      	ldr	r3, [pc, #544]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2d0>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x310>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d119      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d116      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	4b7c      	ldr	r3, [pc, #496]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x328>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e277      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	4973      	ldr	r1, [pc, #460]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b6f      	ldr	r3, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7ff f9d9 	bl	800262c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7ff f9d5 	bl	800262c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e255      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b65      	ldr	r3, [pc, #404]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b62      	ldr	r3, [pc, #392]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	495f      	ldr	r1, [pc, #380]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7ff f9b5 	bl	800262c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7ff f9b1 	bl	800262c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e231      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7ff f990 	bl	800262c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7ff f98c 	bl	800262c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e20c      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003322:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x3ec>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003338:	4a3b      	ldr	r2, [pc, #236]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7ff f973 	bl	800262c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7ff f96f 	bl	800262c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1ef      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335c:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800337c:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	@ 0x58
 8003394:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b0:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7ff f936 	bl	800262c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7ff f932 	bl	800262c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1b2      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d8>
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033fa:	e029      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d115      	bne.n	8003430 <HAL_RCC_OscConfig+0x50c>
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a07      	ldr	r2, [pc, #28]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	4a03      	ldr	r2, [pc, #12]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
 8003430:	4b9a      	ldr	r3, [pc, #616]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a99      	ldr	r2, [pc, #612]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003440:	4b96      	ldr	r3, [pc, #600]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a95      	ldr	r2, [pc, #596]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d016      	beq.n	8003486 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7ff f8e8 	bl	800262c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7ff f8e4 	bl	800262c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e162      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003476:	4b89      	ldr	r3, [pc, #548]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ed      	beq.n	8003460 <HAL_RCC_OscConfig+0x53c>
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7ff f8d1 	bl	800262c <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7ff f8cd 	bl	800262c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e14b      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a4:	4b7d      	ldr	r3, [pc, #500]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ed      	bne.n	800348e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b78      	ldr	r3, [pc, #480]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034bc:	4a77      	ldr	r2, [pc, #476]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d03c      	beq.n	800354a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01c      	beq.n	8003512 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d8:	4b70      	ldr	r3, [pc, #448]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80034da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034de:	4a6f      	ldr	r2, [pc, #444]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7ff f8a0 	bl	800262c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f0:	f7ff f89c 	bl	800262c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e11c      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003502:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ef      	beq.n	80034f0 <HAL_RCC_OscConfig+0x5cc>
 8003510:	e01b      	b.n	800354a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003512:	4b62      	ldr	r3, [pc, #392]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003518:	4a60      	ldr	r2, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7ff f883 	bl	800262c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800352a:	f7ff f87f 	bl	800262c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0ff      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800353c:	4b57      	ldr	r3, [pc, #348]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800353e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ef      	bne.n	800352a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80f3 	beq.w	800373a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	2b02      	cmp	r3, #2
 800355a:	f040 80c9 	bne.w	80036f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800355e:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	429a      	cmp	r2, r3
 8003570:	d12c      	bne.n	80035cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	3b01      	subs	r3, #1
 800357e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d123      	bne.n	80035cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d11b      	bne.n	80035cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d113      	bne.n	80035cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d109      	bne.n	80035cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d06b      	beq.n	80036a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d062      	beq.n	8003698 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035d2:	4b32      	ldr	r3, [pc, #200]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0ac      	b.n	800373c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e2:	4b2e      	ldr	r3, [pc, #184]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2d      	ldr	r2, [pc, #180]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 80035e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ee:	f7ff f81d 	bl	800262c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7ff f819 	bl	800262c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e099      	b.n	800373c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003614:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <HAL_RCC_OscConfig+0x77c>)
 800361a:	4013      	ands	r3, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003624:	3a01      	subs	r2, #1
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800362e:	0212      	lsls	r2, r2, #8
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003636:	0852      	lsrs	r2, r2, #1
 8003638:	3a01      	subs	r2, #1
 800363a:	0552      	lsls	r2, r2, #21
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003642:	0852      	lsrs	r2, r2, #1
 8003644:	3a01      	subs	r2, #1
 8003646:	0652      	lsls	r2, r2, #25
 8003648:	4311      	orrs	r1, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800364e:	06d2      	lsls	r2, r2, #27
 8003650:	430a      	orrs	r2, r1
 8003652:	4912      	ldr	r1, [pc, #72]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003654:	4313      	orrs	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0f      	ldr	r2, [pc, #60]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003662:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003664:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a0c      	ldr	r2, [pc, #48]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800366a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003670:	f7fe ffdc 	bl	800262c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe ffd8 	bl	800262c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e058      	b.n	800373c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	4b04      	ldr	r3, [pc, #16]	@ (800369c <HAL_RCC_OscConfig+0x778>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003696:	e050      	b.n	800373a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e04f      	b.n	800373c <HAL_RCC_OscConfig+0x818>
 800369c:	40021000 	.word	0x40021000
 80036a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d144      	bne.n	800373a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b21      	ldr	r3, [pc, #132]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a20      	ldr	r2, [pc, #128]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fe ffb0 	bl	800262c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe ffac 	bl	800262c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e02c      	b.n	800373c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b18      	ldr	r3, [pc, #96]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x7ac>
 80036ee:	e024      	b.n	800373a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d01f      	beq.n	8003736 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe ff93 	bl	800262c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe ff8f 	bl	800262c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e00f      	b.n	800373c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4905      	ldr	r1, [pc, #20]	@ (8003744 <HAL_RCC_OscConfig+0x820>)
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_RCC_OscConfig+0x824>)
 8003730:	4013      	ands	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
 8003734:	e001      	b.n	800373a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	feeefffc 	.word	0xfeeefffc

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0e7      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b75      	ldr	r3, [pc, #468]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d910      	bls.n	8003790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b72      	ldr	r3, [pc, #456]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	4970      	ldr	r1, [pc, #448]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b6e      	ldr	r3, [pc, #440]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cf      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b66      	ldr	r3, [pc, #408]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d908      	bls.n	80037be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b63      	ldr	r3, [pc, #396]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4960      	ldr	r1, [pc, #384]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04c      	beq.n	8003864 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	4b5a      	ldr	r3, [pc, #360]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0a6      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ea:	4b54      	ldr	r3, [pc, #336]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d115      	bne.n	8003822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e09a      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003802:	4b4e      	ldr	r3, [pc, #312]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e08e      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003812:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e086      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4943      	ldr	r1, [pc, #268]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003834:	f7fe fefa 	bl	800262c <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fe fef6 	bl	800262c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e06e      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	4b31      	ldr	r3, [pc, #196]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800387c:	429a      	cmp	r2, r3
 800387e:	d208      	bcs.n	8003892 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b2e      	ldr	r3, [pc, #184]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	492b      	ldr	r1, [pc, #172]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003892:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d210      	bcs.n	80038c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 0207 	bic.w	r2, r3, #7
 80038a8:	4923      	ldr	r1, [pc, #140]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b0:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <HAL_RCC_ClockConfig+0x1ec>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e036      	b.n	8003930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ce:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	4918      	ldr	r1, [pc, #96]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ec:	4b13      	ldr	r3, [pc, #76]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4910      	ldr	r1, [pc, #64]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003900:	f000 f824 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	490b      	ldr	r1, [pc, #44]	@ (8003940 <HAL_RCC_ClockConfig+0x1f4>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1f8>)
 800391e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_ClockConfig+0x1fc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fe31 	bl	800258c <HAL_InitTick>
 800392a:	4603      	mov	r3, r0
 800392c:	72fb      	strb	r3, [r7, #11]

  return status;
 800392e:	7afb      	ldrb	r3, [r7, #11]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40022000 	.word	0x40022000
 800393c:	40021000 	.word	0x40021000
 8003940:	08007a78 	.word	0x08007a78
 8003944:	2000000c 	.word	0x2000000c
 8003948:	20000010 	.word	0x20000010

0800394c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003964:	4b3b      	ldr	r3, [pc, #236]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x34>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d121      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d11e      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003980:	4b34      	ldr	r3, [pc, #208]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d107      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800398c:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e005      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800399c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039c4:	4b25      	ldr	r3, [pc, #148]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e004      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d0:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80039d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d134      	bne.n	8003a44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039da:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d003      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0xac>
 80039f0:	e005      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80039f4:	617b      	str	r3, [r7, #20]
      break;
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80039fa:	617b      	str	r3, [r7, #20]
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	617b      	str	r3, [r7, #20]
      break;
 8003a02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a04:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	3301      	adds	r3, #1
 8003a10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	fb03 f202 	mul.w	r2, r3, r2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	0e5b      	lsrs	r3, r3, #25
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	3301      	adds	r3, #1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a44:	69bb      	ldr	r3, [r7, #24]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	@ 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	08007a90 	.word	0x08007a90
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	007a1200 	.word	0x007a1200

08003a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	2000000c 	.word	0x2000000c

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08007a88 	.word	0x08007a88

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003aac:	f7ff ffda 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0adb      	lsrs	r3, r3, #11
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4904      	ldr	r1, [pc, #16]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08007a88 	.word	0x08007a88

08003ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003aec:	f7ff f9b6 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003af0:	6178      	str	r0, [r7, #20]
 8003af2:	e014      	b.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	4a24      	ldr	r2, [pc, #144]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b00:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b0c:	f7ff f9a6 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	4a1d      	ldr	r2, [pc, #116]	@ (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b24:	d10b      	bne.n	8003b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b80      	cmp	r3, #128	@ 0x80
 8003b2a:	d919      	bls.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b30:	d902      	bls.n	8003b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b32:	2302      	movs	r3, #2
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e013      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b38:	2301      	movs	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e010      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b80      	cmp	r3, #128	@ 0x80
 8003b42:	d902      	bls.n	8003b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b44:	2303      	movs	r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e00a      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b80      	cmp	r3, #128	@ 0x80
 8003b4e:	d102      	bne.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b50:	2302      	movs	r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e004      	b.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b70      	cmp	r3, #112	@ 0x70
 8003b5a:	d101      	bne.n	8003b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 0207 	bic.w	r2, r3, #7
 8003b68:	4909      	ldr	r1, [pc, #36]	@ (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b70:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40022000 	.word	0x40022000

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d031      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003bba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bbe:	d814      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003bca:	4b5d      	ldr	r3, [pc, #372]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f9de 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	74fb      	strb	r3, [r7, #19]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf8:	4b51      	ldr	r3, [pc, #324]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	494e      	ldr	r1, [pc, #312]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 809e 	beq.w	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	2300      	movs	r3, #0
 8003c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c26:	4b46      	ldr	r3, [pc, #280]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3c:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c40:	4a3f      	ldr	r2, [pc, #252]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c48:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c54:	2301      	movs	r3, #1
 8003c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4b3a      	ldr	r3, [pc, #232]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a39      	ldr	r2, [pc, #228]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fe fce2 	bl	800262c <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fe fcde 	bl	800262c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c80:	4b30      	ldr	r3, [pc, #192]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d15a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c92:	4b2b      	ldr	r3, [pc, #172]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cba:	4b21      	ldr	r3, [pc, #132]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cca:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cda:	4a19      	ldr	r2, [pc, #100]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d016      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fc9e 	bl	800262c <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fc9a 	bl	800262c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d902      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	74fb      	strb	r3, [r7, #19]
            break;
 8003d0a:	e006      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ec      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d20:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	4904      	ldr	r1, [pc, #16]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d36:	e009      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	74bb      	strb	r3, [r7, #18]
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	7cfb      	ldrb	r3, [r7, #19]
 8003d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4c:	7c7b      	ldrb	r3, [r7, #17]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	4b8a      	ldr	r3, [pc, #552]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	4a89      	ldr	r2, [pc, #548]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6a:	4b84      	ldr	r3, [pc, #528]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d70:	f023 0203 	bic.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4980      	ldr	r1, [pc, #512]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 020c 	bic.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9a:	4978      	ldr	r1, [pc, #480]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dae:	4b73      	ldr	r3, [pc, #460]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	496f      	ldr	r1, [pc, #444]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dde:	4967      	ldr	r1, [pc, #412]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003df2:	4b62      	ldr	r3, [pc, #392]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e00:	495e      	ldr	r1, [pc, #376]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e14:	4b59      	ldr	r3, [pc, #356]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	4956      	ldr	r1, [pc, #344]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	494d      	ldr	r1, [pc, #308]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d028      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e58:	4b48      	ldr	r3, [pc, #288]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	4945      	ldr	r1, [pc, #276]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e76:	d106      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b40      	ldr	r3, [pc, #256]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
 8003e84:	e011      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f882 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb6:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec4:	492d      	ldr	r1, [pc, #180]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed6:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a28      	ldr	r2, [pc, #160]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003edc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ee0:	60d3      	str	r3, [r2, #12]
 8003ee2:	e011      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f853 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01c      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f22:	4916      	ldr	r1, [pc, #88]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f32:	d10c      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f830 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f60:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f68:	4904      	ldr	r1, [pc, #16]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f70:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f8a:	f043 0304 	orr.w	r3, r3, #4
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fae:	4b74      	ldr	r3, [pc, #464]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fba:	4b71      	ldr	r3, [pc, #452]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0203 	and.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d10d      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d047      	beq.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	e044      	b.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d018      	beq.n	8004026 <RCCEx_PLLSAI1_Config+0x86>
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d825      	bhi.n	8004044 <RCCEx_PLLSAI1_Config+0xa4>
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d002      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0x62>
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d009      	beq.n	8004014 <RCCEx_PLLSAI1_Config+0x74>
 8004000:	e020      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004002:	4b5f      	ldr	r3, [pc, #380]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004012:	e01a      	b.n	800404a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004014:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e013      	b.n	800404e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004026:	4b56      	ldr	r3, [pc, #344]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004032:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004042:	e006      	b.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      break;
 8004048:	e004      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004052:	bf00      	nop
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800405a:	4b49      	ldr	r3, [pc, #292]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	430b      	orrs	r3, r1
 8004070:	4943      	ldr	r1, [pc, #268]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d17c      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800407c:	4b40      	ldr	r3, [pc, #256]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3f      	ldr	r2, [pc, #252]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004082:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fe fad0 	bl	800262c <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800408e:	e009      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004090:	f7fe facc 	bl	800262c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	73fb      	strb	r3, [r7, #15]
        break;
 80040a2:	e005      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040a4:	4b36      	ldr	r3, [pc, #216]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ef      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d15f      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d110      	bne.n	80040de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040bc:	4b30      	ldr	r3, [pc, #192]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80040c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6892      	ldr	r2, [r2, #8]
 80040cc:	0211      	lsls	r1, r2, #8
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	06d2      	lsls	r2, r2, #27
 80040d4:	430a      	orrs	r2, r1
 80040d6:	492a      	ldr	r1, [pc, #168]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	610b      	str	r3, [r1, #16]
 80040dc:	e027      	b.n	800412e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d112      	bne.n	800410a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e4:	4b26      	ldr	r3, [pc, #152]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6892      	ldr	r2, [r2, #8]
 80040f4:	0211      	lsls	r1, r2, #8
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6912      	ldr	r2, [r2, #16]
 80040fa:	0852      	lsrs	r2, r2, #1
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0552      	lsls	r2, r2, #21
 8004100:	430a      	orrs	r2, r1
 8004102:	491f      	ldr	r1, [pc, #124]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
 8004108:	e011      	b.n	800412e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410a:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004112:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6892      	ldr	r2, [r2, #8]
 800411a:	0211      	lsls	r1, r2, #8
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6952      	ldr	r2, [r2, #20]
 8004120:	0852      	lsrs	r2, r2, #1
 8004122:	3a01      	subs	r2, #1
 8004124:	0652      	lsls	r2, r2, #25
 8004126:	430a      	orrs	r2, r1
 8004128:	4915      	ldr	r1, [pc, #84]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004138:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fe fa77 	bl	800262c <HAL_GetTick>
 800413e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004140:	e009      	b.n	8004156 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004142:	f7fe fa73 	bl	800262c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	73fb      	strb	r3, [r7, #15]
          break;
 8004154:	e005      	b.n	8004162 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004156:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4903      	ldr	r1, [pc, #12]	@ (8004180 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40021000 	.word	0x40021000

08004184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e040      	b.n	8004218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe f89e 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	@ 0x24
 80041b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa54 	bl	8004678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f825 	bl	8004220 <UART_SetConfig>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e01b      	b.n	8004218 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fad3 	bl	80047bc <UART_CheckIdleState>
 8004216:	4603      	mov	r3, r0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004224:	b08a      	sub	sp, #40	@ 0x28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4313      	orrs	r3, r2
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4bb4      	ldr	r3, [pc, #720]	@ (8004520 <UART_SetConfig+0x300>)
 8004250:	4013      	ands	r3, r2
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004258:	430b      	orrs	r3, r1
 800425a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4aa9      	ldr	r2, [pc, #676]	@ (8004524 <UART_SetConfig+0x304>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	4313      	orrs	r3, r2
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4aa0      	ldr	r2, [pc, #640]	@ (8004528 <UART_SetConfig+0x308>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d126      	bne.n	80042f8 <UART_SetConfig+0xd8>
 80042aa:	4ba0      	ldr	r3, [pc, #640]	@ (800452c <UART_SetConfig+0x30c>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d81b      	bhi.n	80042f0 <UART_SetConfig+0xd0>
 80042b8:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <UART_SetConfig+0xa0>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e080      	b.n	80043da <UART_SetConfig+0x1ba>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e07c      	b.n	80043da <UART_SetConfig+0x1ba>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e078      	b.n	80043da <UART_SetConfig+0x1ba>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e074      	b.n	80043da <UART_SetConfig+0x1ba>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f6:	e070      	b.n	80043da <UART_SetConfig+0x1ba>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a8c      	ldr	r2, [pc, #560]	@ (8004530 <UART_SetConfig+0x310>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d138      	bne.n	8004374 <UART_SetConfig+0x154>
 8004302:	4b8a      	ldr	r3, [pc, #552]	@ (800452c <UART_SetConfig+0x30c>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d82d      	bhi.n	800436c <UART_SetConfig+0x14c>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0xf8>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004355 	.word	0x08004355
 800433c:	0800436d 	.word	0x0800436d
 8004340:	0800436d 	.word	0x0800436d
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004365 	.word	0x08004365
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e042      	b.n	80043da <UART_SetConfig+0x1ba>
 8004354:	2302      	movs	r3, #2
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e03e      	b.n	80043da <UART_SetConfig+0x1ba>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e03a      	b.n	80043da <UART_SetConfig+0x1ba>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e036      	b.n	80043da <UART_SetConfig+0x1ba>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e032      	b.n	80043da <UART_SetConfig+0x1ba>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6a      	ldr	r2, [pc, #424]	@ (8004524 <UART_SetConfig+0x304>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12a      	bne.n	80043d4 <UART_SetConfig+0x1b4>
 800437e:	4b6b      	ldr	r3, [pc, #428]	@ (800452c <UART_SetConfig+0x30c>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800438c:	d01a      	beq.n	80043c4 <UART_SetConfig+0x1a4>
 800438e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004392:	d81b      	bhi.n	80043cc <UART_SetConfig+0x1ac>
 8004394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004398:	d00c      	beq.n	80043b4 <UART_SetConfig+0x194>
 800439a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439e:	d815      	bhi.n	80043cc <UART_SetConfig+0x1ac>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <UART_SetConfig+0x18c>
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a8:	d008      	beq.n	80043bc <UART_SetConfig+0x19c>
 80043aa:	e00f      	b.n	80043cc <UART_SetConfig+0x1ac>
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e012      	b.n	80043da <UART_SetConfig+0x1ba>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e00e      	b.n	80043da <UART_SetConfig+0x1ba>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e00a      	b.n	80043da <UART_SetConfig+0x1ba>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e006      	b.n	80043da <UART_SetConfig+0x1ba>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e002      	b.n	80043da <UART_SetConfig+0x1ba>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a51      	ldr	r2, [pc, #324]	@ (8004524 <UART_SetConfig+0x304>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d17a      	bne.n	80044da <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d824      	bhi.n	8004436 <UART_SetConfig+0x216>
 80043ec:	a201      	add	r2, pc, #4	@ (adr r2, 80043f4 <UART_SetConfig+0x1d4>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004437 	.word	0x08004437
 80043fc:	08004421 	.word	0x08004421
 8004400:	08004437 	.word	0x08004437
 8004404:	08004427 	.word	0x08004427
 8004408:	08004437 	.word	0x08004437
 800440c:	08004437 	.word	0x08004437
 8004410:	08004437 	.word	0x08004437
 8004414:	0800442f 	.word	0x0800442f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7ff fb30 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 800441c:	61f8      	str	r0, [r7, #28]
        break;
 800441e:	e010      	b.n	8004442 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004420:	4b44      	ldr	r3, [pc, #272]	@ (8004534 <UART_SetConfig+0x314>)
 8004422:	61fb      	str	r3, [r7, #28]
        break;
 8004424:	e00d      	b.n	8004442 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004426:	f7ff fa91 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800442a:	61f8      	str	r0, [r7, #28]
        break;
 800442c:	e009      	b.n	8004442 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004432:	61fb      	str	r3, [r7, #28]
        break;
 8004434:	e005      	b.n	8004442 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8107 	beq.w	8004658 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	429a      	cmp	r2, r3
 8004458:	d305      	bcc.n	8004466 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	429a      	cmp	r2, r3
 8004464:	d903      	bls.n	800446e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800446c:	e0f4      	b.n	8004658 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2200      	movs	r2, #0
 8004472:	461c      	mov	r4, r3
 8004474:	4615      	mov	r5, r2
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	022b      	lsls	r3, r5, #8
 8004480:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004484:	0222      	lsls	r2, r4, #8
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	6849      	ldr	r1, [r1, #4]
 800448a:	0849      	lsrs	r1, r1, #1
 800448c:	2000      	movs	r0, #0
 800448e:	4688      	mov	r8, r1
 8004490:	4681      	mov	r9, r0
 8004492:	eb12 0a08 	adds.w	sl, r2, r8
 8004496:	eb43 0b09 	adc.w	fp, r3, r9
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a8:	4650      	mov	r0, sl
 80044aa:	4659      	mov	r1, fp
 80044ac:	f7fc fb66 	bl	8000b7c <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044be:	d308      	bcc.n	80044d2 <UART_SetConfig+0x2b2>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044c6:	d204      	bcs.n	80044d2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	e0c2      	b.n	8004658 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044d8:	e0be      	b.n	8004658 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e2:	d16a      	bne.n	80045ba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d834      	bhi.n	8004556 <UART_SetConfig+0x336>
 80044ec:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <UART_SetConfig+0x2d4>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004539 	.word	0x08004539
 80044fc:	08004541 	.word	0x08004541
 8004500:	08004557 	.word	0x08004557
 8004504:	08004547 	.word	0x08004547
 8004508:	08004557 	.word	0x08004557
 800450c:	08004557 	.word	0x08004557
 8004510:	08004557 	.word	0x08004557
 8004514:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7ff fab0 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 800451c:	61f8      	str	r0, [r7, #28]
        break;
 800451e:	e020      	b.n	8004562 <UART_SetConfig+0x342>
 8004520:	efff69f3 	.word	0xefff69f3
 8004524:	40008000 	.word	0x40008000
 8004528:	40013800 	.word	0x40013800
 800452c:	40021000 	.word	0x40021000
 8004530:	40004400 	.word	0x40004400
 8004534:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7ff fab6 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 800453c:	61f8      	str	r0, [r7, #28]
        break;
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b4c      	ldr	r3, [pc, #304]	@ (8004674 <UART_SetConfig+0x454>)
 8004542:	61fb      	str	r3, [r7, #28]
        break;
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7ff fa01 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800454a:	61f8      	str	r0, [r7, #28]
        break;
 800454c:	e009      	b.n	8004562 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
        break;
 8004554:	e005      	b.n	8004562 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d077      	beq.n	8004658 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005a      	lsls	r2, r3, #1
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d916      	bls.n	80045b2 <UART_SetConfig+0x392>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458a:	d212      	bcs.n	80045b2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f023 030f 	bic.w	r3, r3, #15
 8004594:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	8afb      	ldrh	r3, [r7, #22]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	8afa      	ldrh	r2, [r7, #22]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e052      	b.n	8004658 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045b8:	e04e      	b.n	8004658 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d827      	bhi.n	8004612 <UART_SetConfig+0x3f2>
 80045c2:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <UART_SetConfig+0x3a8>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	08004613 	.word	0x08004613
 80045d8:	08004603 	.word	0x08004603
 80045dc:	08004613 	.word	0x08004613
 80045e0:	08004613 	.word	0x08004613
 80045e4:	08004613 	.word	0x08004613
 80045e8:	0800460b 	.word	0x0800460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7ff fa46 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 80045f0:	61f8      	str	r0, [r7, #28]
        break;
 80045f2:	e014      	b.n	800461e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f4:	f7ff fa58 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 80045f8:	61f8      	str	r0, [r7, #28]
        break;
 80045fa:	e010      	b.n	800461e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004674 <UART_SetConfig+0x454>)
 80045fe:	61fb      	str	r3, [r7, #28]
        break;
 8004600:	e00d      	b.n	800461e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004602:	f7ff f9a3 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8004606:	61f8      	str	r0, [r7, #28]
        break;
 8004608:	e009      	b.n	800461e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800460a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460e:	61fb      	str	r3, [r7, #28]
        break;
 8004610:	e005      	b.n	800461e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800461c:	bf00      	nop
    }

    if (pclk != 0U)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d019      	beq.n	8004658 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085a      	lsrs	r2, r3, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	fbb2 f3f3 	udiv	r3, r2, r3
 8004636:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d909      	bls.n	8004652 <UART_SetConfig+0x432>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d205      	bcs.n	8004652 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60da      	str	r2, [r3, #12]
 8004650:	e002      	b.n	8004658 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004664:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	@ 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004672:	bf00      	nop
 8004674:	00f42400 	.word	0x00f42400

08004678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01a      	beq.n	800478e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004776:	d10a      	bne.n	800478e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b098      	sub	sp, #96	@ 0x60
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047cc:	f7fd ff2e 	bl	800262c <HAL_GetTick>
 80047d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d12e      	bne.n	800483e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e8:	2200      	movs	r2, #0
 80047ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f88c 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d021      	beq.n	800483e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800480e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004818:	647b      	str	r3, [r7, #68]	@ 0x44
 800481a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800481e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e062      	b.n	8004904 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d149      	bne.n	80048e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800484c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	2200      	movs	r2, #0
 8004856:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f856 	bl	800490c <UART_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d03c      	beq.n	80048e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	623b      	str	r3, [r7, #32]
   return(result);
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800487a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004884:	633b      	str	r3, [r7, #48]	@ 0x30
 8004886:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800488a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e6      	bne.n	8004866 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3308      	adds	r3, #8
 80048b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b8:	61fa      	str	r2, [r7, #28]
 80048ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	617b      	str	r3, [r7, #20]
   return(result);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e011      	b.n	8004904 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3758      	adds	r7, #88	@ 0x58
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491c:	e04f      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d04b      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fd fe81 	bl	800262c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <UART_WaitOnFlagUntilTimeout+0x30>
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e04e      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d037      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d034      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d031      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d110      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2208      	movs	r2, #8
 800496e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f838 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2208      	movs	r2, #8
 800497a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e029      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004998:	d111      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f81e 	bl	80049e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d0a0      	beq.n	800491e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b095      	sub	sp, #84	@ 0x54
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d118      	bne.n	8004a8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	613b      	str	r3, [r7, #16]
   return(result);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004aa2:	bf00      	nop
 8004aa4:	3754      	adds	r7, #84	@ 0x54
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac0:	2b84      	cmp	r3, #132	@ 0x84
 8004ac2:	d005      	beq.n	8004ad0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ac4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	3303      	adds	r3, #3
 8004ace:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ae2:	f000 fcbb 	bl	800545c <vTaskStartScheduler>
  
  return osOK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}

08004aec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <osThreadCreate+0x54>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01c      	beq.n	8004b40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685c      	ldr	r4, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691e      	ldr	r6, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ffc8 	bl	8004aae <makeFreeRtosPriority>
 8004b1e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b28:	9202      	str	r2, [sp, #8]
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	9100      	str	r1, [sp, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	4632      	mov	r2, r6
 8004b32:	4629      	mov	r1, r5
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fac3 	bl	80050c0 <xTaskCreateStatic>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e01c      	b.n	8004b7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685c      	ldr	r4, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b4c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ffaa 	bl	8004aae <makeFreeRtosPriority>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4632      	mov	r2, r6
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 fb08 	bl	8005180 <xTaskCreate>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <osDelay+0x16>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	e000      	b.n	8004b9c <osDelay+0x18>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fc27 	bl	80053f0 <vTaskDelay>
  
  return osOK;
 8004ba2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 0208 	add.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f103 0208 	add.w	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f103 0208 	add.w	r2, r3, #8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b085      	sub	sp, #20
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e00c      	b.n	8004c88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3308      	adds	r3, #8
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e002      	b.n	8004c7c <vListInsert+0x2e>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d2f6      	bcs.n	8004c76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6892      	ldr	r2, [r2, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d103      	bne.n	8004cf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	@ 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <xQueueGenericSend+0x42>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueGenericSend+0x46>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueGenericSend+0x48>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xQueueGenericSend+0x64>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSend+0x72>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <xQueueGenericSend+0x76>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <xQueueGenericSend+0x78>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueGenericSend+0x94>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	623b      	str	r3, [r7, #32]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004da8:	f000 ff62 	bl	8005c70 <xTaskGetSchedulerState>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <xQueueGenericSend+0xa4>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <xQueueGenericSend+0xa8>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <xQueueGenericSend+0xaa>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <xQueueGenericSend+0xc6>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	61fb      	str	r3, [r7, #28]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dda:	f001 f985 	bl	80060e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <xQueueGenericSend+0xdc>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d129      	bne.n	8004e44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004df6:	f000 f88f 	bl	8004f18 <prvCopyDataToQueue>
 8004dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d010      	beq.n	8004e26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	3324      	adds	r3, #36	@ 0x24
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fd71 	bl	80058f0 <xTaskRemoveFromEventList>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e14:	4b3f      	ldr	r3, [pc, #252]	@ (8004f14 <xQueueGenericSend+0x200>)
 8004e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	e00a      	b.n	8004e3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e2c:	4b39      	ldr	r3, [pc, #228]	@ (8004f14 <xQueueGenericSend+0x200>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e3c:	f001 f986 	bl	800614c <vPortExitCritical>
				return pdPASS;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e063      	b.n	8004f0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e4a:	f001 f97f 	bl	800614c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e05c      	b.n	8004f0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d106      	bne.n	8004e66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fdab 	bl	80059b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e66:	f001 f971 	bl	800614c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e6a:	f000 fb59 	bl	8005520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e6e:	f001 f93b 	bl	80060e8 <vPortEnterCritical>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e78:	b25b      	sxtb	r3, r3
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d103      	bne.n	8004e88 <xQueueGenericSend+0x174>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e8e:	b25b      	sxtb	r3, r3
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d103      	bne.n	8004e9e <xQueueGenericSend+0x18a>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e9e:	f001 f955 	bl	800614c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea2:	1d3a      	adds	r2, r7, #4
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fd9a 	bl	80059e4 <xTaskCheckForTimeOut>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d124      	bne.n	8004f00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eb8:	f000 f8ea 	bl	8005090 <prvIsQueueFull>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	3310      	adds	r3, #16
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fcea 	bl	80058a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ed2:	f000 f88b 	bl	8004fec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ed6:	f000 fb31 	bl	800553c <xTaskResumeAll>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f47f af7c 	bne.w	8004dda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <xQueueGenericSend+0x200>)
 8004ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	e772      	b.n	8004dda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ef6:	f000 f879 	bl	8004fec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004efa:	f000 fb1f 	bl	800553c <xTaskResumeAll>
 8004efe:	e76c      	b.n	8004dda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f02:	f000 f873 	bl	8004fec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f06:	f000 fb19 	bl	800553c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3738      	adds	r7, #56	@ 0x38
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d14d      	bne.n	8004fda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 feb2 	bl	8005cac <xTaskPriorityDisinherit>
 8004f48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e043      	b.n	8004fda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d119      	bne.n	8004f8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6858      	ldr	r0, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	461a      	mov	r2, r3
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	f001 fd4c 	bl	8006a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d32b      	bcc.n	8004fda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	e026      	b.n	8004fda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	68d8      	ldr	r0, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	f001 fd32 	bl	8006a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	441a      	add	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d207      	bcs.n	8004fc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	425b      	negs	r3, r3
 8004fc2:	441a      	add	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d105      	bne.n	8004fda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004fe2:	697b      	ldr	r3, [r7, #20]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ff4:	f001 f878 	bl	80060e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ffe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005000:	e011      	b.n	8005026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3324      	adds	r3, #36	@ 0x24
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fc6e 	bl	80058f0 <xTaskRemoveFromEventList>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800501a:	f000 fd47 	bl	8005aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	3b01      	subs	r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800502a:	2b00      	cmp	r3, #0
 800502c:	dce9      	bgt.n	8005002 <prvUnlockQueue+0x16>
 800502e:	e000      	b.n	8005032 <prvUnlockQueue+0x46>
					break;
 8005030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	22ff      	movs	r2, #255	@ 0xff
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800503a:	f001 f887 	bl	800614c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800503e:	f001 f853 	bl	80060e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800504a:	e011      	b.n	8005070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3310      	adds	r3, #16
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fc49 	bl	80058f0 <xTaskRemoveFromEventList>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005064:	f000 fd22 	bl	8005aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	3b01      	subs	r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005074:	2b00      	cmp	r3, #0
 8005076:	dce9      	bgt.n	800504c <prvUnlockQueue+0x60>
 8005078:	e000      	b.n	800507c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800507a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	22ff      	movs	r2, #255	@ 0xff
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005084:	f001 f862 	bl	800614c <vPortExitCritical>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005098:	f001 f826 	bl	80060e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d102      	bne.n	80050ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e001      	b.n	80050b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050b2:	f001 f84b 	bl	800614c <vPortExitCritical>

	return xReturn;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	@ 0x38
 80050c4:	af04      	add	r7, sp, #16
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xTaskCreateStatic+0x4a>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61fb      	str	r3, [r7, #28]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800510a:	2354      	movs	r3, #84	@ 0x54
 800510c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b54      	cmp	r3, #84	@ 0x54
 8005112:	d00b      	beq.n	800512c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	61bb      	str	r3, [r7, #24]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800512c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800512e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01e      	beq.n	8005172 <xTaskCreateStatic+0xb2>
 8005134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800514c:	2300      	movs	r3, #0
 800514e:	9303      	str	r3, [sp, #12]
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	9302      	str	r3, [sp, #8]
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f850 	bl	800520a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800516a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800516c:	f000 f8d6 	bl	800531c <prvAddNewTaskToReadyList>
 8005170:	e001      	b.n	8005176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005176:	697b      	ldr	r3, [r7, #20]
	}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	@ 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	@ 0x30
 8005184:	af04      	add	r7, sp, #16
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f887 	bl	80062a8 <pvPortMalloc>
 800519a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051a2:	2054      	movs	r0, #84	@ 0x54
 80051a4:	f001 f880 	bl	80062a8 <pvPortMalloc>
 80051a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b6:	e005      	b.n	80051c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051b8:	6978      	ldr	r0, [r7, #20]
 80051ba:	f001 f943 	bl	8006444 <vPortFree>
 80051be:	e001      	b.n	80051c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d017      	beq.n	80051fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f80e 	bl	800520a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ee:	69f8      	ldr	r0, [r7, #28]
 80051f0:	f000 f894 	bl	800531c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e002      	b.n	8005200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005200:	69bb      	ldr	r3, [r7, #24]
	}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005222:	3b01      	subs	r3, #1
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	617b      	str	r3, [r7, #20]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01f      	beq.n	800529a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e012      	b.n	8005286 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	7819      	ldrb	r1, [r3, #0]
 8005268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	3334      	adds	r3, #52	@ 0x34
 8005270:	460a      	mov	r2, r1
 8005272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3301      	adds	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	d9e9      	bls.n	8005260 <prvInitialiseNewTask+0x56>
 800528c:	e000      	b.n	8005290 <prvInitialiseNewTask+0x86>
			{
				break;
 800528e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005298:	e003      	b.n	80052a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d901      	bls.n	80052ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052a8:	2306      	movs	r3, #6
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fc92 	bl	8004bec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	3318      	adds	r3, #24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fc8d 	bl	8004bec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	f1c3 0207 	rsb	r2, r3, #7
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	2200      	movs	r2, #0
 80052ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	69b8      	ldr	r0, [r7, #24]
 80052fc:	f000 fdc4 	bl	8005e88 <pxPortInitialiseStack>
 8005300:	4602      	mov	r2, r0
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005312:	bf00      	nop
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005324:	f000 fee0 	bl	80060e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005328:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 8005330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005332:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800533a:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005340:	4b24      	ldr	r3, [pc, #144]	@ (80053d4 <prvAddNewTaskToReadyList+0xb8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d110      	bne.n	800536a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005348:	f000 fbd4 	bl	8005af4 <prvInitialiseTaskLists>
 800534c:	e00d      	b.n	800536a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800534e:	4b23      	ldr	r3, [pc, #140]	@ (80053dc <prvAddNewTaskToReadyList+0xc0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005356:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	429a      	cmp	r2, r3
 8005362:	d802      	bhi.n	800536a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005364:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800536a:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <prvAddNewTaskToReadyList+0xc4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a1b      	ldr	r2, [pc, #108]	@ (80053e0 <prvAddNewTaskToReadyList+0xc4>)
 8005372:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	4b19      	ldr	r3, [pc, #100]	@ (80053e4 <prvAddNewTaskToReadyList+0xc8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <prvAddNewTaskToReadyList+0xc8>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <prvAddNewTaskToReadyList+0xcc>)
 8005394:	441a      	add	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7ff fc32 	bl	8004c06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a2:	f000 fed3 	bl	800614c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a6:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <prvAddNewTaskToReadyList+0xc0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053ae:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <prvAddNewTaskToReadyList+0xbc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d207      	bcs.n	80053cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <prvAddNewTaskToReadyList+0xd0>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200004bc 	.word	0x200004bc
 80053d8:	200003bc 	.word	0x200003bc
 80053dc:	200004c8 	.word	0x200004c8
 80053e0:	200004d8 	.word	0x200004d8
 80053e4:	200004c4 	.word	0x200004c4
 80053e8:	200003c0 	.word	0x200003c0
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005402:	4b14      	ldr	r3, [pc, #80]	@ (8005454 <vTaskDelay+0x64>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <vTaskDelay+0x32>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005422:	f000 f87d 	bl	8005520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005426:	2100      	movs	r1, #0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fcc7 	bl	8005dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800542e:	f000 f885 	bl	800553c <xTaskResumeAll>
 8005432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800543a:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <vTaskDelay+0x68>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	200004e4 	.word	0x200004e4
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800546a:	463a      	mov	r2, r7
 800546c:	1d39      	adds	r1, r7, #4
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4618      	mov	r0, r3
 8005474:	f7fc fd44 	bl	8001f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	460a      	mov	r2, r1
 800548a:	491f      	ldr	r1, [pc, #124]	@ (8005508 <vTaskStartScheduler+0xac>)
 800548c:	481f      	ldr	r0, [pc, #124]	@ (800550c <vTaskStartScheduler+0xb0>)
 800548e:	f7ff fe17 	bl	80050c0 <xTaskCreateStatic>
 8005492:	4603      	mov	r3, r0
 8005494:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <vTaskStartScheduler+0xb4>)
 8005496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005498:	4b1d      	ldr	r3, [pc, #116]	@ (8005510 <vTaskStartScheduler+0xb4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d116      	bne.n	80054de <vTaskStartScheduler+0x82>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054c4:	4b13      	ldr	r3, [pc, #76]	@ (8005514 <vTaskStartScheduler+0xb8>)
 80054c6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054cc:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <vTaskStartScheduler+0xbc>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054d2:	4b12      	ldr	r3, [pc, #72]	@ (800551c <vTaskStartScheduler+0xc0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054d8:	f000 fd62 	bl	8005fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054dc:	e00f      	b.n	80054fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d10b      	bne.n	80054fe <vTaskStartScheduler+0xa2>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <vTaskStartScheduler+0x9e>
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08007a64 	.word	0x08007a64
 800550c:	08005ac5 	.word	0x08005ac5
 8005510:	200004e0 	.word	0x200004e0
 8005514:	200004dc 	.word	0x200004dc
 8005518:	200004c8 	.word	0x200004c8
 800551c:	200004c0 	.word	0x200004c0

08005520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <vTaskSuspendAll+0x18>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a03      	ldr	r2, [pc, #12]	@ (8005538 <vTaskSuspendAll+0x18>)
 800552c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	200004e4 	.word	0x200004e4

0800553c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800554a:	4b42      	ldr	r3, [pc, #264]	@ (8005654 <xTaskResumeAll+0x118>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xTaskResumeAll+0x2e>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	603b      	str	r3, [r7, #0]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800556a:	f000 fdbd 	bl	80060e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800556e:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <xTaskResumeAll+0x118>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a37      	ldr	r2, [pc, #220]	@ (8005654 <xTaskResumeAll+0x118>)
 8005576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <xTaskResumeAll+0x118>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d161      	bne.n	8005644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005580:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <xTaskResumeAll+0x11c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d05d      	beq.n	8005644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005588:	e02e      	b.n	80055e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558a:	4b34      	ldr	r3, [pc, #208]	@ (800565c <xTaskResumeAll+0x120>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3318      	adds	r3, #24
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fb92 	bl	8004cc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fb8d 	bl	8004cc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055aa:	2201      	movs	r2, #1
 80055ac:	409a      	lsls	r2, r3
 80055ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <xTaskResumeAll+0x124>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <xTaskResumeAll+0x124>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <xTaskResumeAll+0x128>)
 80055c6:	441a      	add	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7ff fb19 	bl	8004c06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d8:	4b23      	ldr	r3, [pc, #140]	@ (8005668 <xTaskResumeAll+0x12c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <xTaskResumeAll+0x130>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055e8:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <xTaskResumeAll+0x120>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1cc      	bne.n	800558a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055f6:	f000 fb1b 	bl	8005c30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <xTaskResumeAll+0x134>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005606:	f000 f837 	bl	8005678 <xTaskIncrementTick>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005610:	4b16      	ldr	r3, [pc, #88]	@ (800566c <xTaskResumeAll+0x130>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3b01      	subs	r3, #1
 800561a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <xTaskResumeAll+0x134>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005628:	4b10      	ldr	r3, [pc, #64]	@ (800566c <xTaskResumeAll+0x130>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005634:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <xTaskResumeAll+0x138>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005644:	f000 fd82 	bl	800614c <vPortExitCritical>

	return xAlreadyYielded;
 8005648:	68bb      	ldr	r3, [r7, #8]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200004e4 	.word	0x200004e4
 8005658:	200004bc 	.word	0x200004bc
 800565c:	2000047c 	.word	0x2000047c
 8005660:	200004c4 	.word	0x200004c4
 8005664:	200003c0 	.word	0x200003c0
 8005668:	200003bc 	.word	0x200003bc
 800566c:	200004d0 	.word	0x200004d0
 8005670:	200004cc 	.word	0x200004cc
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005682:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <xTaskIncrementTick+0x148>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 808f 	bne.w	80057aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800568c:	4b4d      	ldr	r3, [pc, #308]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005694:	4a4b      	ldr	r2, [pc, #300]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d121      	bne.n	80056e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056a0:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xTaskIncrementTick+0x46>
 80056c2:	4b41      	ldr	r3, [pc, #260]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	4b40      	ldr	r3, [pc, #256]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3e      	ldr	r2, [pc, #248]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4a3e      	ldr	r2, [pc, #248]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b3e      	ldr	r3, [pc, #248]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	f000 faa6 	bl	8005c30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d348      	bcc.n	8005780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ee:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f8:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	601a      	str	r2, [r3, #0]
					break;
 8005700:	e03e      	b.n	8005780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005702:	4b31      	ldr	r3, [pc, #196]	@ (80057c8 <xTaskIncrementTick+0x150>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800571a:	4a2e      	ldr	r2, [pc, #184]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005720:	e02e      	b.n	8005780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3304      	adds	r3, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff faca 	bl	8004cc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	3318      	adds	r3, #24
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fac1 	bl	8004cc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	2201      	movs	r2, #1
 8005744:	409a      	lsls	r2, r3
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <xTaskIncrementTick+0x160>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	4a22      	ldr	r2, [pc, #136]	@ (80057d8 <xTaskIncrementTick+0x160>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <xTaskIncrementTick+0x164>)
 800575e:	441a      	add	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7ff fa4d 	bl	8004c06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d3b9      	bcc.n	80056ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800577e:	e7b6      	b.n	80056ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005780:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4915      	ldr	r1, [pc, #84]	@ (80057dc <xTaskIncrementTick+0x164>)
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d901      	bls.n	800579c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800579c:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <xTaskIncrementTick+0x16c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e004      	b.n	80057b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057b4:	697b      	ldr	r3, [r7, #20]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200004e4 	.word	0x200004e4
 80057c4:	200004c0 	.word	0x200004c0
 80057c8:	20000474 	.word	0x20000474
 80057cc:	20000478 	.word	0x20000478
 80057d0:	200004d4 	.word	0x200004d4
 80057d4:	200004dc 	.word	0x200004dc
 80057d8:	200004c4 	.word	0x200004c4
 80057dc:	200003c0 	.word	0x200003c0
 80057e0:	200003bc 	.word	0x200003bc
 80057e4:	200004d0 	.word	0x200004d0
 80057e8:	200004cc 	.word	0x200004cc

080057ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057f2:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <vTaskSwitchContext+0xa4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057fa:	4b26      	ldr	r3, [pc, #152]	@ (8005894 <vTaskSwitchContext+0xa8>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005800:	e040      	b.n	8005884 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005802:	4b24      	ldr	r3, [pc, #144]	@ (8005894 <vTaskSwitchContext+0xa8>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005808:	4b23      	ldr	r3, [pc, #140]	@ (8005898 <vTaskSwitchContext+0xac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	f1c3 031f 	rsb	r3, r3, #31
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	491f      	ldr	r1, [pc, #124]	@ (800589c <vTaskSwitchContext+0xb0>)
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <vTaskSwitchContext+0x5a>
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4a11      	ldr	r2, [pc, #68]	@ (800589c <vTaskSwitchContext+0xb0>)
 8005856:	4413      	add	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3308      	adds	r3, #8
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <vTaskSwitchContext+0x8e>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a07      	ldr	r2, [pc, #28]	@ (80058a0 <vTaskSwitchContext+0xb4>)
 8005882:	6013      	str	r3, [r2, #0]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	200004e4 	.word	0x200004e4
 8005894:	200004d0 	.word	0x200004d0
 8005898:	200004c4 	.word	0x200004c4
 800589c:	200003c0 	.word	0x200003c0
 80058a0:	200003bc 	.word	0x200003bc

080058a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60fb      	str	r3, [r7, #12]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058cc:	4b07      	ldr	r3, [pc, #28]	@ (80058ec <vTaskPlaceOnEventList+0x48>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3318      	adds	r3, #24
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff f9ba 	bl	8004c4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058da:	2101      	movs	r1, #1
 80058dc:	6838      	ldr	r0, [r7, #0]
 80058de:	f000 fa6d 	bl	8005dbc <prvAddCurrentTaskToDelayedList>
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200003bc 	.word	0x200003bc

080058f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3318      	adds	r3, #24
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff f9cc 	bl	8004cc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005928:	4b1d      	ldr	r3, [pc, #116]	@ (80059a0 <xTaskRemoveFromEventList+0xb0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d11c      	bne.n	800596a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff f9c3 	bl	8004cc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	2201      	movs	r2, #1
 8005940:	409a      	lsls	r2, r3
 8005942:	4b18      	ldr	r3, [pc, #96]	@ (80059a4 <xTaskRemoveFromEventList+0xb4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <xTaskRemoveFromEventList+0xb4>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4a13      	ldr	r2, [pc, #76]	@ (80059a8 <xTaskRemoveFromEventList+0xb8>)
 800595a:	441a      	add	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7ff f94f 	bl	8004c06 <vListInsertEnd>
 8005968:	e005      	b.n	8005976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3318      	adds	r3, #24
 800596e:	4619      	mov	r1, r3
 8005970:	480e      	ldr	r0, [pc, #56]	@ (80059ac <xTaskRemoveFromEventList+0xbc>)
 8005972:	f7ff f948 	bl	8004c06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <xTaskRemoveFromEventList+0xc0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	429a      	cmp	r2, r3
 8005982:	d905      	bls.n	8005990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <xTaskRemoveFromEventList+0xc4>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e001      	b.n	8005994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005994:	697b      	ldr	r3, [r7, #20]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200004e4 	.word	0x200004e4
 80059a4:	200004c4 	.word	0x200004c4
 80059a8:	200003c0 	.word	0x200003c0
 80059ac:	2000047c 	.word	0x2000047c
 80059b0:	200003bc 	.word	0x200003bc
 80059b4:	200004d0 	.word	0x200004d0

080059b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <vTaskInternalSetTimeOutState+0x24>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <vTaskInternalSetTimeOutState+0x28>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	200004d4 	.word	0x200004d4
 80059e0:	200004c0 	.word	0x200004c0

080059e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10b      	bne.n	8005a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	60fb      	str	r3, [r7, #12]
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop
 8005a28:	e7fd      	b.n	8005a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a2a:	f000 fb5d 	bl	80060e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <xTaskCheckForTimeOut+0xc0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d102      	bne.n	8005a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e023      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	@ (8005aa8 <xTaskCheckForTimeOut+0xc4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d007      	beq.n	8005a6a <xTaskCheckForTimeOut+0x86>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d302      	bcc.n	8005a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	e015      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d20b      	bcs.n	8005a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff99 	bl	80059b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e004      	b.n	8005a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a96:	f000 fb59 	bl	800614c <vPortExitCritical>

	return xReturn;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	200004c0 	.word	0x200004c0
 8005aa8:	200004d4 	.word	0x200004d4

08005aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	@ (8005ac0 <vTaskMissedYield+0x14>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	200004d0 	.word	0x200004d0

08005ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005acc:	f000 f852 	bl	8005b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <prvIdleTask+0x28>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d9f9      	bls.n	8005acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <prvIdleTask+0x2c>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ae8:	e7f0      	b.n	8005acc <prvIdleTask+0x8>
 8005aea:	bf00      	nop
 8005aec:	200003c0 	.word	0x200003c0
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e00c      	b.n	8005b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a12      	ldr	r2, [pc, #72]	@ (8005b54 <prvInitialiseTaskLists+0x60>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff f84c 	bl	8004bac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d9ef      	bls.n	8005b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b20:	480d      	ldr	r0, [pc, #52]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b22:	f7ff f843 	bl	8004bac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b26:	480d      	ldr	r0, [pc, #52]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b28:	f7ff f840 	bl	8004bac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b2c:	480c      	ldr	r0, [pc, #48]	@ (8005b60 <prvInitialiseTaskLists+0x6c>)
 8005b2e:	f7ff f83d 	bl	8004bac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b32:	480c      	ldr	r0, [pc, #48]	@ (8005b64 <prvInitialiseTaskLists+0x70>)
 8005b34:	f7ff f83a 	bl	8004bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b38:	480b      	ldr	r0, [pc, #44]	@ (8005b68 <prvInitialiseTaskLists+0x74>)
 8005b3a:	f7ff f837 	bl	8004bac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <prvInitialiseTaskLists+0x78>)
 8005b40:	4a05      	ldr	r2, [pc, #20]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <prvInitialiseTaskLists+0x7c>)
 8005b46:	4a05      	ldr	r2, [pc, #20]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200003c0 	.word	0x200003c0
 8005b58:	2000044c 	.word	0x2000044c
 8005b5c:	20000460 	.word	0x20000460
 8005b60:	2000047c 	.word	0x2000047c
 8005b64:	20000490 	.word	0x20000490
 8005b68:	200004a8 	.word	0x200004a8
 8005b6c:	20000474 	.word	0x20000474
 8005b70:	20000478 	.word	0x20000478

08005b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7a:	e019      	b.n	8005bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b7c:	f000 fab4 	bl	80060e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <prvCheckTasksWaitingTermination+0x50>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff f897 	bl	8004cc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ba6:	f000 fad1 	bl	800614c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f810 	bl	8005bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e1      	bne.n	8005b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000490 	.word	0x20000490
 8005bc8:	200004bc 	.word	0x200004bc
 8005bcc:	200004a4 	.word	0x200004a4

08005bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fc2c 	bl	8006444 <vPortFree>
				vPortFree( pxTCB );
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fc29 	bl	8006444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bf2:	e019      	b.n	8005c28 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d103      	bne.n	8005c06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fc20 	bl	8006444 <vPortFree>
	}
 8005c04:	e010      	b.n	8005c28 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d00b      	beq.n	8005c28 <prvDeleteTCB+0x58>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <prvDeleteTCB+0x54>
	}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c36:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <prvResetNextTaskUnblockTime+0x38>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <prvResetNextTaskUnblockTime+0x3c>)
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c48:	e008      	b.n	8005c5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <prvResetNextTaskUnblockTime+0x38>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a04      	ldr	r2, [pc, #16]	@ (8005c6c <prvResetNextTaskUnblockTime+0x3c>)
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	20000474 	.word	0x20000474
 8005c6c:	200004dc 	.word	0x200004dc

08005c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <xTaskGetSchedulerState+0x34>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e008      	b.n	8005c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c84:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <xTaskGetSchedulerState+0x38>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	e001      	b.n	8005c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c96:	687b      	ldr	r3, [r7, #4]
	}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	200004c8 	.word	0x200004c8
 8005ca8:	200004e4 	.word	0x200004e4

08005cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d070      	beq.n	8005da4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8005db0 <xTaskPriorityDisinherit+0x104>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d00b      	beq.n	8005ce4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60bb      	str	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d08:	1e5a      	subs	r2, r3, #1
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d044      	beq.n	8005da4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d140      	bne.n	8005da4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe ffca 	bl	8004cc0 <uxListRemove>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d115      	bne.n	8005d5e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	491f      	ldr	r1, [pc, #124]	@ (8005db4 <xTaskPriorityDisinherit+0x108>)
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xTaskPriorityDisinherit+0xb2>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43da      	mvns	r2, r3
 8005d54:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <xTaskPriorityDisinherit+0x10c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <xTaskPriorityDisinherit+0x10c>)
 8005d5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	f1c3 0207 	rsb	r2, r3, #7
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	2201      	movs	r2, #1
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <xTaskPriorityDisinherit+0x10c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	4a0d      	ldr	r2, [pc, #52]	@ (8005db8 <xTaskPriorityDisinherit+0x10c>)
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4a08      	ldr	r2, [pc, #32]	@ (8005db4 <xTaskPriorityDisinherit+0x108>)
 8005d92:	441a      	add	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe ff33 	bl	8004c06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005da4:	697b      	ldr	r3, [r7, #20]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	200003bc 	.word	0x200003bc
 8005db4:	200003c0 	.word	0x200003c0
 8005db8:	200004c4 	.word	0x200004c4

08005dbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dc6:	4b29      	ldr	r3, [pc, #164]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	4b28      	ldr	r3, [pc, #160]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe ff74 	bl	8004cc0 <uxListRemove>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005dde:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	2201      	movs	r2, #1
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4013      	ands	r3, r2
 8005df2:	4a20      	ldr	r2, [pc, #128]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d10a      	bne.n	8005e14 <prvAddCurrentTaskToDelayedList+0x58>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e04:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	481a      	ldr	r0, [pc, #104]	@ (8005e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e0e:	f7fe fefa 	bl	8004c06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e12:	e026      	b.n	8005e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e1c:	4b14      	ldr	r3, [pc, #80]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d209      	bcs.n	8005e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b0f      	ldr	r3, [pc, #60]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fe ff08 	bl	8004c4e <vListInsert>
}
 8005e3e:	e010      	b.n	8005e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e40:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b0a      	ldr	r3, [pc, #40]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f7fe fefe 	bl	8004c4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e52:	4b0c      	ldr	r3, [pc, #48]	@ (8005e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d202      	bcs.n	8005e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e5c:	4a09      	ldr	r2, [pc, #36]	@ (8005e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6013      	str	r3, [r2, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200004c0 	.word	0x200004c0
 8005e70:	200003bc 	.word	0x200003bc
 8005e74:	200004c4 	.word	0x200004c4
 8005e78:	200004a8 	.word	0x200004a8
 8005e7c:	20000478 	.word	0x20000478
 8005e80:	20000474 	.word	0x20000474
 8005e84:	200004dc 	.word	0x200004dc

08005e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b04      	subs	r3, #4
 8005e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f023 0201 	bic.w	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005eec <pxPortInitialiseStack+0x64>)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3b14      	subs	r3, #20
 8005ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f06f 0202 	mvn.w	r2, #2
 8005ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b20      	subs	r3, #32
 8005edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	08005ef1 	.word	0x08005ef1

08005ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005efa:	4b13      	ldr	r3, [pc, #76]	@ (8005f48 <prvTaskExitError+0x58>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d00b      	beq.n	8005f1c <prvTaskExitError+0x2c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <prvTaskExitError+0x28>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60bb      	str	r3, [r7, #8]
}
 8005f2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f30:	bf00      	nop
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0fc      	beq.n	8005f32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000018 	.word	0x20000018
 8005f4c:	00000000 	.word	0x00000000

08005f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f50:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <pxCurrentTCBConst2>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	6808      	ldr	r0, [r1, #0]
 8005f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	f380 8809 	msr	PSP, r0
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8811 	msr	BASEPRI, r0
 8005f6a:	4770      	bx	lr
 8005f6c:	f3af 8000 	nop.w

08005f70 <pxCurrentTCBConst2>:
 8005f70:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop

08005f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f78:	4808      	ldr	r0, [pc, #32]	@ (8005f9c <prvPortStartFirstTask+0x24>)
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	6800      	ldr	r0, [r0, #0]
 8005f7e:	f380 8808 	msr	MSP, r0
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8814 	msr	CONTROL, r0
 8005f8a:	b662      	cpsie	i
 8005f8c:	b661      	cpsie	f
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	df00      	svc	0
 8005f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f9a:	bf00      	nop
 8005f9c:	e000ed08 	.word	0xe000ed08

08005fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fa6:	4b47      	ldr	r3, [pc, #284]	@ (80060c4 <xPortStartScheduler+0x124>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a47      	ldr	r2, [pc, #284]	@ (80060c8 <xPortStartScheduler+0x128>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10b      	bne.n	8005fc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80060c4 <xPortStartScheduler+0x124>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80060cc <xPortStartScheduler+0x12c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10b      	bne.n	8005fea <xPortStartScheduler+0x4a>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	613b      	str	r3, [r7, #16]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fea:	4b39      	ldr	r3, [pc, #228]	@ (80060d0 <xPortStartScheduler+0x130>)
 8005fec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	22ff      	movs	r2, #255	@ 0xff
 8005ffa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800600c:	b2da      	uxtb	r2, r3
 800600e:	4b31      	ldr	r3, [pc, #196]	@ (80060d4 <xPortStartScheduler+0x134>)
 8006010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006012:	4b31      	ldr	r3, [pc, #196]	@ (80060d8 <xPortStartScheduler+0x138>)
 8006014:	2207      	movs	r2, #7
 8006016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006018:	e009      	b.n	800602e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800601a:	4b2f      	ldr	r3, [pc, #188]	@ (80060d8 <xPortStartScheduler+0x138>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3b01      	subs	r3, #1
 8006020:	4a2d      	ldr	r2, [pc, #180]	@ (80060d8 <xPortStartScheduler+0x138>)
 8006022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b80      	cmp	r3, #128	@ 0x80
 8006038:	d0ef      	beq.n	800601a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800603a:	4b27      	ldr	r3, [pc, #156]	@ (80060d8 <xPortStartScheduler+0x138>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1c3 0307 	rsb	r3, r3, #7
 8006042:	2b04      	cmp	r3, #4
 8006044:	d00b      	beq.n	800605e <xPortStartScheduler+0xbe>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60bb      	str	r3, [r7, #8]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800605e:	4b1e      	ldr	r3, [pc, #120]	@ (80060d8 <xPortStartScheduler+0x138>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <xPortStartScheduler+0x138>)
 8006066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006068:	4b1b      	ldr	r3, [pc, #108]	@ (80060d8 <xPortStartScheduler+0x138>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006070:	4a19      	ldr	r2, [pc, #100]	@ (80060d8 <xPortStartScheduler+0x138>)
 8006072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800607c:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <xPortStartScheduler+0x13c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <xPortStartScheduler+0x13c>)
 8006082:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006088:	4b14      	ldr	r3, [pc, #80]	@ (80060dc <xPortStartScheduler+0x13c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a13      	ldr	r2, [pc, #76]	@ (80060dc <xPortStartScheduler+0x13c>)
 800608e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006094:	f000 f8da 	bl	800624c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006098:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <xPortStartScheduler+0x140>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800609e:	f000 f8f9 	bl	8006294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060a2:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <xPortStartScheduler+0x144>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a0f      	ldr	r2, [pc, #60]	@ (80060e4 <xPortStartScheduler+0x144>)
 80060a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060ae:	f7ff ff63 	bl	8005f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060b2:	f7ff fb9b 	bl	80057ec <vTaskSwitchContext>
	prvTaskExitError();
 80060b6:	f7ff ff1b 	bl	8005ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	e000ed00 	.word	0xe000ed00
 80060c8:	410fc271 	.word	0x410fc271
 80060cc:	410fc270 	.word	0x410fc270
 80060d0:	e000e400 	.word	0xe000e400
 80060d4:	200004e8 	.word	0x200004e8
 80060d8:	200004ec 	.word	0x200004ec
 80060dc:	e000ed20 	.word	0xe000ed20
 80060e0:	20000018 	.word	0x20000018
 80060e4:	e000ef34 	.word	0xe000ef34

080060e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006102:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <vPortEnterCritical+0x5c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	4a0e      	ldr	r2, [pc, #56]	@ (8006144 <vPortEnterCritical+0x5c>)
 800610a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800610c:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <vPortEnterCritical+0x5c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d110      	bne.n	8006136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006114:	4b0c      	ldr	r3, [pc, #48]	@ (8006148 <vPortEnterCritical+0x60>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <vPortEnterCritical+0x4e>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	603b      	str	r3, [r7, #0]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vPortEnterCritical+0x4a>
	}
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20000018 	.word	0x20000018
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006152:	4b12      	ldr	r3, [pc, #72]	@ (800619c <vPortExitCritical+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <vPortExitCritical+0x26>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	607b      	str	r3, [r7, #4]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006172:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <vPortExitCritical+0x50>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a08      	ldr	r2, [pc, #32]	@ (800619c <vPortExitCritical+0x50>)
 800617a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <vPortExitCritical+0x50>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <vPortExitCritical+0x44>
 8006184:	2300      	movs	r3, #0
 8006186:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800618e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000018 	.word	0x20000018

080061a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061a0:	f3ef 8009 	mrs	r0, PSP
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <pxCurrentTCBConst>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	f01e 0f10 	tst.w	lr, #16
 80061b0:	bf08      	it	eq
 80061b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	6010      	str	r0, [r2, #0]
 80061bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061c4:	f380 8811 	msr	BASEPRI, r0
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f7ff fb0c 	bl	80057ec <vTaskSwitchContext>
 80061d4:	f04f 0000 	mov.w	r0, #0
 80061d8:	f380 8811 	msr	BASEPRI, r0
 80061dc:	bc09      	pop	{r0, r3}
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	6808      	ldr	r0, [r1, #0]
 80061e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e6:	f01e 0f10 	tst.w	lr, #16
 80061ea:	bf08      	it	eq
 80061ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061f0:	f380 8809 	msr	PSP, r0
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w

08006200 <pxCurrentTCBConst>:
 8006200:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
}
 8006220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006222:	f7ff fa29 	bl	8005678 <xTaskIncrementTick>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800622c:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <xPortSysTickHandler+0x40>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	f383 8811 	msr	BASEPRI, r3
}
 800623e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006250:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <vPortSetupTimerInterrupt+0x34>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <vPortSetupTimerInterrupt+0x38>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <vPortSetupTimerInterrupt+0x3c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a0a      	ldr	r2, [pc, #40]	@ (800628c <vPortSetupTimerInterrupt+0x40>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	4a09      	ldr	r2, [pc, #36]	@ (8006290 <vPortSetupTimerInterrupt+0x44>)
 800626a:	3b01      	subs	r3, #1
 800626c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800626e:	4b04      	ldr	r3, [pc, #16]	@ (8006280 <vPortSetupTimerInterrupt+0x34>)
 8006270:	2207      	movs	r2, #7
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	e000e010 	.word	0xe000e010
 8006284:	e000e018 	.word	0xe000e018
 8006288:	2000000c 	.word	0x2000000c
 800628c:	10624dd3 	.word	0x10624dd3
 8006290:	e000e014 	.word	0xe000e014

08006294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062a4 <vPortEnableVFP+0x10>
 8006298:	6801      	ldr	r1, [r0, #0]
 800629a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800629e:	6001      	str	r1, [r0, #0]
 80062a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062a2:	bf00      	nop
 80062a4:	e000ed88 	.word	0xe000ed88

080062a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062b4:	f7ff f934 	bl	8005520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062b8:	4b5c      	ldr	r3, [pc, #368]	@ (800642c <pvPortMalloc+0x184>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062c0:	f000 f924 	bl	800650c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006430 <pvPortMalloc+0x188>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8095 	bne.w	80063fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01e      	beq.n	8006316 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80062d8:	2208      	movs	r2, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d015      	beq.n	8006316 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f023 0307 	bic.w	r3, r3, #7
 80062f0:	3308      	adds	r3, #8
 80062f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <pvPortMalloc+0x6e>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d06f      	beq.n	80063fc <pvPortMalloc+0x154>
 800631c:	4b45      	ldr	r3, [pc, #276]	@ (8006434 <pvPortMalloc+0x18c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d86a      	bhi.n	80063fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006326:	4b44      	ldr	r3, [pc, #272]	@ (8006438 <pvPortMalloc+0x190>)
 8006328:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800632a:	4b43      	ldr	r3, [pc, #268]	@ (8006438 <pvPortMalloc+0x190>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006330:	e004      	b.n	800633c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d903      	bls.n	800634e <pvPortMalloc+0xa6>
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f1      	bne.n	8006332 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800634e:	4b37      	ldr	r3, [pc, #220]	@ (800642c <pvPortMalloc+0x184>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006354:	429a      	cmp	r2, r3
 8006356:	d051      	beq.n	80063fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2208      	movs	r2, #8
 800635e:	4413      	add	r3, r2
 8006360:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	2308      	movs	r3, #8
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	429a      	cmp	r2, r3
 8006378:	d920      	bls.n	80063bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800637a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <pvPortMalloc+0xfc>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	613b      	str	r3, [r7, #16]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063b6:	69b8      	ldr	r0, [r7, #24]
 80063b8:	f000 f90a 	bl	80065d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006434 <pvPortMalloc+0x18c>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <pvPortMalloc+0x18c>)
 80063c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006434 <pvPortMalloc+0x18c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b1b      	ldr	r3, [pc, #108]	@ (800643c <pvPortMalloc+0x194>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d203      	bcs.n	80063de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063d6:	4b17      	ldr	r3, [pc, #92]	@ (8006434 <pvPortMalloc+0x18c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a18      	ldr	r2, [pc, #96]	@ (800643c <pvPortMalloc+0x194>)
 80063dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <pvPortMalloc+0x188>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063f2:	4b13      	ldr	r3, [pc, #76]	@ (8006440 <pvPortMalloc+0x198>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	4a11      	ldr	r2, [pc, #68]	@ (8006440 <pvPortMalloc+0x198>)
 80063fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063fc:	f7ff f89e 	bl	800553c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <pvPortMalloc+0x17a>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	60fb      	str	r3, [r7, #12]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <pvPortMalloc+0x176>
	return pvReturn;
 8006422:	69fb      	ldr	r3, [r7, #28]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3728      	adds	r7, #40	@ 0x28
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200010b0 	.word	0x200010b0
 8006430:	200010c4 	.word	0x200010c4
 8006434:	200010b4 	.word	0x200010b4
 8006438:	200010a8 	.word	0x200010a8
 800643c:	200010b8 	.word	0x200010b8
 8006440:	200010bc 	.word	0x200010bc

08006444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d04f      	beq.n	80064f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006456:	2308      	movs	r3, #8
 8006458:	425b      	negs	r3, r3
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4413      	add	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <vPortFree+0xbc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <vPortFree+0x46>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	60fb      	str	r3, [r7, #12]
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <vPortFree+0x66>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60bb      	str	r3, [r7, #8]
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	e7fd      	b.n	80064a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	4b14      	ldr	r3, [pc, #80]	@ (8006500 <vPortFree+0xbc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01e      	beq.n	80064f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11a      	bne.n	80064f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <vPortFree+0xbc>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	401a      	ands	r2, r3
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064d0:	f7ff f826 	bl	8005520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <vPortFree+0xc0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	4a09      	ldr	r2, [pc, #36]	@ (8006504 <vPortFree+0xc0>)
 80064e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f000 f874 	bl	80065d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064e8:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <vPortFree+0xc4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a06      	ldr	r2, [pc, #24]	@ (8006508 <vPortFree+0xc4>)
 80064f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064f2:	f7ff f823 	bl	800553c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200010c4 	.word	0x200010c4
 8006504:	200010b4 	.word	0x200010b4
 8006508:	200010c0 	.word	0x200010c0

0800650c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006512:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006518:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <prvHeapInit+0xac>)
 800651a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3307      	adds	r3, #7
 800652a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	4a1f      	ldr	r2, [pc, #124]	@ (80065b8 <prvHeapInit+0xac>)
 800653c:	4413      	add	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006544:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <prvHeapInit+0xb0>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800654a:	4b1c      	ldr	r3, [pc, #112]	@ (80065bc <prvHeapInit+0xb0>)
 800654c:	2200      	movs	r2, #0
 800654e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4413      	add	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006558:	2208      	movs	r2, #8
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1a9b      	subs	r3, r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0307 	bic.w	r3, r3, #7
 8006566:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <prvHeapInit+0xb4>)
 800656c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800656e:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <prvHeapInit+0xb4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006576:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <prvHeapInit+0xb4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800658c:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <prvHeapInit+0xb4>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a0a      	ldr	r2, [pc, #40]	@ (80065c4 <prvHeapInit+0xb8>)
 800659a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4a09      	ldr	r2, [pc, #36]	@ (80065c8 <prvHeapInit+0xbc>)
 80065a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065a4:	4b09      	ldr	r3, [pc, #36]	@ (80065cc <prvHeapInit+0xc0>)
 80065a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80065aa:	601a      	str	r2, [r3, #0]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	200004f0 	.word	0x200004f0
 80065bc:	200010a8 	.word	0x200010a8
 80065c0:	200010b0 	.word	0x200010b0
 80065c4:	200010b8 	.word	0x200010b8
 80065c8:	200010b4 	.word	0x200010b4
 80065cc:	200010c4 	.word	0x200010c4

080065d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065d8:	4b28      	ldr	r3, [pc, #160]	@ (800667c <prvInsertBlockIntoFreeList+0xac>)
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e002      	b.n	80065e4 <prvInsertBlockIntoFreeList+0x14>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d8f7      	bhi.n	80065de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d108      	bne.n	8006612 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	441a      	add	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d118      	bne.n	8006658 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b15      	ldr	r3, [pc, #84]	@ (8006680 <prvInsertBlockIntoFreeList+0xb0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d00d      	beq.n	800664e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	441a      	add	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e008      	b.n	8006660 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800664e:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <prvInsertBlockIntoFreeList+0xb0>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e003      	b.n	8006660 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	429a      	cmp	r2, r3
 8006666:	d002      	beq.n	800666e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	200010a8 	.word	0x200010a8
 8006680:	200010b0 	.word	0x200010b0

08006684 <malloc>:
 8006684:	4b02      	ldr	r3, [pc, #8]	@ (8006690 <malloc+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f000 b82d 	b.w	80066e8 <_malloc_r>
 800668e:	bf00      	nop
 8006690:	2000001c 	.word	0x2000001c

08006694 <free>:
 8006694:	4b02      	ldr	r3, [pc, #8]	@ (80066a0 <free+0xc>)
 8006696:	4601      	mov	r1, r0
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	f000 b9bf 	b.w	8006a1c <_free_r>
 800669e:	bf00      	nop
 80066a0:	2000001c 	.word	0x2000001c

080066a4 <sbrk_aligned>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4e0f      	ldr	r6, [pc, #60]	@ (80066e4 <sbrk_aligned+0x40>)
 80066a8:	460c      	mov	r4, r1
 80066aa:	6831      	ldr	r1, [r6, #0]
 80066ac:	4605      	mov	r5, r0
 80066ae:	b911      	cbnz	r1, 80066b6 <sbrk_aligned+0x12>
 80066b0:	f000 f96a 	bl	8006988 <_sbrk_r>
 80066b4:	6030      	str	r0, [r6, #0]
 80066b6:	4621      	mov	r1, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 f965 	bl	8006988 <_sbrk_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d103      	bne.n	80066ca <sbrk_aligned+0x26>
 80066c2:	f04f 34ff 	mov.w	r4, #4294967295
 80066c6:	4620      	mov	r0, r4
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	1cc4      	adds	r4, r0, #3
 80066cc:	f024 0403 	bic.w	r4, r4, #3
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d0f8      	beq.n	80066c6 <sbrk_aligned+0x22>
 80066d4:	1a21      	subs	r1, r4, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f956 	bl	8006988 <_sbrk_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	d1f2      	bne.n	80066c6 <sbrk_aligned+0x22>
 80066e0:	e7ef      	b.n	80066c2 <sbrk_aligned+0x1e>
 80066e2:	bf00      	nop
 80066e4:	200010c8 	.word	0x200010c8

080066e8 <_malloc_r>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	1ccd      	adds	r5, r1, #3
 80066ee:	f025 0503 	bic.w	r5, r5, #3
 80066f2:	3508      	adds	r5, #8
 80066f4:	2d0c      	cmp	r5, #12
 80066f6:	bf38      	it	cc
 80066f8:	250c      	movcc	r5, #12
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	4606      	mov	r6, r0
 80066fe:	db01      	blt.n	8006704 <_malloc_r+0x1c>
 8006700:	42a9      	cmp	r1, r5
 8006702:	d904      	bls.n	800670e <_malloc_r+0x26>
 8006704:	230c      	movs	r3, #12
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067e4 <_malloc_r+0xfc>
 8006712:	f000 f869 	bl	80067e8 <__malloc_lock>
 8006716:	f8d8 3000 	ldr.w	r3, [r8]
 800671a:	461c      	mov	r4, r3
 800671c:	bb44      	cbnz	r4, 8006770 <_malloc_r+0x88>
 800671e:	4629      	mov	r1, r5
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff ffbf 	bl	80066a4 <sbrk_aligned>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	4604      	mov	r4, r0
 800672a:	d158      	bne.n	80067de <_malloc_r+0xf6>
 800672c:	f8d8 4000 	ldr.w	r4, [r8]
 8006730:	4627      	mov	r7, r4
 8006732:	2f00      	cmp	r7, #0
 8006734:	d143      	bne.n	80067be <_malloc_r+0xd6>
 8006736:	2c00      	cmp	r4, #0
 8006738:	d04b      	beq.n	80067d2 <_malloc_r+0xea>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	4639      	mov	r1, r7
 800673e:	4630      	mov	r0, r6
 8006740:	eb04 0903 	add.w	r9, r4, r3
 8006744:	f000 f920 	bl	8006988 <_sbrk_r>
 8006748:	4581      	cmp	r9, r0
 800674a:	d142      	bne.n	80067d2 <_malloc_r+0xea>
 800674c:	6821      	ldr	r1, [r4, #0]
 800674e:	1a6d      	subs	r5, r5, r1
 8006750:	4629      	mov	r1, r5
 8006752:	4630      	mov	r0, r6
 8006754:	f7ff ffa6 	bl	80066a4 <sbrk_aligned>
 8006758:	3001      	adds	r0, #1
 800675a:	d03a      	beq.n	80067d2 <_malloc_r+0xea>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	442b      	add	r3, r5
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	f8d8 3000 	ldr.w	r3, [r8]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	bb62      	cbnz	r2, 80067c4 <_malloc_r+0xdc>
 800676a:	f8c8 7000 	str.w	r7, [r8]
 800676e:	e00f      	b.n	8006790 <_malloc_r+0xa8>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	1b52      	subs	r2, r2, r5
 8006774:	d420      	bmi.n	80067b8 <_malloc_r+0xd0>
 8006776:	2a0b      	cmp	r2, #11
 8006778:	d917      	bls.n	80067aa <_malloc_r+0xc2>
 800677a:	1961      	adds	r1, r4, r5
 800677c:	42a3      	cmp	r3, r4
 800677e:	6025      	str	r5, [r4, #0]
 8006780:	bf18      	it	ne
 8006782:	6059      	strne	r1, [r3, #4]
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	bf08      	it	eq
 8006788:	f8c8 1000 	streq.w	r1, [r8]
 800678c:	5162      	str	r2, [r4, r5]
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f82f 	bl	80067f4 <__malloc_unlock>
 8006796:	f104 000b 	add.w	r0, r4, #11
 800679a:	1d23      	adds	r3, r4, #4
 800679c:	f020 0007 	bic.w	r0, r0, #7
 80067a0:	1ac2      	subs	r2, r0, r3
 80067a2:	bf1c      	itt	ne
 80067a4:	1a1b      	subne	r3, r3, r0
 80067a6:	50a3      	strne	r3, [r4, r2]
 80067a8:	e7af      	b.n	800670a <_malloc_r+0x22>
 80067aa:	6862      	ldr	r2, [r4, #4]
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	bf0c      	ite	eq
 80067b0:	f8c8 2000 	streq.w	r2, [r8]
 80067b4:	605a      	strne	r2, [r3, #4]
 80067b6:	e7eb      	b.n	8006790 <_malloc_r+0xa8>
 80067b8:	4623      	mov	r3, r4
 80067ba:	6864      	ldr	r4, [r4, #4]
 80067bc:	e7ae      	b.n	800671c <_malloc_r+0x34>
 80067be:	463c      	mov	r4, r7
 80067c0:	687f      	ldr	r7, [r7, #4]
 80067c2:	e7b6      	b.n	8006732 <_malloc_r+0x4a>
 80067c4:	461a      	mov	r2, r3
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d1fb      	bne.n	80067c4 <_malloc_r+0xdc>
 80067cc:	2300      	movs	r3, #0
 80067ce:	6053      	str	r3, [r2, #4]
 80067d0:	e7de      	b.n	8006790 <_malloc_r+0xa8>
 80067d2:	230c      	movs	r3, #12
 80067d4:	6033      	str	r3, [r6, #0]
 80067d6:	4630      	mov	r0, r6
 80067d8:	f000 f80c 	bl	80067f4 <__malloc_unlock>
 80067dc:	e794      	b.n	8006708 <_malloc_r+0x20>
 80067de:	6005      	str	r5, [r0, #0]
 80067e0:	e7d6      	b.n	8006790 <_malloc_r+0xa8>
 80067e2:	bf00      	nop
 80067e4:	200010cc 	.word	0x200010cc

080067e8 <__malloc_lock>:
 80067e8:	4801      	ldr	r0, [pc, #4]	@ (80067f0 <__malloc_lock+0x8>)
 80067ea:	f000 b907 	b.w	80069fc <__retarget_lock_acquire_recursive>
 80067ee:	bf00      	nop
 80067f0:	2000120c 	.word	0x2000120c

080067f4 <__malloc_unlock>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__malloc_unlock+0x8>)
 80067f6:	f000 b902 	b.w	80069fe <__retarget_lock_release_recursive>
 80067fa:	bf00      	nop
 80067fc:	2000120c 	.word	0x2000120c

08006800 <realloc>:
 8006800:	4b02      	ldr	r3, [pc, #8]	@ (800680c <realloc+0xc>)
 8006802:	460a      	mov	r2, r1
 8006804:	4601      	mov	r1, r0
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	f000 b802 	b.w	8006810 <_realloc_r>
 800680c:	2000001c 	.word	0x2000001c

08006810 <_realloc_r>:
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	4607      	mov	r7, r0
 8006816:	4614      	mov	r4, r2
 8006818:	460d      	mov	r5, r1
 800681a:	b921      	cbnz	r1, 8006826 <_realloc_r+0x16>
 800681c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	4611      	mov	r1, r2
 8006822:	f7ff bf61 	b.w	80066e8 <_malloc_r>
 8006826:	b92a      	cbnz	r2, 8006834 <_realloc_r+0x24>
 8006828:	f000 f8f8 	bl	8006a1c <_free_r>
 800682c:	4625      	mov	r5, r4
 800682e:	4628      	mov	r0, r5
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	f000 f93c 	bl	8006ab0 <_malloc_usable_size_r>
 8006838:	4284      	cmp	r4, r0
 800683a:	4606      	mov	r6, r0
 800683c:	d802      	bhi.n	8006844 <_realloc_r+0x34>
 800683e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006842:	d8f4      	bhi.n	800682e <_realloc_r+0x1e>
 8006844:	4621      	mov	r1, r4
 8006846:	4638      	mov	r0, r7
 8006848:	f7ff ff4e 	bl	80066e8 <_malloc_r>
 800684c:	4680      	mov	r8, r0
 800684e:	b908      	cbnz	r0, 8006854 <_realloc_r+0x44>
 8006850:	4645      	mov	r5, r8
 8006852:	e7ec      	b.n	800682e <_realloc_r+0x1e>
 8006854:	42b4      	cmp	r4, r6
 8006856:	4622      	mov	r2, r4
 8006858:	4629      	mov	r1, r5
 800685a:	bf28      	it	cs
 800685c:	4632      	movcs	r2, r6
 800685e:	f000 f8cf 	bl	8006a00 <memcpy>
 8006862:	4629      	mov	r1, r5
 8006864:	4638      	mov	r0, r7
 8006866:	f000 f8d9 	bl	8006a1c <_free_r>
 800686a:	e7f1      	b.n	8006850 <_realloc_r+0x40>

0800686c <sniprintf>:
 800686c:	b40c      	push	{r2, r3}
 800686e:	b530      	push	{r4, r5, lr}
 8006870:	4b18      	ldr	r3, [pc, #96]	@ (80068d4 <sniprintf+0x68>)
 8006872:	1e0c      	subs	r4, r1, #0
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	b09d      	sub	sp, #116	@ 0x74
 8006878:	da08      	bge.n	800688c <sniprintf+0x20>
 800687a:	238b      	movs	r3, #139	@ 0x8b
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	b01d      	add	sp, #116	@ 0x74
 8006884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006888:	b002      	add	sp, #8
 800688a:	4770      	bx	lr
 800688c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	931b      	str	r3, [sp, #108]	@ 0x6c
 800689a:	bf14      	ite	ne
 800689c:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068a0:	4623      	moveq	r3, r4
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	9307      	str	r3, [sp, #28]
 80068a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068aa:	9002      	str	r0, [sp, #8]
 80068ac:	9006      	str	r0, [sp, #24]
 80068ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068b4:	ab21      	add	r3, sp, #132	@ 0x84
 80068b6:	a902      	add	r1, sp, #8
 80068b8:	4628      	mov	r0, r5
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	f000 f95c 	bl	8006b78 <_svfiprintf_r>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	bfbc      	itt	lt
 80068c4:	238b      	movlt	r3, #139	@ 0x8b
 80068c6:	602b      	strlt	r3, [r5, #0]
 80068c8:	2c00      	cmp	r4, #0
 80068ca:	d0da      	beq.n	8006882 <sniprintf+0x16>
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e7d6      	b.n	8006882 <sniprintf+0x16>
 80068d4:	2000001c 	.word	0x2000001c

080068d8 <siprintf>:
 80068d8:	b40e      	push	{r1, r2, r3}
 80068da:	b510      	push	{r4, lr}
 80068dc:	b09d      	sub	sp, #116	@ 0x74
 80068de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068e0:	9002      	str	r0, [sp, #8]
 80068e2:	9006      	str	r0, [sp, #24]
 80068e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068e8:	480a      	ldr	r0, [pc, #40]	@ (8006914 <siprintf+0x3c>)
 80068ea:	9107      	str	r1, [sp, #28]
 80068ec:	9104      	str	r1, [sp, #16]
 80068ee:	490a      	ldr	r1, [pc, #40]	@ (8006918 <siprintf+0x40>)
 80068f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f4:	9105      	str	r1, [sp, #20]
 80068f6:	2400      	movs	r4, #0
 80068f8:	a902      	add	r1, sp, #8
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006900:	f000 f93a 	bl	8006b78 <_svfiprintf_r>
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	701c      	strb	r4, [r3, #0]
 8006908:	b01d      	add	sp, #116	@ 0x74
 800690a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800690e:	b003      	add	sp, #12
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000001c 	.word	0x2000001c
 8006918:	ffff0208 	.word	0xffff0208

0800691c <siscanf>:
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b570      	push	{r4, r5, r6, lr}
 8006920:	b09d      	sub	sp, #116	@ 0x74
 8006922:	ac21      	add	r4, sp, #132	@ 0x84
 8006924:	2500      	movs	r5, #0
 8006926:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800692a:	f854 6b04 	ldr.w	r6, [r4], #4
 800692e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006932:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006934:	9002      	str	r0, [sp, #8]
 8006936:	9006      	str	r0, [sp, #24]
 8006938:	f7f9 fc4a 	bl	80001d0 <strlen>
 800693c:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <siscanf+0x50>)
 800693e:	9003      	str	r0, [sp, #12]
 8006940:	9007      	str	r0, [sp, #28]
 8006942:	480b      	ldr	r0, [pc, #44]	@ (8006970 <siscanf+0x54>)
 8006944:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800694a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800694e:	4632      	mov	r2, r6
 8006950:	4623      	mov	r3, r4
 8006952:	a902      	add	r1, sp, #8
 8006954:	6800      	ldr	r0, [r0, #0]
 8006956:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006958:	9514      	str	r5, [sp, #80]	@ 0x50
 800695a:	9401      	str	r4, [sp, #4]
 800695c:	f000 fa62 	bl	8006e24 <__ssvfiscanf_r>
 8006960:	b01d      	add	sp, #116	@ 0x74
 8006962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006966:	b003      	add	sp, #12
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	08006975 	.word	0x08006975
 8006970:	2000001c 	.word	0x2000001c

08006974 <__seofread>:
 8006974:	2000      	movs	r0, #0
 8006976:	4770      	bx	lr

08006978 <memset>:
 8006978:	4402      	add	r2, r0
 800697a:	4603      	mov	r3, r0
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	f803 1b01 	strb.w	r1, [r3], #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <_sbrk_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d06      	ldr	r5, [pc, #24]	@ (80069a4 <_sbrk_r+0x1c>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	602b      	str	r3, [r5, #0]
 8006994:	f7fb fd70 	bl	8002478 <_sbrk>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_sbrk_r+0x1a>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_sbrk_r+0x1a>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20001208 	.word	0x20001208

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	@ (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2000001c 	.word	0x2000001c

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	@ (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	@ (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	@ (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	@ (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 fff6 	bl	80079b8 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08007c18 	.word	0x08007c18
 80069f0:	08007c18 	.word	0x08007c18
 80069f4:	08007c18 	.word	0x08007c18
 80069f8:	08007c1c 	.word	0x08007c1c

080069fc <__retarget_lock_acquire_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_release_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a16:	4291      	cmp	r1, r2
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_free_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d041      	beq.n	8006aa8 <_free_r+0x8c>
 8006a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a28:	1f0c      	subs	r4, r1, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfb8      	it	lt
 8006a2e:	18e4      	addlt	r4, r4, r3
 8006a30:	f7ff feda 	bl	80067e8 <__malloc_lock>
 8006a34:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <_free_r+0x90>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	b933      	cbnz	r3, 8006a48 <_free_r+0x2c>
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	6014      	str	r4, [r2, #0]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a44:	f7ff bed6 	b.w	80067f4 <__malloc_unlock>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x42>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	e7ed      	b.n	8006a3a <_free_r+0x1e>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b10b      	cbz	r3, 8006a68 <_free_r+0x4c>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d9fa      	bls.n	8006a5e <_free_r+0x42>
 8006a68:	6811      	ldr	r1, [r2, #0]
 8006a6a:	1850      	adds	r0, r2, r1
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d10b      	bne.n	8006a88 <_free_r+0x6c>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	4401      	add	r1, r0
 8006a74:	1850      	adds	r0, r2, r1
 8006a76:	4283      	cmp	r3, r0
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	d1e0      	bne.n	8006a3e <_free_r+0x22>
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	6053      	str	r3, [r2, #4]
 8006a82:	4408      	add	r0, r1
 8006a84:	6010      	str	r0, [r2, #0]
 8006a86:	e7da      	b.n	8006a3e <_free_r+0x22>
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x74>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	e7d6      	b.n	8006a3e <_free_r+0x22>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	1821      	adds	r1, r4, r0
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf04      	itt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	bf04      	itt	eq
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	6054      	str	r4, [r2, #4]
 8006aa6:	e7ca      	b.n	8006a3e <_free_r+0x22>
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	bf00      	nop
 8006aac:	200010cc 	.word	0x200010cc

08006ab0 <_malloc_usable_size_r>:
 8006ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab4:	1f18      	subs	r0, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bfbc      	itt	lt
 8006aba:	580b      	ldrlt	r3, [r1, r0]
 8006abc:	18c0      	addlt	r0, r0, r3
 8006abe:	4770      	bx	lr

08006ac0 <__ssputs_r>:
 8006ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	688e      	ldr	r6, [r1, #8]
 8006ac6:	461f      	mov	r7, r3
 8006ac8:	42be      	cmp	r6, r7
 8006aca:	680b      	ldr	r3, [r1, #0]
 8006acc:	4682      	mov	sl, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	d82d      	bhi.n	8006b30 <__ssputs_r+0x70>
 8006ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ad8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006adc:	d026      	beq.n	8006b2c <__ssputs_r+0x6c>
 8006ade:	6965      	ldr	r5, [r4, #20]
 8006ae0:	6909      	ldr	r1, [r1, #16]
 8006ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ae6:	eba3 0901 	sub.w	r9, r3, r1
 8006aea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aee:	1c7b      	adds	r3, r7, #1
 8006af0:	444b      	add	r3, r9
 8006af2:	106d      	asrs	r5, r5, #1
 8006af4:	429d      	cmp	r5, r3
 8006af6:	bf38      	it	cc
 8006af8:	461d      	movcc	r5, r3
 8006afa:	0553      	lsls	r3, r2, #21
 8006afc:	d527      	bpl.n	8006b4e <__ssputs_r+0x8e>
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7ff fdf2 	bl	80066e8 <_malloc_r>
 8006b04:	4606      	mov	r6, r0
 8006b06:	b360      	cbz	r0, 8006b62 <__ssputs_r+0xa2>
 8006b08:	6921      	ldr	r1, [r4, #16]
 8006b0a:	464a      	mov	r2, r9
 8006b0c:	f7ff ff78 	bl	8006a00 <memcpy>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	6126      	str	r6, [r4, #16]
 8006b1e:	6165      	str	r5, [r4, #20]
 8006b20:	444e      	add	r6, r9
 8006b22:	eba5 0509 	sub.w	r5, r5, r9
 8006b26:	6026      	str	r6, [r4, #0]
 8006b28:	60a5      	str	r5, [r4, #8]
 8006b2a:	463e      	mov	r6, r7
 8006b2c:	42be      	cmp	r6, r7
 8006b2e:	d900      	bls.n	8006b32 <__ssputs_r+0x72>
 8006b30:	463e      	mov	r6, r7
 8006b32:	6820      	ldr	r0, [r4, #0]
 8006b34:	4632      	mov	r2, r6
 8006b36:	4641      	mov	r1, r8
 8006b38:	f000 fe37 	bl	80077aa <memmove>
 8006b3c:	68a3      	ldr	r3, [r4, #8]
 8006b3e:	1b9b      	subs	r3, r3, r6
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	4433      	add	r3, r6
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	462a      	mov	r2, r5
 8006b50:	f7ff fe5e 	bl	8006810 <_realloc_r>
 8006b54:	4606      	mov	r6, r0
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1e0      	bne.n	8006b1c <__ssputs_r+0x5c>
 8006b5a:	6921      	ldr	r1, [r4, #16]
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	f7ff ff5d 	bl	8006a1c <_free_r>
 8006b62:	230c      	movs	r3, #12
 8006b64:	f8ca 3000 	str.w	r3, [sl]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e7e9      	b.n	8006b4a <__ssputs_r+0x8a>
	...

08006b78 <_svfiprintf_r>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	4698      	mov	r8, r3
 8006b7e:	898b      	ldrh	r3, [r1, #12]
 8006b80:	061b      	lsls	r3, r3, #24
 8006b82:	b09d      	sub	sp, #116	@ 0x74
 8006b84:	4607      	mov	r7, r0
 8006b86:	460d      	mov	r5, r1
 8006b88:	4614      	mov	r4, r2
 8006b8a:	d510      	bpl.n	8006bae <_svfiprintf_r+0x36>
 8006b8c:	690b      	ldr	r3, [r1, #16]
 8006b8e:	b973      	cbnz	r3, 8006bae <_svfiprintf_r+0x36>
 8006b90:	2140      	movs	r1, #64	@ 0x40
 8006b92:	f7ff fda9 	bl	80066e8 <_malloc_r>
 8006b96:	6028      	str	r0, [r5, #0]
 8006b98:	6128      	str	r0, [r5, #16]
 8006b9a:	b930      	cbnz	r0, 8006baa <_svfiprintf_r+0x32>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	b01d      	add	sp, #116	@ 0x74
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	2340      	movs	r3, #64	@ 0x40
 8006bac:	616b      	str	r3, [r5, #20]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bbc:	2330      	movs	r3, #48	@ 0x30
 8006bbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d5c <_svfiprintf_r+0x1e4>
 8006bc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bc6:	f04f 0901 	mov.w	r9, #1
 8006bca:	4623      	mov	r3, r4
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd2:	b10a      	cbz	r2, 8006bd8 <_svfiprintf_r+0x60>
 8006bd4:	2a25      	cmp	r2, #37	@ 0x25
 8006bd6:	d1f9      	bne.n	8006bcc <_svfiprintf_r+0x54>
 8006bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bdc:	d00b      	beq.n	8006bf6 <_svfiprintf_r+0x7e>
 8006bde:	465b      	mov	r3, fp
 8006be0:	4622      	mov	r2, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff ff6b 	bl	8006ac0 <__ssputs_r>
 8006bea:	3001      	adds	r0, #1
 8006bec:	f000 80a7 	beq.w	8006d3e <_svfiprintf_r+0x1c6>
 8006bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf2:	445a      	add	r2, fp
 8006bf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 809f 	beq.w	8006d3e <_svfiprintf_r+0x1c6>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0a:	f10a 0a01 	add.w	sl, sl, #1
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c16:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c18:	4654      	mov	r4, sl
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	484e      	ldr	r0, [pc, #312]	@ (8006d5c <_svfiprintf_r+0x1e4>)
 8006c22:	f7f9 fadd 	bl	80001e0 <memchr>
 8006c26:	9a04      	ldr	r2, [sp, #16]
 8006c28:	b9d8      	cbnz	r0, 8006c62 <_svfiprintf_r+0xea>
 8006c2a:	06d0      	lsls	r0, r2, #27
 8006c2c:	bf44      	itt	mi
 8006c2e:	2320      	movmi	r3, #32
 8006c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c34:	0711      	lsls	r1, r2, #28
 8006c36:	bf44      	itt	mi
 8006c38:	232b      	movmi	r3, #43	@ 0x2b
 8006c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c44:	d015      	beq.n	8006c72 <_svfiprintf_r+0xfa>
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f04f 0c0a 	mov.w	ip, #10
 8006c50:	4621      	mov	r1, r4
 8006c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c56:	3b30      	subs	r3, #48	@ 0x30
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d94b      	bls.n	8006cf4 <_svfiprintf_r+0x17c>
 8006c5c:	b1b0      	cbz	r0, 8006c8c <_svfiprintf_r+0x114>
 8006c5e:	9207      	str	r2, [sp, #28]
 8006c60:	e014      	b.n	8006c8c <_svfiprintf_r+0x114>
 8006c62:	eba0 0308 	sub.w	r3, r0, r8
 8006c66:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	46a2      	mov	sl, r4
 8006c70:	e7d2      	b.n	8006c18 <_svfiprintf_r+0xa0>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbb      	ittet	lt
 8006c7e:	425b      	neglt	r3, r3
 8006c80:	f042 0202 	orrlt.w	r2, r2, #2
 8006c84:	9307      	strge	r3, [sp, #28]
 8006c86:	9307      	strlt	r3, [sp, #28]
 8006c88:	bfb8      	it	lt
 8006c8a:	9204      	strlt	r2, [sp, #16]
 8006c8c:	7823      	ldrb	r3, [r4, #0]
 8006c8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c90:	d10a      	bne.n	8006ca8 <_svfiprintf_r+0x130>
 8006c92:	7863      	ldrb	r3, [r4, #1]
 8006c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c96:	d132      	bne.n	8006cfe <_svfiprintf_r+0x186>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	9203      	str	r2, [sp, #12]
 8006ca0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ca4:	3402      	adds	r4, #2
 8006ca6:	9305      	str	r3, [sp, #20]
 8006ca8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d6c <_svfiprintf_r+0x1f4>
 8006cac:	7821      	ldrb	r1, [r4, #0]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	4650      	mov	r0, sl
 8006cb2:	f7f9 fa95 	bl	80001e0 <memchr>
 8006cb6:	b138      	cbz	r0, 8006cc8 <_svfiprintf_r+0x150>
 8006cb8:	9b04      	ldr	r3, [sp, #16]
 8006cba:	eba0 000a 	sub.w	r0, r0, sl
 8006cbe:	2240      	movs	r2, #64	@ 0x40
 8006cc0:	4082      	lsls	r2, r0
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	3401      	adds	r4, #1
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ccc:	4824      	ldr	r0, [pc, #144]	@ (8006d60 <_svfiprintf_r+0x1e8>)
 8006cce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cd2:	2206      	movs	r2, #6
 8006cd4:	f7f9 fa84 	bl	80001e0 <memchr>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d036      	beq.n	8006d4a <_svfiprintf_r+0x1d2>
 8006cdc:	4b21      	ldr	r3, [pc, #132]	@ (8006d64 <_svfiprintf_r+0x1ec>)
 8006cde:	bb1b      	cbnz	r3, 8006d28 <_svfiprintf_r+0x1b0>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	3307      	adds	r3, #7
 8006ce4:	f023 0307 	bic.w	r3, r3, #7
 8006ce8:	3308      	adds	r3, #8
 8006cea:	9303      	str	r3, [sp, #12]
 8006cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cee:	4433      	add	r3, r6
 8006cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf2:	e76a      	b.n	8006bca <_svfiprintf_r+0x52>
 8006cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	e7a8      	b.n	8006c50 <_svfiprintf_r+0xd8>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	3401      	adds	r4, #1
 8006d02:	9305      	str	r3, [sp, #20]
 8006d04:	4619      	mov	r1, r3
 8006d06:	f04f 0c0a 	mov.w	ip, #10
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d10:	3a30      	subs	r2, #48	@ 0x30
 8006d12:	2a09      	cmp	r2, #9
 8006d14:	d903      	bls.n	8006d1e <_svfiprintf_r+0x1a6>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0c6      	beq.n	8006ca8 <_svfiprintf_r+0x130>
 8006d1a:	9105      	str	r1, [sp, #20]
 8006d1c:	e7c4      	b.n	8006ca8 <_svfiprintf_r+0x130>
 8006d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d22:	4604      	mov	r4, r0
 8006d24:	2301      	movs	r3, #1
 8006d26:	e7f0      	b.n	8006d0a <_svfiprintf_r+0x192>
 8006d28:	ab03      	add	r3, sp, #12
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d68 <_svfiprintf_r+0x1f0>)
 8006d30:	a904      	add	r1, sp, #16
 8006d32:	4638      	mov	r0, r7
 8006d34:	f3af 8000 	nop.w
 8006d38:	1c42      	adds	r2, r0, #1
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	d1d6      	bne.n	8006cec <_svfiprintf_r+0x174>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	065b      	lsls	r3, r3, #25
 8006d42:	f53f af2d 	bmi.w	8006ba0 <_svfiprintf_r+0x28>
 8006d46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d48:	e72c      	b.n	8006ba4 <_svfiprintf_r+0x2c>
 8006d4a:	ab03      	add	r3, sp, #12
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <_svfiprintf_r+0x1f0>)
 8006d52:	a904      	add	r1, sp, #16
 8006d54:	4638      	mov	r0, r7
 8006d56:	f000 fa49 	bl	80071ec <_printf_i>
 8006d5a:	e7ed      	b.n	8006d38 <_svfiprintf_r+0x1c0>
 8006d5c:	08007bc1 	.word	0x08007bc1
 8006d60:	08007bcb 	.word	0x08007bcb
 8006d64:	00000000 	.word	0x00000000
 8006d68:	08006ac1 	.word	0x08006ac1
 8006d6c:	08007bc7 	.word	0x08007bc7

08006d70 <_sungetc_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	1c4b      	adds	r3, r1, #1
 8006d74:	4614      	mov	r4, r2
 8006d76:	d103      	bne.n	8006d80 <_sungetc_r+0x10>
 8006d78:	f04f 35ff 	mov.w	r5, #4294967295
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	8993      	ldrh	r3, [r2, #12]
 8006d82:	f023 0320 	bic.w	r3, r3, #32
 8006d86:	8193      	strh	r3, [r2, #12]
 8006d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d8a:	6852      	ldr	r2, [r2, #4]
 8006d8c:	b2cd      	uxtb	r5, r1
 8006d8e:	b18b      	cbz	r3, 8006db4 <_sungetc_r+0x44>
 8006d90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d92:	4293      	cmp	r3, r2
 8006d94:	dd08      	ble.n	8006da8 <_sungetc_r+0x38>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006da0:	6863      	ldr	r3, [r4, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	e7e9      	b.n	8006d7c <_sungetc_r+0xc>
 8006da8:	4621      	mov	r1, r4
 8006daa:	f000 fcc4 	bl	8007736 <__submore>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0f1      	beq.n	8006d96 <_sungetc_r+0x26>
 8006db2:	e7e1      	b.n	8006d78 <_sungetc_r+0x8>
 8006db4:	6921      	ldr	r1, [r4, #16]
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	b151      	cbz	r1, 8006dd0 <_sungetc_r+0x60>
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	d208      	bcs.n	8006dd0 <_sungetc_r+0x60>
 8006dbe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006dc2:	42a9      	cmp	r1, r5
 8006dc4:	d104      	bne.n	8006dd0 <_sungetc_r+0x60>
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	3201      	adds	r2, #1
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	6062      	str	r2, [r4, #4]
 8006dce:	e7d5      	b.n	8006d7c <_sungetc_r+0xc>
 8006dd0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8006dd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dda:	2303      	movs	r3, #3
 8006ddc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006dde:	4623      	mov	r3, r4
 8006de0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	2301      	movs	r3, #1
 8006de8:	e7dc      	b.n	8006da4 <_sungetc_r+0x34>

08006dea <__ssrefill_r>:
 8006dea:	b510      	push	{r4, lr}
 8006dec:	460c      	mov	r4, r1
 8006dee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006df0:	b169      	cbz	r1, 8006e0e <__ssrefill_r+0x24>
 8006df2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006df6:	4299      	cmp	r1, r3
 8006df8:	d001      	beq.n	8006dfe <__ssrefill_r+0x14>
 8006dfa:	f7ff fe0f 	bl	8006a1c <_free_r>
 8006dfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	2000      	movs	r0, #0
 8006e04:	6360      	str	r0, [r4, #52]	@ 0x34
 8006e06:	b113      	cbz	r3, 8006e0e <__ssrefill_r+0x24>
 8006e08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006e0a:	6023      	str	r3, [r4, #0]
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0320 	orr.w	r3, r3, #32
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	e7f3      	b.n	8006e0c <__ssrefill_r+0x22>

08006e24 <__ssvfiscanf_r>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8006e2e:	2100      	movs	r1, #0
 8006e30:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006e34:	49a6      	ldr	r1, [pc, #664]	@ (80070d0 <__ssvfiscanf_r+0x2ac>)
 8006e36:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006e38:	f10d 0804 	add.w	r8, sp, #4
 8006e3c:	49a5      	ldr	r1, [pc, #660]	@ (80070d4 <__ssvfiscanf_r+0x2b0>)
 8006e3e:	4fa6      	ldr	r7, [pc, #664]	@ (80070d8 <__ssvfiscanf_r+0x2b4>)
 8006e40:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006e44:	4606      	mov	r6, r0
 8006e46:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	f892 9000 	ldrb.w	r9, [r2]
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	f000 8158 	beq.w	8007106 <__ssvfiscanf_r+0x2e2>
 8006e56:	f817 3009 	ldrb.w	r3, [r7, r9]
 8006e5a:	f013 0308 	ands.w	r3, r3, #8
 8006e5e:	f102 0501 	add.w	r5, r2, #1
 8006e62:	d019      	beq.n	8006e98 <__ssvfiscanf_r+0x74>
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dd0f      	ble.n	8006e8a <__ssvfiscanf_r+0x66>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	5cba      	ldrb	r2, [r7, r2]
 8006e70:	0712      	lsls	r2, r2, #28
 8006e72:	d401      	bmi.n	8006e78 <__ssvfiscanf_r+0x54>
 8006e74:	462a      	mov	r2, r5
 8006e76:	e7e8      	b.n	8006e4a <__ssvfiscanf_r+0x26>
 8006e78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006e7a:	3201      	adds	r2, #1
 8006e7c:	9245      	str	r2, [sp, #276]	@ 0x114
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	3301      	adds	r3, #1
 8006e82:	3a01      	subs	r2, #1
 8006e84:	6062      	str	r2, [r4, #4]
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	e7ec      	b.n	8006e64 <__ssvfiscanf_r+0x40>
 8006e8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4630      	mov	r0, r6
 8006e90:	4798      	blx	r3
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0e9      	beq.n	8006e6a <__ssvfiscanf_r+0x46>
 8006e96:	e7ed      	b.n	8006e74 <__ssvfiscanf_r+0x50>
 8006e98:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8006e9c:	f040 8085 	bne.w	8006faa <__ssvfiscanf_r+0x186>
 8006ea0:	9341      	str	r3, [sp, #260]	@ 0x104
 8006ea2:	9343      	str	r3, [sp, #268]	@ 0x10c
 8006ea4:	7853      	ldrb	r3, [r2, #1]
 8006ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ea8:	bf02      	ittt	eq
 8006eaa:	2310      	moveq	r3, #16
 8006eac:	1c95      	addeq	r5, r2, #2
 8006eae:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006eb0:	220a      	movs	r2, #10
 8006eb2:	46aa      	mov	sl, r5
 8006eb4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006eb8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	d91e      	bls.n	8006efe <__ssvfiscanf_r+0xda>
 8006ec0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80070dc <__ssvfiscanf_r+0x2b8>
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	f7f9 f98a 	bl	80001e0 <memchr>
 8006ecc:	b138      	cbz	r0, 8006ede <__ssvfiscanf_r+0xba>
 8006ece:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ed0:	eba0 000b 	sub.w	r0, r0, fp
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4083      	lsls	r3, r0
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	9341      	str	r3, [sp, #260]	@ 0x104
 8006edc:	4655      	mov	r5, sl
 8006ede:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ee2:	2b78      	cmp	r3, #120	@ 0x78
 8006ee4:	d806      	bhi.n	8006ef4 <__ssvfiscanf_r+0xd0>
 8006ee6:	2b57      	cmp	r3, #87	@ 0x57
 8006ee8:	d810      	bhi.n	8006f0c <__ssvfiscanf_r+0xe8>
 8006eea:	2b25      	cmp	r3, #37	@ 0x25
 8006eec:	d05d      	beq.n	8006faa <__ssvfiscanf_r+0x186>
 8006eee:	d857      	bhi.n	8006fa0 <__ssvfiscanf_r+0x17c>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d075      	beq.n	8006fe0 <__ssvfiscanf_r+0x1bc>
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006ef8:	230a      	movs	r3, #10
 8006efa:	9342      	str	r3, [sp, #264]	@ 0x108
 8006efc:	e088      	b.n	8007010 <__ssvfiscanf_r+0x1ec>
 8006efe:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006f00:	fb02 1103 	mla	r1, r2, r3, r1
 8006f04:	3930      	subs	r1, #48	@ 0x30
 8006f06:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006f08:	4655      	mov	r5, sl
 8006f0a:	e7d2      	b.n	8006eb2 <__ssvfiscanf_r+0x8e>
 8006f0c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006f10:	2a20      	cmp	r2, #32
 8006f12:	d8ef      	bhi.n	8006ef4 <__ssvfiscanf_r+0xd0>
 8006f14:	a101      	add	r1, pc, #4	@ (adr r1, 8006f1c <__ssvfiscanf_r+0xf8>)
 8006f16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006fef 	.word	0x08006fef
 8006f20:	08006ef5 	.word	0x08006ef5
 8006f24:	08006ef5 	.word	0x08006ef5
 8006f28:	08007049 	.word	0x08007049
 8006f2c:	08006ef5 	.word	0x08006ef5
 8006f30:	08006ef5 	.word	0x08006ef5
 8006f34:	08006ef5 	.word	0x08006ef5
 8006f38:	08006ef5 	.word	0x08006ef5
 8006f3c:	08006ef5 	.word	0x08006ef5
 8006f40:	08006ef5 	.word	0x08006ef5
 8006f44:	08006ef5 	.word	0x08006ef5
 8006f48:	0800705f 	.word	0x0800705f
 8006f4c:	08007045 	.word	0x08007045
 8006f50:	08006fa7 	.word	0x08006fa7
 8006f54:	08006fa7 	.word	0x08006fa7
 8006f58:	08006fa7 	.word	0x08006fa7
 8006f5c:	08006ef5 	.word	0x08006ef5
 8006f60:	08007001 	.word	0x08007001
 8006f64:	08006ef5 	.word	0x08006ef5
 8006f68:	08006ef5 	.word	0x08006ef5
 8006f6c:	08006ef5 	.word	0x08006ef5
 8006f70:	08006ef5 	.word	0x08006ef5
 8006f74:	0800706f 	.word	0x0800706f
 8006f78:	08007009 	.word	0x08007009
 8006f7c:	08006fe7 	.word	0x08006fe7
 8006f80:	08006ef5 	.word	0x08006ef5
 8006f84:	08006ef5 	.word	0x08006ef5
 8006f88:	0800706b 	.word	0x0800706b
 8006f8c:	08006ef5 	.word	0x08006ef5
 8006f90:	08007045 	.word	0x08007045
 8006f94:	08006ef5 	.word	0x08006ef5
 8006f98:	08006ef5 	.word	0x08006ef5
 8006f9c:	08006fef 	.word	0x08006fef
 8006fa0:	3b45      	subs	r3, #69	@ 0x45
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d8a6      	bhi.n	8006ef4 <__ssvfiscanf_r+0xd0>
 8006fa6:	2305      	movs	r3, #5
 8006fa8:	e031      	b.n	800700e <__ssvfiscanf_r+0x1ea>
 8006faa:	6863      	ldr	r3, [r4, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dd0d      	ble.n	8006fcc <__ssvfiscanf_r+0x1a8>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	454a      	cmp	r2, r9
 8006fb6:	f040 80a6 	bne.w	8007106 <__ssvfiscanf_r+0x2e2>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6862      	ldr	r2, [r4, #4]
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	6062      	str	r2, [r4, #4]
 8006fc8:	9345      	str	r3, [sp, #276]	@ 0x114
 8006fca:	e753      	b.n	8006e74 <__ssvfiscanf_r+0x50>
 8006fcc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	4798      	blx	r3
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0eb      	beq.n	8006fb0 <__ssvfiscanf_r+0x18c>
 8006fd8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	f040 808b 	bne.w	80070f6 <__ssvfiscanf_r+0x2d2>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e08b      	b.n	80070fe <__ssvfiscanf_r+0x2da>
 8006fe6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006fe8:	f042 0220 	orr.w	r2, r2, #32
 8006fec:	9241      	str	r2, [sp, #260]	@ 0x104
 8006fee:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff4:	9241      	str	r2, [sp, #260]	@ 0x104
 8006ff6:	2210      	movs	r2, #16
 8006ff8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006ffa:	9242      	str	r2, [sp, #264]	@ 0x108
 8006ffc:	d902      	bls.n	8007004 <__ssvfiscanf_r+0x1e0>
 8006ffe:	e005      	b.n	800700c <__ssvfiscanf_r+0x1e8>
 8007000:	2300      	movs	r3, #0
 8007002:	9342      	str	r3, [sp, #264]	@ 0x108
 8007004:	2303      	movs	r3, #3
 8007006:	e002      	b.n	800700e <__ssvfiscanf_r+0x1ea>
 8007008:	2308      	movs	r3, #8
 800700a:	9342      	str	r3, [sp, #264]	@ 0x108
 800700c:	2304      	movs	r3, #4
 800700e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dd39      	ble.n	800708a <__ssvfiscanf_r+0x266>
 8007016:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007018:	0659      	lsls	r1, r3, #25
 800701a:	d404      	bmi.n	8007026 <__ssvfiscanf_r+0x202>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	5cba      	ldrb	r2, [r7, r2]
 8007022:	0712      	lsls	r2, r2, #28
 8007024:	d438      	bmi.n	8007098 <__ssvfiscanf_r+0x274>
 8007026:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007028:	2b02      	cmp	r3, #2
 800702a:	dc47      	bgt.n	80070bc <__ssvfiscanf_r+0x298>
 800702c:	466b      	mov	r3, sp
 800702e:	4622      	mov	r2, r4
 8007030:	a941      	add	r1, sp, #260	@ 0x104
 8007032:	4630      	mov	r0, r6
 8007034:	f000 f9f8 	bl	8007428 <_scanf_chars>
 8007038:	2801      	cmp	r0, #1
 800703a:	d064      	beq.n	8007106 <__ssvfiscanf_r+0x2e2>
 800703c:	2802      	cmp	r0, #2
 800703e:	f47f af19 	bne.w	8006e74 <__ssvfiscanf_r+0x50>
 8007042:	e7c9      	b.n	8006fd8 <__ssvfiscanf_r+0x1b4>
 8007044:	220a      	movs	r2, #10
 8007046:	e7d7      	b.n	8006ff8 <__ssvfiscanf_r+0x1d4>
 8007048:	4629      	mov	r1, r5
 800704a:	4640      	mov	r0, r8
 800704c:	f000 fb3a 	bl	80076c4 <__sccl>
 8007050:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007052:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007056:	9341      	str	r3, [sp, #260]	@ 0x104
 8007058:	4605      	mov	r5, r0
 800705a:	2301      	movs	r3, #1
 800705c:	e7d7      	b.n	800700e <__ssvfiscanf_r+0x1ea>
 800705e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007064:	9341      	str	r3, [sp, #260]	@ 0x104
 8007066:	2300      	movs	r3, #0
 8007068:	e7d1      	b.n	800700e <__ssvfiscanf_r+0x1ea>
 800706a:	2302      	movs	r3, #2
 800706c:	e7cf      	b.n	800700e <__ssvfiscanf_r+0x1ea>
 800706e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007070:	06c3      	lsls	r3, r0, #27
 8007072:	f53f aeff 	bmi.w	8006e74 <__ssvfiscanf_r+0x50>
 8007076:	9b00      	ldr	r3, [sp, #0]
 8007078:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800707a:	1d19      	adds	r1, r3, #4
 800707c:	9100      	str	r1, [sp, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	07c0      	lsls	r0, r0, #31
 8007082:	bf4c      	ite	mi
 8007084:	801a      	strhmi	r2, [r3, #0]
 8007086:	601a      	strpl	r2, [r3, #0]
 8007088:	e6f4      	b.n	8006e74 <__ssvfiscanf_r+0x50>
 800708a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800708c:	4621      	mov	r1, r4
 800708e:	4630      	mov	r0, r6
 8007090:	4798      	blx	r3
 8007092:	2800      	cmp	r0, #0
 8007094:	d0bf      	beq.n	8007016 <__ssvfiscanf_r+0x1f2>
 8007096:	e79f      	b.n	8006fd8 <__ssvfiscanf_r+0x1b4>
 8007098:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800709a:	3201      	adds	r2, #1
 800709c:	9245      	str	r2, [sp, #276]	@ 0x114
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	3a01      	subs	r2, #1
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	6062      	str	r2, [r4, #4]
 80070a6:	dd02      	ble.n	80070ae <__ssvfiscanf_r+0x28a>
 80070a8:	3301      	adds	r3, #1
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	e7b6      	b.n	800701c <__ssvfiscanf_r+0x1f8>
 80070ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80070b0:	4621      	mov	r1, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	4798      	blx	r3
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d0b0      	beq.n	800701c <__ssvfiscanf_r+0x1f8>
 80070ba:	e78d      	b.n	8006fd8 <__ssvfiscanf_r+0x1b4>
 80070bc:	2b04      	cmp	r3, #4
 80070be:	dc0f      	bgt.n	80070e0 <__ssvfiscanf_r+0x2bc>
 80070c0:	466b      	mov	r3, sp
 80070c2:	4622      	mov	r2, r4
 80070c4:	a941      	add	r1, sp, #260	@ 0x104
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 fa08 	bl	80074dc <_scanf_i>
 80070cc:	e7b4      	b.n	8007038 <__ssvfiscanf_r+0x214>
 80070ce:	bf00      	nop
 80070d0:	08006d71 	.word	0x08006d71
 80070d4:	08006deb 	.word	0x08006deb
 80070d8:	08007ac1 	.word	0x08007ac1
 80070dc:	08007bc7 	.word	0x08007bc7
 80070e0:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <__ssvfiscanf_r+0x2e8>)
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f43f aec6 	beq.w	8006e74 <__ssvfiscanf_r+0x50>
 80070e8:	466b      	mov	r3, sp
 80070ea:	4622      	mov	r2, r4
 80070ec:	a941      	add	r1, sp, #260	@ 0x104
 80070ee:	4630      	mov	r0, r6
 80070f0:	f3af 8000 	nop.w
 80070f4:	e7a0      	b.n	8007038 <__ssvfiscanf_r+0x214>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	065b      	lsls	r3, r3, #25
 80070fa:	f53f af71 	bmi.w	8006fe0 <__ssvfiscanf_r+0x1bc>
 80070fe:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007108:	e7f9      	b.n	80070fe <__ssvfiscanf_r+0x2da>
 800710a:	bf00      	nop
 800710c:	00000000 	.word	0x00000000

08007110 <_printf_common>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	4616      	mov	r6, r2
 8007116:	4698      	mov	r8, r3
 8007118:	688a      	ldr	r2, [r1, #8]
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007120:	4293      	cmp	r3, r2
 8007122:	bfb8      	it	lt
 8007124:	4613      	movlt	r3, r2
 8007126:	6033      	str	r3, [r6, #0]
 8007128:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800712c:	4607      	mov	r7, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b10a      	cbz	r2, 8007136 <_printf_common+0x26>
 8007132:	3301      	adds	r3, #1
 8007134:	6033      	str	r3, [r6, #0]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	0699      	lsls	r1, r3, #26
 800713a:	bf42      	ittt	mi
 800713c:	6833      	ldrmi	r3, [r6, #0]
 800713e:	3302      	addmi	r3, #2
 8007140:	6033      	strmi	r3, [r6, #0]
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	f015 0506 	ands.w	r5, r5, #6
 8007148:	d106      	bne.n	8007158 <_printf_common+0x48>
 800714a:	f104 0a19 	add.w	sl, r4, #25
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	6832      	ldr	r2, [r6, #0]
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	42ab      	cmp	r3, r5
 8007156:	dc26      	bgt.n	80071a6 <_printf_common+0x96>
 8007158:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	3b00      	subs	r3, #0
 8007160:	bf18      	it	ne
 8007162:	2301      	movne	r3, #1
 8007164:	0692      	lsls	r2, r2, #26
 8007166:	d42b      	bmi.n	80071c0 <_printf_common+0xb0>
 8007168:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800716c:	4641      	mov	r1, r8
 800716e:	4638      	mov	r0, r7
 8007170:	47c8      	blx	r9
 8007172:	3001      	adds	r0, #1
 8007174:	d01e      	beq.n	80071b4 <_printf_common+0xa4>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	2b04      	cmp	r3, #4
 8007180:	bf02      	ittt	eq
 8007182:	68e5      	ldreq	r5, [r4, #12]
 8007184:	6833      	ldreq	r3, [r6, #0]
 8007186:	1aed      	subeq	r5, r5, r3
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	bf0c      	ite	eq
 800718c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007190:	2500      	movne	r5, #0
 8007192:	4293      	cmp	r3, r2
 8007194:	bfc4      	itt	gt
 8007196:	1a9b      	subgt	r3, r3, r2
 8007198:	18ed      	addgt	r5, r5, r3
 800719a:	2600      	movs	r6, #0
 800719c:	341a      	adds	r4, #26
 800719e:	42b5      	cmp	r5, r6
 80071a0:	d11a      	bne.n	80071d8 <_printf_common+0xc8>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e008      	b.n	80071b8 <_printf_common+0xa8>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4641      	mov	r1, r8
 80071ac:	4638      	mov	r0, r7
 80071ae:	47c8      	blx	r9
 80071b0:	3001      	adds	r0, #1
 80071b2:	d103      	bne.n	80071bc <_printf_common+0xac>
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	3501      	adds	r5, #1
 80071be:	e7c6      	b.n	800714e <_printf_common+0x3e>
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	2030      	movs	r0, #48	@ 0x30
 80071c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071ca:	4422      	add	r2, r4
 80071cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071d4:	3302      	adds	r3, #2
 80071d6:	e7c7      	b.n	8007168 <_printf_common+0x58>
 80071d8:	2301      	movs	r3, #1
 80071da:	4622      	mov	r2, r4
 80071dc:	4641      	mov	r1, r8
 80071de:	4638      	mov	r0, r7
 80071e0:	47c8      	blx	r9
 80071e2:	3001      	adds	r0, #1
 80071e4:	d0e6      	beq.n	80071b4 <_printf_common+0xa4>
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7d9      	b.n	800719e <_printf_common+0x8e>
	...

080071ec <_printf_i>:
 80071ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	7e0f      	ldrb	r7, [r1, #24]
 80071f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071f4:	2f78      	cmp	r7, #120	@ 0x78
 80071f6:	4691      	mov	r9, r2
 80071f8:	4680      	mov	r8, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	469a      	mov	sl, r3
 80071fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007202:	d807      	bhi.n	8007214 <_printf_i+0x28>
 8007204:	2f62      	cmp	r7, #98	@ 0x62
 8007206:	d80a      	bhi.n	800721e <_printf_i+0x32>
 8007208:	2f00      	cmp	r7, #0
 800720a:	f000 80d1 	beq.w	80073b0 <_printf_i+0x1c4>
 800720e:	2f58      	cmp	r7, #88	@ 0x58
 8007210:	f000 80b8 	beq.w	8007384 <_printf_i+0x198>
 8007214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007218:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800721c:	e03a      	b.n	8007294 <_printf_i+0xa8>
 800721e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007222:	2b15      	cmp	r3, #21
 8007224:	d8f6      	bhi.n	8007214 <_printf_i+0x28>
 8007226:	a101      	add	r1, pc, #4	@ (adr r1, 800722c <_printf_i+0x40>)
 8007228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800722c:	08007285 	.word	0x08007285
 8007230:	08007299 	.word	0x08007299
 8007234:	08007215 	.word	0x08007215
 8007238:	08007215 	.word	0x08007215
 800723c:	08007215 	.word	0x08007215
 8007240:	08007215 	.word	0x08007215
 8007244:	08007299 	.word	0x08007299
 8007248:	08007215 	.word	0x08007215
 800724c:	08007215 	.word	0x08007215
 8007250:	08007215 	.word	0x08007215
 8007254:	08007215 	.word	0x08007215
 8007258:	08007397 	.word	0x08007397
 800725c:	080072c3 	.word	0x080072c3
 8007260:	08007351 	.word	0x08007351
 8007264:	08007215 	.word	0x08007215
 8007268:	08007215 	.word	0x08007215
 800726c:	080073b9 	.word	0x080073b9
 8007270:	08007215 	.word	0x08007215
 8007274:	080072c3 	.word	0x080072c3
 8007278:	08007215 	.word	0x08007215
 800727c:	08007215 	.word	0x08007215
 8007280:	08007359 	.word	0x08007359
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6032      	str	r2, [r6, #0]
 800728c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007290:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007294:	2301      	movs	r3, #1
 8007296:	e09c      	b.n	80073d2 <_printf_i+0x1e6>
 8007298:	6833      	ldr	r3, [r6, #0]
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	6031      	str	r1, [r6, #0]
 80072a0:	0606      	lsls	r6, r0, #24
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0xbc>
 80072a4:	681d      	ldr	r5, [r3, #0]
 80072a6:	e003      	b.n	80072b0 <_printf_i+0xc4>
 80072a8:	0645      	lsls	r5, r0, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0xb8>
 80072ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	da03      	bge.n	80072bc <_printf_i+0xd0>
 80072b4:	232d      	movs	r3, #45	@ 0x2d
 80072b6:	426d      	negs	r5, r5
 80072b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072bc:	4858      	ldr	r0, [pc, #352]	@ (8007420 <_printf_i+0x234>)
 80072be:	230a      	movs	r3, #10
 80072c0:	e011      	b.n	80072e6 <_printf_i+0xfa>
 80072c2:	6821      	ldr	r1, [r4, #0]
 80072c4:	6833      	ldr	r3, [r6, #0]
 80072c6:	0608      	lsls	r0, r1, #24
 80072c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80072cc:	d402      	bmi.n	80072d4 <_printf_i+0xe8>
 80072ce:	0649      	lsls	r1, r1, #25
 80072d0:	bf48      	it	mi
 80072d2:	b2ad      	uxthmi	r5, r5
 80072d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80072d6:	4852      	ldr	r0, [pc, #328]	@ (8007420 <_printf_i+0x234>)
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	bf14      	ite	ne
 80072dc:	230a      	movne	r3, #10
 80072de:	2308      	moveq	r3, #8
 80072e0:	2100      	movs	r1, #0
 80072e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072e6:	6866      	ldr	r6, [r4, #4]
 80072e8:	60a6      	str	r6, [r4, #8]
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	db05      	blt.n	80072fa <_printf_i+0x10e>
 80072ee:	6821      	ldr	r1, [r4, #0]
 80072f0:	432e      	orrs	r6, r5
 80072f2:	f021 0104 	bic.w	r1, r1, #4
 80072f6:	6021      	str	r1, [r4, #0]
 80072f8:	d04b      	beq.n	8007392 <_printf_i+0x1a6>
 80072fa:	4616      	mov	r6, r2
 80072fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007300:	fb03 5711 	mls	r7, r3, r1, r5
 8007304:	5dc7      	ldrb	r7, [r0, r7]
 8007306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800730a:	462f      	mov	r7, r5
 800730c:	42bb      	cmp	r3, r7
 800730e:	460d      	mov	r5, r1
 8007310:	d9f4      	bls.n	80072fc <_printf_i+0x110>
 8007312:	2b08      	cmp	r3, #8
 8007314:	d10b      	bne.n	800732e <_printf_i+0x142>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	07df      	lsls	r7, r3, #31
 800731a:	d508      	bpl.n	800732e <_printf_i+0x142>
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	6861      	ldr	r1, [r4, #4]
 8007320:	4299      	cmp	r1, r3
 8007322:	bfde      	ittt	le
 8007324:	2330      	movle	r3, #48	@ 0x30
 8007326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800732a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800732e:	1b92      	subs	r2, r2, r6
 8007330:	6122      	str	r2, [r4, #16]
 8007332:	f8cd a000 	str.w	sl, [sp]
 8007336:	464b      	mov	r3, r9
 8007338:	aa03      	add	r2, sp, #12
 800733a:	4621      	mov	r1, r4
 800733c:	4640      	mov	r0, r8
 800733e:	f7ff fee7 	bl	8007110 <_printf_common>
 8007342:	3001      	adds	r0, #1
 8007344:	d14a      	bne.n	80073dc <_printf_i+0x1f0>
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	b004      	add	sp, #16
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	f043 0320 	orr.w	r3, r3, #32
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	4832      	ldr	r0, [pc, #200]	@ (8007424 <_printf_i+0x238>)
 800735a:	2778      	movs	r7, #120	@ 0x78
 800735c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	6831      	ldr	r1, [r6, #0]
 8007364:	061f      	lsls	r7, r3, #24
 8007366:	f851 5b04 	ldr.w	r5, [r1], #4
 800736a:	d402      	bmi.n	8007372 <_printf_i+0x186>
 800736c:	065f      	lsls	r7, r3, #25
 800736e:	bf48      	it	mi
 8007370:	b2ad      	uxthmi	r5, r5
 8007372:	6031      	str	r1, [r6, #0]
 8007374:	07d9      	lsls	r1, r3, #31
 8007376:	bf44      	itt	mi
 8007378:	f043 0320 	orrmi.w	r3, r3, #32
 800737c:	6023      	strmi	r3, [r4, #0]
 800737e:	b11d      	cbz	r5, 8007388 <_printf_i+0x19c>
 8007380:	2310      	movs	r3, #16
 8007382:	e7ad      	b.n	80072e0 <_printf_i+0xf4>
 8007384:	4826      	ldr	r0, [pc, #152]	@ (8007420 <_printf_i+0x234>)
 8007386:	e7e9      	b.n	800735c <_printf_i+0x170>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	f023 0320 	bic.w	r3, r3, #32
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	e7f6      	b.n	8007380 <_printf_i+0x194>
 8007392:	4616      	mov	r6, r2
 8007394:	e7bd      	b.n	8007312 <_printf_i+0x126>
 8007396:	6833      	ldr	r3, [r6, #0]
 8007398:	6825      	ldr	r5, [r4, #0]
 800739a:	6961      	ldr	r1, [r4, #20]
 800739c:	1d18      	adds	r0, r3, #4
 800739e:	6030      	str	r0, [r6, #0]
 80073a0:	062e      	lsls	r6, r5, #24
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	d501      	bpl.n	80073aa <_printf_i+0x1be>
 80073a6:	6019      	str	r1, [r3, #0]
 80073a8:	e002      	b.n	80073b0 <_printf_i+0x1c4>
 80073aa:	0668      	lsls	r0, r5, #25
 80073ac:	d5fb      	bpl.n	80073a6 <_printf_i+0x1ba>
 80073ae:	8019      	strh	r1, [r3, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	4616      	mov	r6, r2
 80073b6:	e7bc      	b.n	8007332 <_printf_i+0x146>
 80073b8:	6833      	ldr	r3, [r6, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	6032      	str	r2, [r6, #0]
 80073be:	681e      	ldr	r6, [r3, #0]
 80073c0:	6862      	ldr	r2, [r4, #4]
 80073c2:	2100      	movs	r1, #0
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7f8 ff0b 	bl	80001e0 <memchr>
 80073ca:	b108      	cbz	r0, 80073d0 <_printf_i+0x1e4>
 80073cc:	1b80      	subs	r0, r0, r6
 80073ce:	6060      	str	r0, [r4, #4]
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	2300      	movs	r3, #0
 80073d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073da:	e7aa      	b.n	8007332 <_printf_i+0x146>
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	4632      	mov	r2, r6
 80073e0:	4649      	mov	r1, r9
 80073e2:	4640      	mov	r0, r8
 80073e4:	47d0      	blx	sl
 80073e6:	3001      	adds	r0, #1
 80073e8:	d0ad      	beq.n	8007346 <_printf_i+0x15a>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	079b      	lsls	r3, r3, #30
 80073ee:	d413      	bmi.n	8007418 <_printf_i+0x22c>
 80073f0:	68e0      	ldr	r0, [r4, #12]
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	4298      	cmp	r0, r3
 80073f6:	bfb8      	it	lt
 80073f8:	4618      	movlt	r0, r3
 80073fa:	e7a6      	b.n	800734a <_printf_i+0x15e>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4632      	mov	r2, r6
 8007400:	4649      	mov	r1, r9
 8007402:	4640      	mov	r0, r8
 8007404:	47d0      	blx	sl
 8007406:	3001      	adds	r0, #1
 8007408:	d09d      	beq.n	8007346 <_printf_i+0x15a>
 800740a:	3501      	adds	r5, #1
 800740c:	68e3      	ldr	r3, [r4, #12]
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	1a5b      	subs	r3, r3, r1
 8007412:	42ab      	cmp	r3, r5
 8007414:	dcf2      	bgt.n	80073fc <_printf_i+0x210>
 8007416:	e7eb      	b.n	80073f0 <_printf_i+0x204>
 8007418:	2500      	movs	r5, #0
 800741a:	f104 0619 	add.w	r6, r4, #25
 800741e:	e7f5      	b.n	800740c <_printf_i+0x220>
 8007420:	08007bd2 	.word	0x08007bd2
 8007424:	08007be3 	.word	0x08007be3

08007428 <_scanf_chars>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4615      	mov	r5, r2
 800742e:	688a      	ldr	r2, [r1, #8]
 8007430:	4680      	mov	r8, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b932      	cbnz	r2, 8007444 <_scanf_chars+0x1c>
 8007436:	698a      	ldr	r2, [r1, #24]
 8007438:	2a00      	cmp	r2, #0
 800743a:	bf14      	ite	ne
 800743c:	f04f 32ff 	movne.w	r2, #4294967295
 8007440:	2201      	moveq	r2, #1
 8007442:	608a      	str	r2, [r1, #8]
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80074d8 <_scanf_chars+0xb0>
 800744a:	06d1      	lsls	r1, r2, #27
 800744c:	bf5f      	itttt	pl
 800744e:	681a      	ldrpl	r2, [r3, #0]
 8007450:	1d11      	addpl	r1, r2, #4
 8007452:	6019      	strpl	r1, [r3, #0]
 8007454:	6816      	ldrpl	r6, [r2, #0]
 8007456:	2700      	movs	r7, #0
 8007458:	69a0      	ldr	r0, [r4, #24]
 800745a:	b188      	cbz	r0, 8007480 <_scanf_chars+0x58>
 800745c:	2801      	cmp	r0, #1
 800745e:	d107      	bne.n	8007470 <_scanf_chars+0x48>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	6963      	ldr	r3, [r4, #20]
 8007466:	5c9b      	ldrb	r3, [r3, r2]
 8007468:	b953      	cbnz	r3, 8007480 <_scanf_chars+0x58>
 800746a:	2f00      	cmp	r7, #0
 800746c:	d031      	beq.n	80074d2 <_scanf_chars+0xaa>
 800746e:	e022      	b.n	80074b6 <_scanf_chars+0x8e>
 8007470:	2802      	cmp	r0, #2
 8007472:	d120      	bne.n	80074b6 <_scanf_chars+0x8e>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f819 3003 	ldrb.w	r3, [r9, r3]
 800747c:	071b      	lsls	r3, r3, #28
 800747e:	d41a      	bmi.n	80074b6 <_scanf_chars+0x8e>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	06da      	lsls	r2, r3, #27
 8007484:	bf5e      	ittt	pl
 8007486:	682b      	ldrpl	r3, [r5, #0]
 8007488:	781b      	ldrbpl	r3, [r3, #0]
 800748a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800748e:	682a      	ldr	r2, [r5, #0]
 8007490:	686b      	ldr	r3, [r5, #4]
 8007492:	3201      	adds	r2, #1
 8007494:	602a      	str	r2, [r5, #0]
 8007496:	68a2      	ldr	r2, [r4, #8]
 8007498:	3b01      	subs	r3, #1
 800749a:	3a01      	subs	r2, #1
 800749c:	606b      	str	r3, [r5, #4]
 800749e:	3701      	adds	r7, #1
 80074a0:	60a2      	str	r2, [r4, #8]
 80074a2:	b142      	cbz	r2, 80074b6 <_scanf_chars+0x8e>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dcd7      	bgt.n	8007458 <_scanf_chars+0x30>
 80074a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80074ac:	4629      	mov	r1, r5
 80074ae:	4640      	mov	r0, r8
 80074b0:	4798      	blx	r3
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d0d0      	beq.n	8007458 <_scanf_chars+0x30>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f013 0310 	ands.w	r3, r3, #16
 80074bc:	d105      	bne.n	80074ca <_scanf_chars+0xa2>
 80074be:	68e2      	ldr	r2, [r4, #12]
 80074c0:	3201      	adds	r2, #1
 80074c2:	60e2      	str	r2, [r4, #12]
 80074c4:	69a2      	ldr	r2, [r4, #24]
 80074c6:	b102      	cbz	r2, 80074ca <_scanf_chars+0xa2>
 80074c8:	7033      	strb	r3, [r6, #0]
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	443b      	add	r3, r7
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	2000      	movs	r0, #0
 80074d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d6:	bf00      	nop
 80074d8:	08007ac1 	.word	0x08007ac1

080074dc <_scanf_i>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	4698      	mov	r8, r3
 80074e2:	4b74      	ldr	r3, [pc, #464]	@ (80076b4 <_scanf_i+0x1d8>)
 80074e4:	460c      	mov	r4, r1
 80074e6:	4682      	mov	sl, r0
 80074e8:	4616      	mov	r6, r2
 80074ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80074ee:	b087      	sub	sp, #28
 80074f0:	ab03      	add	r3, sp, #12
 80074f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80074f6:	4b70      	ldr	r3, [pc, #448]	@ (80076b8 <_scanf_i+0x1dc>)
 80074f8:	69a1      	ldr	r1, [r4, #24]
 80074fa:	4a70      	ldr	r2, [pc, #448]	@ (80076bc <_scanf_i+0x1e0>)
 80074fc:	2903      	cmp	r1, #3
 80074fe:	bf08      	it	eq
 8007500:	461a      	moveq	r2, r3
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800750c:	bf88      	it	hi
 800750e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007512:	4627      	mov	r7, r4
 8007514:	bf82      	ittt	hi
 8007516:	eb03 0905 	addhi.w	r9, r3, r5
 800751a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800751e:	60a3      	strhi	r3, [r4, #8]
 8007520:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007524:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007528:	bf98      	it	ls
 800752a:	f04f 0900 	movls.w	r9, #0
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	463d      	mov	r5, r7
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	6831      	ldr	r1, [r6, #0]
 8007538:	ab03      	add	r3, sp, #12
 800753a:	7809      	ldrb	r1, [r1, #0]
 800753c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007540:	2202      	movs	r2, #2
 8007542:	f7f8 fe4d 	bl	80001e0 <memchr>
 8007546:	b328      	cbz	r0, 8007594 <_scanf_i+0xb8>
 8007548:	f1bb 0f01 	cmp.w	fp, #1
 800754c:	d159      	bne.n	8007602 <_scanf_i+0x126>
 800754e:	6862      	ldr	r2, [r4, #4]
 8007550:	b92a      	cbnz	r2, 800755e <_scanf_i+0x82>
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	2108      	movs	r1, #8
 8007556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800755a:	6061      	str	r1, [r4, #4]
 800755c:	6022      	str	r2, [r4, #0]
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	68a2      	ldr	r2, [r4, #8]
 8007568:	1e51      	subs	r1, r2, #1
 800756a:	60a1      	str	r1, [r4, #8]
 800756c:	b192      	cbz	r2, 8007594 <_scanf_i+0xb8>
 800756e:	6832      	ldr	r2, [r6, #0]
 8007570:	1c51      	adds	r1, r2, #1
 8007572:	6031      	str	r1, [r6, #0]
 8007574:	7812      	ldrb	r2, [r2, #0]
 8007576:	f805 2b01 	strb.w	r2, [r5], #1
 800757a:	6872      	ldr	r2, [r6, #4]
 800757c:	3a01      	subs	r2, #1
 800757e:	2a00      	cmp	r2, #0
 8007580:	6072      	str	r2, [r6, #4]
 8007582:	dc07      	bgt.n	8007594 <_scanf_i+0xb8>
 8007584:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007588:	4631      	mov	r1, r6
 800758a:	4650      	mov	r0, sl
 800758c:	4790      	blx	r2
 800758e:	2800      	cmp	r0, #0
 8007590:	f040 8085 	bne.w	800769e <_scanf_i+0x1c2>
 8007594:	f10b 0b01 	add.w	fp, fp, #1
 8007598:	f1bb 0f03 	cmp.w	fp, #3
 800759c:	d1cb      	bne.n	8007536 <_scanf_i+0x5a>
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	b90b      	cbnz	r3, 80075a6 <_scanf_i+0xca>
 80075a2:	230a      	movs	r3, #10
 80075a4:	6063      	str	r3, [r4, #4]
 80075a6:	6863      	ldr	r3, [r4, #4]
 80075a8:	4945      	ldr	r1, [pc, #276]	@ (80076c0 <_scanf_i+0x1e4>)
 80075aa:	6960      	ldr	r0, [r4, #20]
 80075ac:	1ac9      	subs	r1, r1, r3
 80075ae:	f000 f889 	bl	80076c4 <__sccl>
 80075b2:	f04f 0b00 	mov.w	fp, #0
 80075b6:	68a3      	ldr	r3, [r4, #8]
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d03d      	beq.n	800763a <_scanf_i+0x15e>
 80075be:	6831      	ldr	r1, [r6, #0]
 80075c0:	6960      	ldr	r0, [r4, #20]
 80075c2:	f891 c000 	ldrb.w	ip, [r1]
 80075c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d035      	beq.n	800763a <_scanf_i+0x15e>
 80075ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80075d2:	d124      	bne.n	800761e <_scanf_i+0x142>
 80075d4:	0510      	lsls	r0, r2, #20
 80075d6:	d522      	bpl.n	800761e <_scanf_i+0x142>
 80075d8:	f10b 0b01 	add.w	fp, fp, #1
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	d003      	beq.n	80075ea <_scanf_i+0x10e>
 80075e2:	3301      	adds	r3, #1
 80075e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80075e8:	60a3      	str	r3, [r4, #8]
 80075ea:	6873      	ldr	r3, [r6, #4]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	6073      	str	r3, [r6, #4]
 80075f2:	dd1b      	ble.n	800762c <_scanf_i+0x150>
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	60a3      	str	r3, [r4, #8]
 8007600:	e7d9      	b.n	80075b6 <_scanf_i+0xda>
 8007602:	f1bb 0f02 	cmp.w	fp, #2
 8007606:	d1ae      	bne.n	8007566 <_scanf_i+0x8a>
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800760e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007612:	d1c4      	bne.n	800759e <_scanf_i+0xc2>
 8007614:	2110      	movs	r1, #16
 8007616:	6061      	str	r1, [r4, #4]
 8007618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800761c:	e7a2      	b.n	8007564 <_scanf_i+0x88>
 800761e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	780b      	ldrb	r3, [r1, #0]
 8007626:	f805 3b01 	strb.w	r3, [r5], #1
 800762a:	e7de      	b.n	80075ea <_scanf_i+0x10e>
 800762c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007630:	4631      	mov	r1, r6
 8007632:	4650      	mov	r0, sl
 8007634:	4798      	blx	r3
 8007636:	2800      	cmp	r0, #0
 8007638:	d0df      	beq.n	80075fa <_scanf_i+0x11e>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	05d9      	lsls	r1, r3, #23
 800763e:	d50d      	bpl.n	800765c <_scanf_i+0x180>
 8007640:	42bd      	cmp	r5, r7
 8007642:	d909      	bls.n	8007658 <_scanf_i+0x17c>
 8007644:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007648:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800764c:	4632      	mov	r2, r6
 800764e:	4650      	mov	r0, sl
 8007650:	4798      	blx	r3
 8007652:	f105 39ff 	add.w	r9, r5, #4294967295
 8007656:	464d      	mov	r5, r9
 8007658:	42bd      	cmp	r5, r7
 800765a:	d028      	beq.n	80076ae <_scanf_i+0x1d2>
 800765c:	6822      	ldr	r2, [r4, #0]
 800765e:	f012 0210 	ands.w	r2, r2, #16
 8007662:	d113      	bne.n	800768c <_scanf_i+0x1b0>
 8007664:	702a      	strb	r2, [r5, #0]
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	9e01      	ldr	r6, [sp, #4]
 800766a:	4639      	mov	r1, r7
 800766c:	4650      	mov	r0, sl
 800766e:	47b0      	blx	r6
 8007670:	f8d8 3000 	ldr.w	r3, [r8]
 8007674:	6821      	ldr	r1, [r4, #0]
 8007676:	1d1a      	adds	r2, r3, #4
 8007678:	f8c8 2000 	str.w	r2, [r8]
 800767c:	f011 0f20 	tst.w	r1, #32
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	d00f      	beq.n	80076a4 <_scanf_i+0x1c8>
 8007684:	6018      	str	r0, [r3, #0]
 8007686:	68e3      	ldr	r3, [r4, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60e3      	str	r3, [r4, #12]
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	1bed      	subs	r5, r5, r7
 8007690:	445d      	add	r5, fp
 8007692:	442b      	add	r3, r5
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	2000      	movs	r0, #0
 8007698:	b007      	add	sp, #28
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769e:	f04f 0b00 	mov.w	fp, #0
 80076a2:	e7ca      	b.n	800763a <_scanf_i+0x15e>
 80076a4:	07ca      	lsls	r2, r1, #31
 80076a6:	bf4c      	ite	mi
 80076a8:	8018      	strhmi	r0, [r3, #0]
 80076aa:	6018      	strpl	r0, [r3, #0]
 80076ac:	e7eb      	b.n	8007686 <_scanf_i+0x1aa>
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7f2      	b.n	8007698 <_scanf_i+0x1bc>
 80076b2:	bf00      	nop
 80076b4:	08007a6c 	.word	0x08007a6c
 80076b8:	080078d5 	.word	0x080078d5
 80076bc:	080079b5 	.word	0x080079b5
 80076c0:	08007c04 	.word	0x08007c04

080076c4 <__sccl>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	780b      	ldrb	r3, [r1, #0]
 80076c8:	4604      	mov	r4, r0
 80076ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80076cc:	bf0b      	itete	eq
 80076ce:	784b      	ldrbeq	r3, [r1, #1]
 80076d0:	1c4a      	addne	r2, r1, #1
 80076d2:	1c8a      	addeq	r2, r1, #2
 80076d4:	2100      	movne	r1, #0
 80076d6:	bf08      	it	eq
 80076d8:	2101      	moveq	r1, #1
 80076da:	3801      	subs	r0, #1
 80076dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80076e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80076e4:	42a8      	cmp	r0, r5
 80076e6:	d1fb      	bne.n	80076e0 <__sccl+0x1c>
 80076e8:	b90b      	cbnz	r3, 80076ee <__sccl+0x2a>
 80076ea:	1e50      	subs	r0, r2, #1
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	f081 0101 	eor.w	r1, r1, #1
 80076f2:	54e1      	strb	r1, [r4, r3]
 80076f4:	4610      	mov	r0, r2
 80076f6:	4602      	mov	r2, r0
 80076f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80076fe:	d005      	beq.n	800770c <__sccl+0x48>
 8007700:	2d5d      	cmp	r5, #93	@ 0x5d
 8007702:	d016      	beq.n	8007732 <__sccl+0x6e>
 8007704:	2d00      	cmp	r5, #0
 8007706:	d0f1      	beq.n	80076ec <__sccl+0x28>
 8007708:	462b      	mov	r3, r5
 800770a:	e7f2      	b.n	80076f2 <__sccl+0x2e>
 800770c:	7846      	ldrb	r6, [r0, #1]
 800770e:	2e5d      	cmp	r6, #93	@ 0x5d
 8007710:	d0fa      	beq.n	8007708 <__sccl+0x44>
 8007712:	42b3      	cmp	r3, r6
 8007714:	dcf8      	bgt.n	8007708 <__sccl+0x44>
 8007716:	3002      	adds	r0, #2
 8007718:	461a      	mov	r2, r3
 800771a:	3201      	adds	r2, #1
 800771c:	4296      	cmp	r6, r2
 800771e:	54a1      	strb	r1, [r4, r2]
 8007720:	dcfb      	bgt.n	800771a <__sccl+0x56>
 8007722:	1af2      	subs	r2, r6, r3
 8007724:	3a01      	subs	r2, #1
 8007726:	1c5d      	adds	r5, r3, #1
 8007728:	42b3      	cmp	r3, r6
 800772a:	bfa8      	it	ge
 800772c:	2200      	movge	r2, #0
 800772e:	18ab      	adds	r3, r5, r2
 8007730:	e7e1      	b.n	80076f6 <__sccl+0x32>
 8007732:	4610      	mov	r0, r2
 8007734:	e7da      	b.n	80076ec <__sccl+0x28>

08007736 <__submore>:
 8007736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773a:	460c      	mov	r4, r1
 800773c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800773e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007742:	4299      	cmp	r1, r3
 8007744:	d11d      	bne.n	8007782 <__submore+0x4c>
 8007746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800774a:	f7fe ffcd 	bl	80066e8 <_malloc_r>
 800774e:	b918      	cbnz	r0, 8007758 <__submore+0x22>
 8007750:	f04f 30ff 	mov.w	r0, #4294967295
 8007754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800775c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800775e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8007762:	6360      	str	r0, [r4, #52]	@ 0x34
 8007764:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007768:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800776c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007770:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007774:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007778:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800777c:	6020      	str	r0, [r4, #0]
 800777e:	2000      	movs	r0, #0
 8007780:	e7e8      	b.n	8007754 <__submore+0x1e>
 8007782:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007784:	0077      	lsls	r7, r6, #1
 8007786:	463a      	mov	r2, r7
 8007788:	f7ff f842 	bl	8006810 <_realloc_r>
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d0de      	beq.n	8007750 <__submore+0x1a>
 8007792:	eb00 0806 	add.w	r8, r0, r6
 8007796:	4601      	mov	r1, r0
 8007798:	4632      	mov	r2, r6
 800779a:	4640      	mov	r0, r8
 800779c:	f7ff f930 	bl	8006a00 <memcpy>
 80077a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80077a4:	f8c4 8000 	str.w	r8, [r4]
 80077a8:	e7e9      	b.n	800777e <__submore+0x48>

080077aa <memmove>:
 80077aa:	4288      	cmp	r0, r1
 80077ac:	b510      	push	{r4, lr}
 80077ae:	eb01 0402 	add.w	r4, r1, r2
 80077b2:	d902      	bls.n	80077ba <memmove+0x10>
 80077b4:	4284      	cmp	r4, r0
 80077b6:	4623      	mov	r3, r4
 80077b8:	d807      	bhi.n	80077ca <memmove+0x20>
 80077ba:	1e43      	subs	r3, r0, #1
 80077bc:	42a1      	cmp	r1, r4
 80077be:	d008      	beq.n	80077d2 <memmove+0x28>
 80077c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077c8:	e7f8      	b.n	80077bc <memmove+0x12>
 80077ca:	4402      	add	r2, r0
 80077cc:	4601      	mov	r1, r0
 80077ce:	428a      	cmp	r2, r1
 80077d0:	d100      	bne.n	80077d4 <memmove+0x2a>
 80077d2:	bd10      	pop	{r4, pc}
 80077d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077dc:	e7f7      	b.n	80077ce <memmove+0x24>
	...

080077e0 <_strtol_l.isra.0>:
 80077e0:	2b24      	cmp	r3, #36	@ 0x24
 80077e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e6:	4686      	mov	lr, r0
 80077e8:	4690      	mov	r8, r2
 80077ea:	d801      	bhi.n	80077f0 <_strtol_l.isra.0+0x10>
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d106      	bne.n	80077fe <_strtol_l.isra.0+0x1e>
 80077f0:	f7ff f8da 	bl	80069a8 <__errno>
 80077f4:	2316      	movs	r3, #22
 80077f6:	6003      	str	r3, [r0, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	4834      	ldr	r0, [pc, #208]	@ (80078d0 <_strtol_l.isra.0+0xf0>)
 8007800:	460d      	mov	r5, r1
 8007802:	462a      	mov	r2, r5
 8007804:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007808:	5d06      	ldrb	r6, [r0, r4]
 800780a:	f016 0608 	ands.w	r6, r6, #8
 800780e:	d1f8      	bne.n	8007802 <_strtol_l.isra.0+0x22>
 8007810:	2c2d      	cmp	r4, #45	@ 0x2d
 8007812:	d110      	bne.n	8007836 <_strtol_l.isra.0+0x56>
 8007814:	782c      	ldrb	r4, [r5, #0]
 8007816:	2601      	movs	r6, #1
 8007818:	1c95      	adds	r5, r2, #2
 800781a:	f033 0210 	bics.w	r2, r3, #16
 800781e:	d115      	bne.n	800784c <_strtol_l.isra.0+0x6c>
 8007820:	2c30      	cmp	r4, #48	@ 0x30
 8007822:	d10d      	bne.n	8007840 <_strtol_l.isra.0+0x60>
 8007824:	782a      	ldrb	r2, [r5, #0]
 8007826:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800782a:	2a58      	cmp	r2, #88	@ 0x58
 800782c:	d108      	bne.n	8007840 <_strtol_l.isra.0+0x60>
 800782e:	786c      	ldrb	r4, [r5, #1]
 8007830:	3502      	adds	r5, #2
 8007832:	2310      	movs	r3, #16
 8007834:	e00a      	b.n	800784c <_strtol_l.isra.0+0x6c>
 8007836:	2c2b      	cmp	r4, #43	@ 0x2b
 8007838:	bf04      	itt	eq
 800783a:	782c      	ldrbeq	r4, [r5, #0]
 800783c:	1c95      	addeq	r5, r2, #2
 800783e:	e7ec      	b.n	800781a <_strtol_l.isra.0+0x3a>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f6      	bne.n	8007832 <_strtol_l.isra.0+0x52>
 8007844:	2c30      	cmp	r4, #48	@ 0x30
 8007846:	bf14      	ite	ne
 8007848:	230a      	movne	r3, #10
 800784a:	2308      	moveq	r3, #8
 800784c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007850:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007854:	2200      	movs	r2, #0
 8007856:	fbbc f9f3 	udiv	r9, ip, r3
 800785a:	4610      	mov	r0, r2
 800785c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007860:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007864:	2f09      	cmp	r7, #9
 8007866:	d80f      	bhi.n	8007888 <_strtol_l.isra.0+0xa8>
 8007868:	463c      	mov	r4, r7
 800786a:	42a3      	cmp	r3, r4
 800786c:	dd1b      	ble.n	80078a6 <_strtol_l.isra.0+0xc6>
 800786e:	1c57      	adds	r7, r2, #1
 8007870:	d007      	beq.n	8007882 <_strtol_l.isra.0+0xa2>
 8007872:	4581      	cmp	r9, r0
 8007874:	d314      	bcc.n	80078a0 <_strtol_l.isra.0+0xc0>
 8007876:	d101      	bne.n	800787c <_strtol_l.isra.0+0x9c>
 8007878:	45a2      	cmp	sl, r4
 800787a:	db11      	blt.n	80078a0 <_strtol_l.isra.0+0xc0>
 800787c:	fb00 4003 	mla	r0, r0, r3, r4
 8007880:	2201      	movs	r2, #1
 8007882:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007886:	e7eb      	b.n	8007860 <_strtol_l.isra.0+0x80>
 8007888:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800788c:	2f19      	cmp	r7, #25
 800788e:	d801      	bhi.n	8007894 <_strtol_l.isra.0+0xb4>
 8007890:	3c37      	subs	r4, #55	@ 0x37
 8007892:	e7ea      	b.n	800786a <_strtol_l.isra.0+0x8a>
 8007894:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007898:	2f19      	cmp	r7, #25
 800789a:	d804      	bhi.n	80078a6 <_strtol_l.isra.0+0xc6>
 800789c:	3c57      	subs	r4, #87	@ 0x57
 800789e:	e7e4      	b.n	800786a <_strtol_l.isra.0+0x8a>
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295
 80078a4:	e7ed      	b.n	8007882 <_strtol_l.isra.0+0xa2>
 80078a6:	1c53      	adds	r3, r2, #1
 80078a8:	d108      	bne.n	80078bc <_strtol_l.isra.0+0xdc>
 80078aa:	2322      	movs	r3, #34	@ 0x22
 80078ac:	f8ce 3000 	str.w	r3, [lr]
 80078b0:	4660      	mov	r0, ip
 80078b2:	f1b8 0f00 	cmp.w	r8, #0
 80078b6:	d0a0      	beq.n	80077fa <_strtol_l.isra.0+0x1a>
 80078b8:	1e69      	subs	r1, r5, #1
 80078ba:	e006      	b.n	80078ca <_strtol_l.isra.0+0xea>
 80078bc:	b106      	cbz	r6, 80078c0 <_strtol_l.isra.0+0xe0>
 80078be:	4240      	negs	r0, r0
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	d099      	beq.n	80077fa <_strtol_l.isra.0+0x1a>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	d1f6      	bne.n	80078b8 <_strtol_l.isra.0+0xd8>
 80078ca:	f8c8 1000 	str.w	r1, [r8]
 80078ce:	e794      	b.n	80077fa <_strtol_l.isra.0+0x1a>
 80078d0:	08007ac1 	.word	0x08007ac1

080078d4 <_strtol_r>:
 80078d4:	f7ff bf84 	b.w	80077e0 <_strtol_l.isra.0>

080078d8 <_strtoul_l.isra.0>:
 80078d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078dc:	4e34      	ldr	r6, [pc, #208]	@ (80079b0 <_strtoul_l.isra.0+0xd8>)
 80078de:	4686      	mov	lr, r0
 80078e0:	460d      	mov	r5, r1
 80078e2:	4628      	mov	r0, r5
 80078e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078e8:	5d37      	ldrb	r7, [r6, r4]
 80078ea:	f017 0708 	ands.w	r7, r7, #8
 80078ee:	d1f8      	bne.n	80078e2 <_strtoul_l.isra.0+0xa>
 80078f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80078f2:	d110      	bne.n	8007916 <_strtoul_l.isra.0+0x3e>
 80078f4:	782c      	ldrb	r4, [r5, #0]
 80078f6:	2701      	movs	r7, #1
 80078f8:	1c85      	adds	r5, r0, #2
 80078fa:	f033 0010 	bics.w	r0, r3, #16
 80078fe:	d115      	bne.n	800792c <_strtoul_l.isra.0+0x54>
 8007900:	2c30      	cmp	r4, #48	@ 0x30
 8007902:	d10d      	bne.n	8007920 <_strtoul_l.isra.0+0x48>
 8007904:	7828      	ldrb	r0, [r5, #0]
 8007906:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800790a:	2858      	cmp	r0, #88	@ 0x58
 800790c:	d108      	bne.n	8007920 <_strtoul_l.isra.0+0x48>
 800790e:	786c      	ldrb	r4, [r5, #1]
 8007910:	3502      	adds	r5, #2
 8007912:	2310      	movs	r3, #16
 8007914:	e00a      	b.n	800792c <_strtoul_l.isra.0+0x54>
 8007916:	2c2b      	cmp	r4, #43	@ 0x2b
 8007918:	bf04      	itt	eq
 800791a:	782c      	ldrbeq	r4, [r5, #0]
 800791c:	1c85      	addeq	r5, r0, #2
 800791e:	e7ec      	b.n	80078fa <_strtoul_l.isra.0+0x22>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f6      	bne.n	8007912 <_strtoul_l.isra.0+0x3a>
 8007924:	2c30      	cmp	r4, #48	@ 0x30
 8007926:	bf14      	ite	ne
 8007928:	230a      	movne	r3, #10
 800792a:	2308      	moveq	r3, #8
 800792c:	f04f 38ff 	mov.w	r8, #4294967295
 8007930:	2600      	movs	r6, #0
 8007932:	fbb8 f8f3 	udiv	r8, r8, r3
 8007936:	fb03 f908 	mul.w	r9, r3, r8
 800793a:	ea6f 0909 	mvn.w	r9, r9
 800793e:	4630      	mov	r0, r6
 8007940:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007944:	f1bc 0f09 	cmp.w	ip, #9
 8007948:	d810      	bhi.n	800796c <_strtoul_l.isra.0+0x94>
 800794a:	4664      	mov	r4, ip
 800794c:	42a3      	cmp	r3, r4
 800794e:	dd1e      	ble.n	800798e <_strtoul_l.isra.0+0xb6>
 8007950:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007954:	d007      	beq.n	8007966 <_strtoul_l.isra.0+0x8e>
 8007956:	4580      	cmp	r8, r0
 8007958:	d316      	bcc.n	8007988 <_strtoul_l.isra.0+0xb0>
 800795a:	d101      	bne.n	8007960 <_strtoul_l.isra.0+0x88>
 800795c:	45a1      	cmp	r9, r4
 800795e:	db13      	blt.n	8007988 <_strtoul_l.isra.0+0xb0>
 8007960:	fb00 4003 	mla	r0, r0, r3, r4
 8007964:	2601      	movs	r6, #1
 8007966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800796a:	e7e9      	b.n	8007940 <_strtoul_l.isra.0+0x68>
 800796c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007970:	f1bc 0f19 	cmp.w	ip, #25
 8007974:	d801      	bhi.n	800797a <_strtoul_l.isra.0+0xa2>
 8007976:	3c37      	subs	r4, #55	@ 0x37
 8007978:	e7e8      	b.n	800794c <_strtoul_l.isra.0+0x74>
 800797a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800797e:	f1bc 0f19 	cmp.w	ip, #25
 8007982:	d804      	bhi.n	800798e <_strtoul_l.isra.0+0xb6>
 8007984:	3c57      	subs	r4, #87	@ 0x57
 8007986:	e7e1      	b.n	800794c <_strtoul_l.isra.0+0x74>
 8007988:	f04f 36ff 	mov.w	r6, #4294967295
 800798c:	e7eb      	b.n	8007966 <_strtoul_l.isra.0+0x8e>
 800798e:	1c73      	adds	r3, r6, #1
 8007990:	d106      	bne.n	80079a0 <_strtoul_l.isra.0+0xc8>
 8007992:	2322      	movs	r3, #34	@ 0x22
 8007994:	f8ce 3000 	str.w	r3, [lr]
 8007998:	4630      	mov	r0, r6
 800799a:	b932      	cbnz	r2, 80079aa <_strtoul_l.isra.0+0xd2>
 800799c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079a0:	b107      	cbz	r7, 80079a4 <_strtoul_l.isra.0+0xcc>
 80079a2:	4240      	negs	r0, r0
 80079a4:	2a00      	cmp	r2, #0
 80079a6:	d0f9      	beq.n	800799c <_strtoul_l.isra.0+0xc4>
 80079a8:	b106      	cbz	r6, 80079ac <_strtoul_l.isra.0+0xd4>
 80079aa:	1e69      	subs	r1, r5, #1
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	e7f5      	b.n	800799c <_strtoul_l.isra.0+0xc4>
 80079b0:	08007ac1 	.word	0x08007ac1

080079b4 <_strtoul_r>:
 80079b4:	f7ff bf90 	b.w	80078d8 <_strtoul_l.isra.0>

080079b8 <_init>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr

080079c4 <_fini>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr
